//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Business {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Data;
    using System.ComponentModel.DataAnnotations;
    using Symber.Web.Data;
    using Symber.Web.Identity;
    
    
    /// <summary>
    /// APDBDef 是一个自动生成的具有 Partial 修饰的类，用于定义 APTableDef 和 APRelationDef。你可以添加同名的 Partial 类来扩充功能。
    /// </summary>
    public partial class APDBDef : APDatabase {
        
        private static PicklistTableDef _picklist;
        
        private static PicklistItemTableDef _picklistItem;
        
        private static School_InfoTableDef _school_Info;
        
        private static Staff_InfoTableDef _staff_Info;
        
        private static BzUserTableDef _bzUser;
        
        private static BzUserClaimTableDef _bzUserClaim;
        
        private static BzUserProfileTableDef _bzUserProfile;
        
        private static BzRoleTableDef _bzRole;
        
        private static BzUserRoleTableDef _bzUserRole;
        
        private static DeclareTableDef _declare;
        
        private static DeclareResumeTableDef _declareResume;
        
        private static DeclareContentTableDef _declareContent;
        
        private static DeclareActiveTableDef _declareActive;
        
        private static DeclareAchievementTableDef _declareAchievement;
        
        private static DeclareOrgConstTableDef _declareOrgConst;
        
        private static APDalProvider staticProvider = Provider;
        
        private APDalDef.PicklistDal _picklistDal;
        
        private APDalDef.PicklistItemDal _picklistItemDal;
        
        private APDalDef.School_InfoDal _school_InfoDal;
        
        private APDalDef.Staff_InfoDal _staff_InfoDal;
        
        private APDalDef.BzUserDal _bzUserDal;
        
        private APDalDef.BzUserClaimDal _bzUserClaimDal;
        
        private APDalDef.BzUserProfileDal _bzUserProfileDal;
        
        private APDalDef.BzRoleDal _bzRoleDal;
        
        private APDalDef.BzUserRoleDal _bzUserRoleDal;
        
        private APDalDef.DeclareDal _declareDal;
        
        private APDalDef.DeclareResumeDal _declareResumeDal;
        
        private APDalDef.DeclareContentDal _declareContentDal;
        
        private APDalDef.DeclareActiveDal _declareActiveDal;
        
        private APDalDef.DeclareAchievementDal _declareAchievementDal;
        
        private APDalDef.DeclareOrgConstDal _declareOrgConstDal;
        
        public APDBDef() : 
                base(staticProvider) {
        }
        
        public APDBDef(string providerName) : 
                base(providerName) {
        }
        
        /// <summary>
        /// 选项列表 TableDef
        /// </summary>
        public static PicklistTableDef Picklist {
            get {
                if ((_picklist == null)) {
                    _picklist = new PicklistTableDef("Picklist");
                }
                return _picklist;
            }
        }
        
        /// <summary>
        /// 选项列表项 TableDef
        /// </summary>
        public static PicklistItemTableDef PicklistItem {
            get {
                if ((_picklistItem == null)) {
                    _picklistItem = new PicklistItemTableDef("PicklistItem");
                }
                return _picklistItem;
            }
        }
        
        /// <summary>
        /// 学校基础数据表 TableDef
        /// </summary>
        public static School_InfoTableDef School_Info {
            get {
                if ((_school_Info == null)) {
                    _school_Info = new School_InfoTableDef("School_Info");
                }
                return _school_Info;
            }
        }
        
        /// <summary>
        /// 教职工基础数据表 TableDef
        /// </summary>
        public static Staff_InfoTableDef Staff_Info {
            get {
                if ((_staff_Info == null)) {
                    _staff_Info = new Staff_InfoTableDef("Staff_Info");
                }
                return _staff_Info;
            }
        }
        
        /// <summary>
        /// 用户 TableDef
        /// </summary>
        public static BzUserTableDef BzUser {
            get {
                if ((_bzUser == null)) {
                    _bzUser = new BzUserTableDef("BzUser");
                }
                return _bzUser;
            }
        }
        
        /// <summary>
        /// UserClaim TableDef
        /// </summary>
        public static BzUserClaimTableDef BzUserClaim {
            get {
                if ((_bzUserClaim == null)) {
                    _bzUserClaim = new BzUserClaimTableDef("BzUserClaim");
                }
                return _bzUserClaim;
            }
        }
        
        /// <summary>
        /// 用户简档 TableDef
        /// </summary>
        public static BzUserProfileTableDef BzUserProfile {
            get {
                if ((_bzUserProfile == null)) {
                    _bzUserProfile = new BzUserProfileTableDef("BzUserProfile");
                }
                return _bzUserProfile;
            }
        }
        
        /// <summary>
        /// 角色 TableDef
        /// </summary>
        public static BzRoleTableDef BzRole {
            get {
                if ((_bzRole == null)) {
                    _bzRole = new BzRoleTableDef("BzRole");
                }
                return _bzRole;
            }
        }
        
        /// <summary>
        /// 用户角色 TableDef
        /// </summary>
        public static BzUserRoleTableDef BzUserRole {
            get {
                if ((_bzUserRole == null)) {
                    _bzUserRole = new BzUserRoleTableDef("BzUserRole");
                }
                return _bzUserRole;
            }
        }
        
        /// <summary>
        /// 申报 TableDef
        /// </summary>
        public static DeclareTableDef Declare {
            get {
                if ((_declare == null)) {
                    _declare = new DeclareTableDef("Declare");
                }
                return _declare;
            }
        }
        
        /// <summary>
        /// 申报-简历 TableDef
        /// </summary>
        public static DeclareResumeTableDef DeclareResume {
            get {
                if ((_declareResume == null)) {
                    _declareResume = new DeclareResumeTableDef("DeclareResume");
                }
                return _declareResume;
            }
        }
        
        /// <summary>
        /// 申报-内容 TableDef
        /// </summary>
        public static DeclareContentTableDef DeclareContent {
            get {
                if ((_declareContent == null)) {
                    _declareContent = new DeclareContentTableDef("DeclareContent");
                }
                return _declareContent;
            }
        }
        
        /// <summary>
        /// 申报-活动 TableDef
        /// </summary>
        public static DeclareActiveTableDef DeclareActive {
            get {
                if ((_declareActive == null)) {
                    _declareActive = new DeclareActiveTableDef("DeclareActive");
                }
                return _declareActive;
            }
        }
        
        /// <summary>
        /// 申报-科研成果 TableDef
        /// </summary>
        public static DeclareAchievementTableDef DeclareAchievement {
            get {
                if ((_declareAchievement == null)) {
                    _declareAchievement = new DeclareAchievementTableDef("DeclareAchievement");
                }
                return _declareAchievement;
            }
        }
        
        /// <summary>
        /// 申报-制度建设 TableDef
        /// </summary>
        public static DeclareOrgConstTableDef DeclareOrgConst {
            get {
                if ((_declareOrgConst == null)) {
                    _declareOrgConst = new DeclareOrgConstTableDef("DeclareOrgConst");
                }
                return _declareOrgConst;
            }
        }
        
        /// <summary>
        /// 选项列表 Dal
        /// </summary>
        public virtual APDalDef.PicklistDal PicklistDal {
            get {
                if ((_picklistDal == null)) {
                    _picklistDal = new APDalDef.PicklistDal(this);
                }
                return _picklistDal;
            }
        }
        
        /// <summary>
        /// 选项列表项 Dal
        /// </summary>
        public virtual APDalDef.PicklistItemDal PicklistItemDal {
            get {
                if ((_picklistItemDal == null)) {
                    _picklistItemDal = new APDalDef.PicklistItemDal(this);
                }
                return _picklistItemDal;
            }
        }
        
        /// <summary>
        /// 学校基础数据表 Dal
        /// </summary>
        public virtual APDalDef.School_InfoDal School_InfoDal {
            get {
                if ((_school_InfoDal == null)) {
                    _school_InfoDal = new APDalDef.School_InfoDal(this);
                }
                return _school_InfoDal;
            }
        }
        
        /// <summary>
        /// 教职工基础数据表 Dal
        /// </summary>
        public virtual APDalDef.Staff_InfoDal Staff_InfoDal {
            get {
                if ((_staff_InfoDal == null)) {
                    _staff_InfoDal = new APDalDef.Staff_InfoDal(this);
                }
                return _staff_InfoDal;
            }
        }
        
        /// <summary>
        /// 用户 Dal
        /// </summary>
        public virtual APDalDef.BzUserDal BzUserDal {
            get {
                if ((_bzUserDal == null)) {
                    _bzUserDal = new APDalDef.BzUserDal(this);
                }
                return _bzUserDal;
            }
        }
        
        /// <summary>
        /// UserClaim Dal
        /// </summary>
        public virtual APDalDef.BzUserClaimDal BzUserClaimDal {
            get {
                if ((_bzUserClaimDal == null)) {
                    _bzUserClaimDal = new APDalDef.BzUserClaimDal(this);
                }
                return _bzUserClaimDal;
            }
        }
        
        /// <summary>
        /// 用户简档 Dal
        /// </summary>
        public virtual APDalDef.BzUserProfileDal BzUserProfileDal {
            get {
                if ((_bzUserProfileDal == null)) {
                    _bzUserProfileDal = new APDalDef.BzUserProfileDal(this);
                }
                return _bzUserProfileDal;
            }
        }
        
        /// <summary>
        /// 角色 Dal
        /// </summary>
        public virtual APDalDef.BzRoleDal BzRoleDal {
            get {
                if ((_bzRoleDal == null)) {
                    _bzRoleDal = new APDalDef.BzRoleDal(this);
                }
                return _bzRoleDal;
            }
        }
        
        /// <summary>
        /// 用户角色 Dal
        /// </summary>
        public virtual APDalDef.BzUserRoleDal BzUserRoleDal {
            get {
                if ((_bzUserRoleDal == null)) {
                    _bzUserRoleDal = new APDalDef.BzUserRoleDal(this);
                }
                return _bzUserRoleDal;
            }
        }
        
        /// <summary>
        /// 申报 Dal
        /// </summary>
        public virtual APDalDef.DeclareDal DeclareDal {
            get {
                if ((_declareDal == null)) {
                    _declareDal = new APDalDef.DeclareDal(this);
                }
                return _declareDal;
            }
        }
        
        /// <summary>
        /// 申报-简历 Dal
        /// </summary>
        public virtual APDalDef.DeclareResumeDal DeclareResumeDal {
            get {
                if ((_declareResumeDal == null)) {
                    _declareResumeDal = new APDalDef.DeclareResumeDal(this);
                }
                return _declareResumeDal;
            }
        }
        
        /// <summary>
        /// 申报-内容 Dal
        /// </summary>
        public virtual APDalDef.DeclareContentDal DeclareContentDal {
            get {
                if ((_declareContentDal == null)) {
                    _declareContentDal = new APDalDef.DeclareContentDal(this);
                }
                return _declareContentDal;
            }
        }
        
        /// <summary>
        /// 申报-活动 Dal
        /// </summary>
        public virtual APDalDef.DeclareActiveDal DeclareActiveDal {
            get {
                if ((_declareActiveDal == null)) {
                    _declareActiveDal = new APDalDef.DeclareActiveDal(this);
                }
                return _declareActiveDal;
            }
        }
        
        /// <summary>
        /// 申报-科研成果 Dal
        /// </summary>
        public virtual APDalDef.DeclareAchievementDal DeclareAchievementDal {
            get {
                if ((_declareAchievementDal == null)) {
                    _declareAchievementDal = new APDalDef.DeclareAchievementDal(this);
                }
                return _declareAchievementDal;
            }
        }
        
        /// <summary>
        /// 申报-制度建设 Dal
        /// </summary>
        public virtual APDalDef.DeclareOrgConstDal DeclareOrgConstDal {
            get {
                if ((_declareOrgConstDal == null)) {
                    _declareOrgConstDal = new APDalDef.DeclareOrgConstDal(this);
                }
                return _declareOrgConstDal;
            }
        }
        
        public override void Rollback() {
            base.Rollback();
        }
        
        public override void Close() {
            base.Close();
        }
        
        /// <summary>
        /// 初始化数据。
        /// </summary>
        public static void InitData() {
            APDBDef db = new APDBDef();
            db.BeginTrans();
            try {
                db.PicklistDal.InitData(db);
                db.PicklistItemDal.InitData(db);
                db.School_InfoDal.InitData(db);
                db.Staff_InfoDal.InitData(db);
                db.BzUserDal.InitData(db);
                db.BzUserClaimDal.InitData(db);
                db.BzUserProfileDal.InitData(db);
                db.BzRoleDal.InitData(db);
                db.BzUserRoleDal.InitData(db);
                db.DeclareDal.InitData(db);
                db.DeclareResumeDal.InitData(db);
                db.DeclareContentDal.InitData(db);
                db.DeclareActiveDal.InitData(db);
                db.DeclareAchievementDal.InitData(db);
                db.DeclareOrgConstDal.InitData(db);
                db.Commit();
            }
            catch (System.Exception ) {
                db.Rollback();
                throw;
            }
            finally {
                db.Close();
            }
        }
        
        [Serializable()]
        public partial class PicklistTableDef : APTableDef {
            
            private Int64APColumnDef _picklistId;
            
            private StringAPColumnDef _innerKey;
            
            private StringAPColumnDef _name;
            
            private BooleanAPColumnDef _adjustable;
            
            private BooleanAPColumnDef _strengthen;
            
            private StringAPColumnDef _description;
            
            public PicklistTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected PicklistTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// PicklistId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PicklistId {
                get {
                    if (Object.ReferenceEquals(_picklistId, null)) {
                        _picklistId = new Int64APColumnDef(this, "PicklistId", false);
                        _picklistId.Display = "PicklistId";
                    }
                    return _picklistId;
                }
            }
            
            /// <summary>
            /// InnerKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef InnerKey {
                get {
                    if (Object.ReferenceEquals(_innerKey, null)) {
                        _innerKey = new StringAPColumnDef(this, "InnerKey", false, 40);
                        _innerKey.Display = "InnerKey";
                    }
                    return _innerKey;
                }
            }
            
            /// <summary>
            /// Name ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Name {
                get {
                    if (Object.ReferenceEquals(_name, null)) {
                        _name = new StringAPColumnDef(this, "Name", false, 255);
                        _name.Display = "Name";
                    }
                    return _name;
                }
            }
            
            /// <summary>
            /// Adjustable ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef Adjustable {
                get {
                    if (Object.ReferenceEquals(_adjustable, null)) {
                        _adjustable = new BooleanAPColumnDef(this, "Adjustable", false);
                        _adjustable.Display = "Adjustable";
                    }
                    return _adjustable;
                }
            }
            
            /// <summary>
            /// Strengthen ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef Strengthen {
                get {
                    if (Object.ReferenceEquals(_strengthen, null)) {
                        _strengthen = new BooleanAPColumnDef(this, "Strengthen", false);
                        _strengthen.Display = "Strengthen";
                    }
                    return _strengthen;
                }
            }
            
            /// <summary>
            /// Description ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Description {
                get {
                    if (Object.ReferenceEquals(_description, null)) {
                        _description = new StringAPColumnDef(this, "Description", false, 1000);
                        _description.Display = "Description";
                    }
                    return _description;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual PicklistTableDef As(string name) {
                return new PicklistTableDef("Picklist", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Picklist data, bool throwIfValidColumnName) {
                data.PicklistId = PicklistId.GetValue<long>(reader, throwIfValidColumnName);
                data.InnerKey = InnerKey.GetValue<string>(reader, throwIfValidColumnName);
                data.Name = Name.GetValue<string>(reader, throwIfValidColumnName);
                data.Adjustable = Adjustable.GetValue<bool>(reader, throwIfValidColumnName);
                data.Strengthen = Strengthen.GetValue<bool>(reader, throwIfValidColumnName);
                data.Description = Description.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Picklist Map(IDataReader reader) {
                Picklist data = new Picklist();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Picklist TolerantMap(IDataReader reader) {
                Picklist data = new Picklist();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Picklist> MapList(IDataReader reader) {
                List<Picklist> list = new List<Picklist>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Picklist> TolerantMapList(IDataReader reader) {
                List<Picklist> list = new List<Picklist>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class PicklistItemTableDef : APTableDef {
            
            private Int64APColumnDef _picklistItemId;
            
            private Int64APColumnDef _picklistId;
            
            private StringAPColumnDef _name;
            
            private Int64APColumnDef _strengthenValue;
            
            private StringAPColumnDef _code;
            
            private BooleanAPColumnDef _isDefault;
            
            public PicklistItemTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected PicklistItemTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// PicklistItemId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PicklistItemId {
                get {
                    if (Object.ReferenceEquals(_picklistItemId, null)) {
                        _picklistItemId = new Int64APColumnDef(this, "PicklistItemId", false);
                        _picklistItemId.Display = "PicklistItemId";
                    }
                    return _picklistItemId;
                }
            }
            
            /// <summary>
            /// PicklistId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PicklistId {
                get {
                    if (Object.ReferenceEquals(_picklistId, null)) {
                        _picklistId = new Int64APColumnDef(this, "PicklistId", false);
                        _picklistId.Display = "PicklistId";
                    }
                    return _picklistId;
                }
            }
            
            /// <summary>
            /// Name ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Name {
                get {
                    if (Object.ReferenceEquals(_name, null)) {
                        _name = new StringAPColumnDef(this, "Name", false, 255);
                        _name.Display = "Name";
                    }
                    return _name;
                }
            }
            
            /// <summary>
            /// StrengthenValue ColumnDef
            /// </summary>
            public virtual Int64APColumnDef StrengthenValue {
                get {
                    if (Object.ReferenceEquals(_strengthenValue, null)) {
                        _strengthenValue = new Int64APColumnDef(this, "StrengthenValue", false);
                        _strengthenValue.Display = "StrengthenValue";
                    }
                    return _strengthenValue;
                }
            }
            
            /// <summary>
            /// Code ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Code {
                get {
                    if (Object.ReferenceEquals(_code, null)) {
                        _code = new StringAPColumnDef(this, "Code", false, 100);
                        _code.Display = "Code";
                    }
                    return _code;
                }
            }
            
            /// <summary>
            /// IsDefault ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsDefault {
                get {
                    if (Object.ReferenceEquals(_isDefault, null)) {
                        _isDefault = new BooleanAPColumnDef(this, "IsDefault", false);
                        _isDefault.Display = "IsDefault";
                    }
                    return _isDefault;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual PicklistItemTableDef As(string name) {
                return new PicklistItemTableDef("PicklistItem", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, PicklistItem data, bool throwIfValidColumnName) {
                data.PicklistItemId = PicklistItemId.GetValue<long>(reader, throwIfValidColumnName);
                data.PicklistId = PicklistId.GetValue<long>(reader, throwIfValidColumnName);
                data.Name = Name.GetValue<string>(reader, throwIfValidColumnName);
                data.StrengthenValue = StrengthenValue.GetValue<long>(reader, throwIfValidColumnName);
                data.Code = Code.GetValue<string>(reader, throwIfValidColumnName);
                data.IsDefault = IsDefault.GetValue<bool>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual PicklistItem Map(IDataReader reader) {
                PicklistItem data = new PicklistItem();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual PicklistItem TolerantMap(IDataReader reader) {
                PicklistItem data = new PicklistItem();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<PicklistItem> MapList(IDataReader reader) {
                List<PicklistItem> list = new List<PicklistItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<PicklistItem> TolerantMapList(IDataReader reader) {
                List<PicklistItem> list = new List<PicklistItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class School_InfoTableDef : APTableDef {
            
            private StringAPColumnDef _id;
            
            private StringAPColumnDef _xxmc;
            
            private StringAPColumnDef _xxdm;
            
            public School_InfoTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected School_InfoTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// id ColumnDef
            /// </summary>
            public virtual StringAPColumnDef id {
                get {
                    if (Object.ReferenceEquals(_id, null)) {
                        _id = new StringAPColumnDef(this, "id", false, 36);
                        _id.Display = "学校ID";
                    }
                    return _id;
                }
            }
            
            /// <summary>
            /// xxmc ColumnDef
            /// </summary>
            public virtual StringAPColumnDef xxmc {
                get {
                    if (Object.ReferenceEquals(_xxmc, null)) {
                        _xxmc = new StringAPColumnDef(this, "xxmc", false, 60);
                        _xxmc.Display = "学校名称";
                    }
                    return _xxmc;
                }
            }
            
            /// <summary>
            /// xxdm ColumnDef
            /// </summary>
            public virtual StringAPColumnDef xxdm {
                get {
                    if (Object.ReferenceEquals(_xxdm, null)) {
                        _xxdm = new StringAPColumnDef(this, "xxdm", false, 10);
                        _xxdm.Display = "学校代码";
                    }
                    return _xxdm;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual School_InfoTableDef As(string name) {
                return new School_InfoTableDef("School_Info", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, School_Info data, bool throwIfValidColumnName) {
                data.id = id.GetValue<string>(reader, throwIfValidColumnName);
                data.xxmc = xxmc.GetValue<string>(reader, throwIfValidColumnName);
                data.xxdm = xxdm.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual School_Info Map(IDataReader reader) {
                School_Info data = new School_Info();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual School_Info TolerantMap(IDataReader reader) {
                School_Info data = new School_Info();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<School_Info> MapList(IDataReader reader) {
                List<School_Info> list = new List<School_Info>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<School_Info> TolerantMapList(IDataReader reader) {
                List<School_Info> list = new List<School_Info>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class Staff_InfoTableDef : APTableDef {
            
            private StringAPColumnDef _id;
            
            private StringAPColumnDef _yhm;
            
            private StringAPColumnDef _xxdm;
            
            private StringAPColumnDef _xm;
            
            private StringAPColumnDef _sfzjh;
            
            private StringAPColumnDef _sxh;
            
            private StringAPColumnDef _csrq;
            
            private StringAPColumnDef _xb;
            
            private StringAPColumnDef _xl;
            
            private StringAPColumnDef _xw;
            
            private StringAPColumnDef _byxx;
            
            private StringAPColumnDef _zy;
            
            private StringAPColumnDef _zw;
            
            private StringAPColumnDef _zc;
            
            private StringAPColumnDef _rjxk;
            
            private StringAPColumnDef _dw;
            
            public Staff_InfoTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected Staff_InfoTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// id ColumnDef
            /// </summary>
            public virtual StringAPColumnDef id {
                get {
                    if (Object.ReferenceEquals(_id, null)) {
                        _id = new StringAPColumnDef(this, "id", false, 36);
                        _id.Display = "教职工ID";
                    }
                    return _id;
                }
            }
            
            /// <summary>
            /// yhm ColumnDef
            /// </summary>
            public virtual StringAPColumnDef yhm {
                get {
                    if (Object.ReferenceEquals(_yhm, null)) {
                        _yhm = new StringAPColumnDef(this, "yhm", true, 36);
                        _yhm.Display = "用户登录名";
                    }
                    return _yhm;
                }
            }
            
            /// <summary>
            /// xxdm ColumnDef
            /// </summary>
            public virtual StringAPColumnDef xxdm {
                get {
                    if (Object.ReferenceEquals(_xxdm, null)) {
                        _xxdm = new StringAPColumnDef(this, "xxdm", true, 10);
                        _xxdm.Display = "学校代码";
                    }
                    return _xxdm;
                }
            }
            
            /// <summary>
            /// xm ColumnDef
            /// </summary>
            public virtual StringAPColumnDef xm {
                get {
                    if (Object.ReferenceEquals(_xm, null)) {
                        _xm = new StringAPColumnDef(this, "xm", true, 50);
                        _xm.Display = "真实姓名";
                    }
                    return _xm;
                }
            }
            
            /// <summary>
            /// sfzjh ColumnDef
            /// </summary>
            public virtual StringAPColumnDef sfzjh {
                get {
                    if (Object.ReferenceEquals(_sfzjh, null)) {
                        _sfzjh = new StringAPColumnDef(this, "sfzjh", true, 50);
                        _sfzjh.Display = "身份证件号";
                    }
                    return _sfzjh;
                }
            }
            
            /// <summary>
            /// sxh ColumnDef
            /// </summary>
            public virtual StringAPColumnDef sxh {
                get {
                    if (Object.ReferenceEquals(_sxh, null)) {
                        _sxh = new StringAPColumnDef(this, "sxh", true, 20);
                        _sxh.Display = "师训号";
                    }
                    return _sxh;
                }
            }
            
            /// <summary>
            /// csrq ColumnDef
            /// </summary>
            public virtual StringAPColumnDef csrq {
                get {
                    if (Object.ReferenceEquals(_csrq, null)) {
                        _csrq = new StringAPColumnDef(this, "csrq", true, 8);
                        _csrq.Display = "出生日期";
                    }
                    return _csrq;
                }
            }
            
            /// <summary>
            /// xb ColumnDef
            /// </summary>
            public virtual StringAPColumnDef xb {
                get {
                    if (Object.ReferenceEquals(_xb, null)) {
                        _xb = new StringAPColumnDef(this, "xb", true, 1);
                        _xb.Display = "性别ID";
                    }
                    return _xb;
                }
            }
            
            /// <summary>
            /// xl ColumnDef
            /// </summary>
            public virtual StringAPColumnDef xl {
                get {
                    if (Object.ReferenceEquals(_xl, null)) {
                        _xl = new StringAPColumnDef(this, "xl", true, 2);
                        _xl.Display = "学历ID";
                    }
                    return _xl;
                }
            }
            
            /// <summary>
            /// xw ColumnDef
            /// </summary>
            public virtual StringAPColumnDef xw {
                get {
                    if (Object.ReferenceEquals(_xw, null)) {
                        _xw = new StringAPColumnDef(this, "xw", true, 3);
                        _xw.Display = "学位ID";
                    }
                    return _xw;
                }
            }
            
            /// <summary>
            /// byxx ColumnDef
            /// </summary>
            public virtual StringAPColumnDef byxx {
                get {
                    if (Object.ReferenceEquals(_byxx, null)) {
                        _byxx = new StringAPColumnDef(this, "byxx", true, 100);
                        _byxx.Display = "毕业学校";
                    }
                    return _byxx;
                }
            }
            
            /// <summary>
            /// zy ColumnDef
            /// </summary>
            public virtual StringAPColumnDef zy {
                get {
                    if (Object.ReferenceEquals(_zy, null)) {
                        _zy = new StringAPColumnDef(this, "zy", true, 50);
                        _zy.Display = "专业";
                    }
                    return _zy;
                }
            }
            
            /// <summary>
            /// zw ColumnDef
            /// </summary>
            public virtual StringAPColumnDef zw {
                get {
                    if (Object.ReferenceEquals(_zw, null)) {
                        _zw = new StringAPColumnDef(this, "zw", true, 3);
                        _zw.Display = "职务ID";
                    }
                    return _zw;
                }
            }
            
            /// <summary>
            /// zc ColumnDef
            /// </summary>
            public virtual StringAPColumnDef zc {
                get {
                    if (Object.ReferenceEquals(_zc, null)) {
                        _zc = new StringAPColumnDef(this, "zc", true, 1);
                        _zc.Display = "职称ID";
                    }
                    return _zc;
                }
            }
            
            /// <summary>
            /// rjxk ColumnDef
            /// </summary>
            public virtual StringAPColumnDef rjxk {
                get {
                    if (Object.ReferenceEquals(_rjxk, null)) {
                        _rjxk = new StringAPColumnDef(this, "rjxk", true, 2);
                        _rjxk.Display = "任教学科ID";
                    }
                    return _rjxk;
                }
            }
            
            /// <summary>
            /// dw ColumnDef
            /// </summary>
            public virtual StringAPColumnDef dw {
                get {
                    if (Object.ReferenceEquals(_dw, null)) {
                        _dw = new StringAPColumnDef(this, "dw", true, 800);
                        _dw.Display = "单位";
                    }
                    return _dw;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual Staff_InfoTableDef As(string name) {
                return new Staff_InfoTableDef("Staff_Info", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Staff_Info data, bool throwIfValidColumnName) {
                data.id = id.GetValue<string>(reader, throwIfValidColumnName);
                data.yhm = yhm.GetValue<string>(reader, throwIfValidColumnName);
                data.xxdm = xxdm.GetValue<string>(reader, throwIfValidColumnName);
                data.xm = xm.GetValue<string>(reader, throwIfValidColumnName);
                data.sfzjh = sfzjh.GetValue<string>(reader, throwIfValidColumnName);
                data.sxh = sxh.GetValue<string>(reader, throwIfValidColumnName);
                data.csrq = csrq.GetValue<string>(reader, throwIfValidColumnName);
                data.xb = xb.GetValue<string>(reader, throwIfValidColumnName);
                data.xl = xl.GetValue<string>(reader, throwIfValidColumnName);
                data.xw = xw.GetValue<string>(reader, throwIfValidColumnName);
                data.byxx = byxx.GetValue<string>(reader, throwIfValidColumnName);
                data.zy = zy.GetValue<string>(reader, throwIfValidColumnName);
                data.zw = zw.GetValue<string>(reader, throwIfValidColumnName);
                data.zc = zc.GetValue<string>(reader, throwIfValidColumnName);
                data.rjxk = rjxk.GetValue<string>(reader, throwIfValidColumnName);
                data.dw = dw.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Staff_Info Map(IDataReader reader) {
                Staff_Info data = new Staff_Info();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Staff_Info TolerantMap(IDataReader reader) {
                Staff_Info data = new Staff_Info();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Staff_Info> MapList(IDataReader reader) {
                List<Staff_Info> list = new List<Staff_Info>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Staff_Info> TolerantMapList(IDataReader reader) {
                List<Staff_Info> list = new List<Staff_Info>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class BzUserTableDef : APTableDef {
            
            private Int64APColumnDef _id;
            
            private StringAPColumnDef _userName;
            
            private StringAPColumnDef _passwordHash;
            
            private StringAPColumnDef _securityStamp;
            
            private StringAPColumnDef _email;
            
            private BooleanAPColumnDef _emailConfirmed;
            
            private StringAPColumnDef _phoneNumber;
            
            private BooleanAPColumnDef _phoneNumberConfirmed;
            
            private BooleanAPColumnDef _twoFactorEnabled;
            
            private DateTimeAPColumnDef _lockoutEndDtc;
            
            private BooleanAPColumnDef _lockoutEnabled;
            
            private Int32APColumnDef _accessFailedCount;
            
            private BooleanAPColumnDef _actived;
            
            public BzUserTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected BzUserTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Id {
                get {
                    if (Object.ReferenceEquals(_id, null)) {
                        _id = new Int64APColumnDef(this, "UserId", false);
                        _id.Display = "用户ID";
                    }
                    return _id;
                }
            }
            
            /// <summary>
            /// UserName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef UserName {
                get {
                    if (Object.ReferenceEquals(_userName, null)) {
                        _userName = new StringAPColumnDef(this, "UserName", false, 255);
                        _userName.Display = "用户名";
                        _userName.Required = true;
                    }
                    return _userName;
                }
            }
            
            /// <summary>
            /// PasswordHash ColumnDef
            /// </summary>
            public virtual StringAPColumnDef PasswordHash {
                get {
                    if (Object.ReferenceEquals(_passwordHash, null)) {
                        _passwordHash = new StringAPColumnDef(this, "PasswordHash", false, 255);
                        _passwordHash.Display = "密码哈希";
                    }
                    return _passwordHash;
                }
            }
            
            /// <summary>
            /// SecurityStamp ColumnDef
            /// </summary>
            public virtual StringAPColumnDef SecurityStamp {
                get {
                    if (Object.ReferenceEquals(_securityStamp, null)) {
                        _securityStamp = new StringAPColumnDef(this, "SecurityStamp", false, 255);
                        _securityStamp.Display = "Salt";
                    }
                    return _securityStamp;
                }
            }
            
            /// <summary>
            /// Email ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Email {
                get {
                    if (Object.ReferenceEquals(_email, null)) {
                        _email = new StringAPColumnDef(this, "Email", false, 255);
                        _email.Display = "电子邮箱";
                    }
                    return _email;
                }
            }
            
            /// <summary>
            /// EmailConfirmed ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef EmailConfirmed {
                get {
                    if (Object.ReferenceEquals(_emailConfirmed, null)) {
                        _emailConfirmed = new BooleanAPColumnDef(this, "EmailConfirmed", false);
                        _emailConfirmed.Display = "电子邮箱确认";
                    }
                    return _emailConfirmed;
                }
            }
            
            /// <summary>
            /// PhoneNumber ColumnDef
            /// </summary>
            public virtual StringAPColumnDef PhoneNumber {
                get {
                    if (Object.ReferenceEquals(_phoneNumber, null)) {
                        _phoneNumber = new StringAPColumnDef(this, "PhoneNumber", false, 255);
                        _phoneNumber.Display = "电话";
                    }
                    return _phoneNumber;
                }
            }
            
            /// <summary>
            /// PhoneNumberConfirmed ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef PhoneNumberConfirmed {
                get {
                    if (Object.ReferenceEquals(_phoneNumberConfirmed, null)) {
                        _phoneNumberConfirmed = new BooleanAPColumnDef(this, "PhoneNumberConfirmed", false);
                        _phoneNumberConfirmed.Display = "电话确认";
                    }
                    return _phoneNumberConfirmed;
                }
            }
            
            /// <summary>
            /// TwoFactorEnabled ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef TwoFactorEnabled {
                get {
                    if (Object.ReferenceEquals(_twoFactorEnabled, null)) {
                        _twoFactorEnabled = new BooleanAPColumnDef(this, "TwoFactorEnabled", false);
                        _twoFactorEnabled.Display = "双模式";
                    }
                    return _twoFactorEnabled;
                }
            }
            
            /// <summary>
            /// LockoutEndDtc ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef LockoutEndDtc {
                get {
                    if (Object.ReferenceEquals(_lockoutEndDtc, null)) {
                        _lockoutEndDtc = new DateTimeAPColumnDef(this, "LockoutEndDtc", true);
                        _lockoutEndDtc.Display = "锁定时间";
                    }
                    return _lockoutEndDtc;
                }
            }
            
            /// <summary>
            /// LockoutEnabled ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef LockoutEnabled {
                get {
                    if (Object.ReferenceEquals(_lockoutEnabled, null)) {
                        _lockoutEnabled = new BooleanAPColumnDef(this, "LockoutEnabled", false);
                        _lockoutEnabled.Display = "锁定";
                    }
                    return _lockoutEnabled;
                }
            }
            
            /// <summary>
            /// AccessFailedCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef AccessFailedCount {
                get {
                    if (Object.ReferenceEquals(_accessFailedCount, null)) {
                        _accessFailedCount = new Int32APColumnDef(this, "AccessFailedCount", false);
                        _accessFailedCount.Display = "错误次数";
                    }
                    return _accessFailedCount;
                }
            }
            
            /// <summary>
            /// Actived ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef Actived {
                get {
                    if (Object.ReferenceEquals(_actived, null)) {
                        _actived = new BooleanAPColumnDef(this, "Actived", false);
                        _actived.Display = "有效";
                    }
                    return _actived;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual BzUserTableDef As(string name) {
                return new BzUserTableDef("BzUser", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, BzUser data, bool throwIfValidColumnName) {
                data.Id = Id.GetValue<long>(reader, throwIfValidColumnName);
                data.UserName = UserName.GetValue<string>(reader, throwIfValidColumnName);
                data.PasswordHash = PasswordHash.GetValue<string>(reader, throwIfValidColumnName);
                data.SecurityStamp = SecurityStamp.GetValue<string>(reader, throwIfValidColumnName);
                data.Email = Email.GetValue<string>(reader, throwIfValidColumnName);
                data.EmailConfirmed = EmailConfirmed.GetValue<bool>(reader, throwIfValidColumnName);
                data.PhoneNumber = PhoneNumber.GetValue<string>(reader, throwIfValidColumnName);
                data.PhoneNumberConfirmed = PhoneNumberConfirmed.GetValue<bool>(reader, throwIfValidColumnName);
                data.TwoFactorEnabled = TwoFactorEnabled.GetValue<bool>(reader, throwIfValidColumnName);
                data.LockoutEndDtc = LockoutEndDtc.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.LockoutEnabled = LockoutEnabled.GetValue<bool>(reader, throwIfValidColumnName);
                data.AccessFailedCount = AccessFailedCount.GetValue<int>(reader, throwIfValidColumnName);
                data.Actived = Actived.GetValue<bool>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUser Map(IDataReader reader) {
                BzUser data = new BzUser();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUser TolerantMap(IDataReader reader) {
                BzUser data = new BzUser();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUser> MapList(IDataReader reader) {
                List<BzUser> list = new List<BzUser>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUser> TolerantMapList(IDataReader reader) {
                List<BzUser> list = new List<BzUser>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class BzUserClaimTableDef : APTableDef {
            
            private Int32APColumnDef _id;
            
            private Int64APColumnDef _userId;
            
            private StringAPColumnDef _claimType;
            
            private StringAPColumnDef _claimValue;
            
            public BzUserClaimTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected BzUserClaimTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// Id ColumnDef
            /// </summary>
            public virtual Int32APColumnDef Id {
                get {
                    if (Object.ReferenceEquals(_id, null)) {
                        _id = new Int32APColumnDef(this, "Id", false);
                        _id.Display = "ID";
                    }
                    return _id;
                }
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new Int64APColumnDef(this, "UserId", false);
                        _userId.Display = "UserId";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// ClaimType ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ClaimType {
                get {
                    if (Object.ReferenceEquals(_claimType, null)) {
                        _claimType = new StringAPColumnDef(this, "ClaimType", false, 100);
                        _claimType.Display = "ClaimType";
                    }
                    return _claimType;
                }
            }
            
            /// <summary>
            /// ClaimValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ClaimValue {
                get {
                    if (Object.ReferenceEquals(_claimValue, null)) {
                        _claimValue = new StringAPColumnDef(this, "ClaimValue", false, 100);
                        _claimValue.Display = "ClaimValue";
                    }
                    return _claimValue;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual BzUserClaimTableDef As(string name) {
                return new BzUserClaimTableDef("BzUserClaim", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, BzUserClaim data, bool throwIfValidColumnName) {
                data.Id = Id.GetValue<int>(reader, throwIfValidColumnName);
                data.UserId = UserId.GetValue<long>(reader, throwIfValidColumnName);
                data.ClaimType = ClaimType.GetValue<string>(reader, throwIfValidColumnName);
                data.ClaimValue = ClaimValue.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUserClaim Map(IDataReader reader) {
                BzUserClaim data = new BzUserClaim();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUserClaim TolerantMap(IDataReader reader) {
                BzUserClaim data = new BzUserClaim();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUserClaim> MapList(IDataReader reader) {
                List<BzUserClaim> list = new List<BzUserClaim>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUserClaim> TolerantMapList(IDataReader reader) {
                List<BzUserClaim> list = new List<BzUserClaim>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class BzUserProfileTableDef : APTableDef {
            
            private Int64APColumnDef _userId;
            
            private StringAPColumnDef _uUID;
            
            private Int64APColumnDef _companyId;
            
            private StringAPColumnDef _userName;
            
            private StringAPColumnDef _userType;
            
            private StringAPColumnDef _realName;
            
            private StringAPColumnDef _iDCard;
            
            private StringAPColumnDef _trainNo;
            
            private Int64APColumnDef _genderPKID;
            
            private DateTimeAPColumnDef _birthday;
            
            private Int64APColumnDef _politicalStatusPKID;
            
            private Int64APColumnDef _nationalityPKID;
            
            private Int64APColumnDef _eduSubjectPKID;
            
            private Int64APColumnDef _eduStagePKID;
            
            private DateTimeAPColumnDef _jobDate;
            
            private Int64APColumnDef _skillTitlePKID;
            
            private DateTimeAPColumnDef _skillDate;
            
            private StringAPColumnDef _companyName;
            
            private StringAPColumnDef _companyNameOuter;
            
            private StringAPColumnDef _companyaddress;
            
            private Int64APColumnDef _rankTitlePKID;
            
            private Int64APColumnDef _eduBgPKID;
            
            private Int64APColumnDef _eduDegreePKID;
            
            private StringAPColumnDef _graduateSchool;
            
            private DateTimeAPColumnDef _graduateDate;
            
            private StringAPColumnDef _phonemobile;
            
            private StringAPColumnDef _email;
            
            public BzUserProfileTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected BzUserProfileTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new Int64APColumnDef(this, "UserId", false);
                        _userId.Display = "用户ID";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// UUID ColumnDef
            /// </summary>
            public virtual StringAPColumnDef UUID {
                get {
                    if (Object.ReferenceEquals(_uUID, null)) {
                        _uUID = new StringAPColumnDef(this, "UUID", false, 100);
                        _uUID.Display = "UUID";
                    }
                    return _uUID;
                }
            }
            
            /// <summary>
            /// CompanyId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CompanyId {
                get {
                    if (Object.ReferenceEquals(_companyId, null)) {
                        _companyId = new Int64APColumnDef(this, "CompanyId", false);
                        _companyId.Display = "单位ID";
                    }
                    return _companyId;
                }
            }
            
            /// <summary>
            /// UserName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef UserName {
                get {
                    if (Object.ReferenceEquals(_userName, null)) {
                        _userName = new StringAPColumnDef(this, "UserName", false, 255);
                        _userName.Display = "用户名";
                        _userName.Required = true;
                    }
                    return _userName;
                }
            }
            
            /// <summary>
            /// UserType ColumnDef
            /// </summary>
            public virtual StringAPColumnDef UserType {
                get {
                    if (Object.ReferenceEquals(_userType, null)) {
                        _userType = new StringAPColumnDef(this, "UserType", false, 255);
                        _userType.Display = "用户类型";
                    }
                    return _userType;
                }
            }
            
            /// <summary>
            /// RealName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef RealName {
                get {
                    if (Object.ReferenceEquals(_realName, null)) {
                        _realName = new StringAPColumnDef(this, "RealName", false, 40);
                        _realName.Display = "真实姓名";
                        _realName.Required = true;
                    }
                    return _realName;
                }
            }
            
            /// <summary>
            /// IDCard ColumnDef
            /// </summary>
            public virtual StringAPColumnDef IDCard {
                get {
                    if (Object.ReferenceEquals(_iDCard, null)) {
                        _iDCard = new StringAPColumnDef(this, "IDCard", false, 18);
                        _iDCard.Display = "身份证件号";
                        _iDCard.Required = true;
                    }
                    return _iDCard;
                }
            }
            
            /// <summary>
            /// TrainNo ColumnDef
            /// </summary>
            public virtual StringAPColumnDef TrainNo {
                get {
                    if (Object.ReferenceEquals(_trainNo, null)) {
                        _trainNo = new StringAPColumnDef(this, "TrainNo", false, 20);
                        _trainNo.Display = "师训编号";
                    }
                    return _trainNo;
                }
            }
            
            /// <summary>
            /// GenderPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef GenderPKID {
                get {
                    if (Object.ReferenceEquals(_genderPKID, null)) {
                        _genderPKID = new Int64APColumnDef(this, "GenderPKID", false);
                        _genderPKID.Display = "性别";
                    }
                    return _genderPKID;
                }
            }
            
            /// <summary>
            /// Birthday ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef Birthday {
                get {
                    if (Object.ReferenceEquals(_birthday, null)) {
                        _birthday = new DateTimeAPColumnDef(this, "Birthday", false);
                        _birthday.Display = "出生年月";
                        _birthday.Required = true;
                    }
                    return _birthday;
                }
            }
            
            /// <summary>
            /// PoliticalStatusPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PoliticalStatusPKID {
                get {
                    if (Object.ReferenceEquals(_politicalStatusPKID, null)) {
                        _politicalStatusPKID = new Int64APColumnDef(this, "PoliticalStatusPKID", false);
                        _politicalStatusPKID.Display = "政治面貌";
                    }
                    return _politicalStatusPKID;
                }
            }
            
            /// <summary>
            /// NationalityPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef NationalityPKID {
                get {
                    if (Object.ReferenceEquals(_nationalityPKID, null)) {
                        _nationalityPKID = new Int64APColumnDef(this, "NationalityPKID", false);
                        _nationalityPKID.Display = "民族";
                    }
                    return _nationalityPKID;
                }
            }
            
            /// <summary>
            /// EduSubjectPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef EduSubjectPKID {
                get {
                    if (Object.ReferenceEquals(_eduSubjectPKID, null)) {
                        _eduSubjectPKID = new Int64APColumnDef(this, "EduSubjectPKID", false);
                        _eduSubjectPKID.Display = "任教学科";
                    }
                    return _eduSubjectPKID;
                }
            }
            
            /// <summary>
            /// EduStagePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef EduStagePKID {
                get {
                    if (Object.ReferenceEquals(_eduStagePKID, null)) {
                        _eduStagePKID = new Int64APColumnDef(this, "EduStagePKID", false);
                        _eduStagePKID.Display = "任教学段";
                    }
                    return _eduStagePKID;
                }
            }
            
            /// <summary>
            /// JobDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef JobDate {
                get {
                    if (Object.ReferenceEquals(_jobDate, null)) {
                        _jobDate = new DateTimeAPColumnDef(this, "JobDate", true);
                        _jobDate.Display = "参加教育工作年月";
                    }
                    return _jobDate;
                }
            }
            
            /// <summary>
            /// SkillTitlePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef SkillTitlePKID {
                get {
                    if (Object.ReferenceEquals(_skillTitlePKID, null)) {
                        _skillTitlePKID = new Int64APColumnDef(this, "SkillTitlePKID", false);
                        _skillTitlePKID.Display = "现任专技职称";
                    }
                    return _skillTitlePKID;
                }
            }
            
            /// <summary>
            /// SkillDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef SkillDate {
                get {
                    if (Object.ReferenceEquals(_skillDate, null)) {
                        _skillDate = new DateTimeAPColumnDef(this, "SkillDate", true);
                        _skillDate.Display = "职称通过年月";
                    }
                    return _skillDate;
                }
            }
            
            /// <summary>
            /// CompanyName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CompanyName {
                get {
                    if (Object.ReferenceEquals(_companyName, null)) {
                        _companyName = new StringAPColumnDef(this, "CompanyName", false, 100);
                        _companyName.Display = "单位";
                    }
                    return _companyName;
                }
            }
            
            /// <summary>
            /// CompanyNameOuter ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CompanyNameOuter {
                get {
                    if (Object.ReferenceEquals(_companyNameOuter, null)) {
                        _companyNameOuter = new StringAPColumnDef(this, "CompanyNameOuter", false, 800);
                        _companyNameOuter.Display = "单位(数据同步)";
                    }
                    return _companyNameOuter;
                }
            }
            
            /// <summary>
            /// Companyaddress ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Companyaddress {
                get {
                    if (Object.ReferenceEquals(_companyaddress, null)) {
                        _companyaddress = new StringAPColumnDef(this, "Companyaddress", false, 255);
                        _companyaddress.Display = "单位地址";
                    }
                    return _companyaddress;
                }
            }
            
            /// <summary>
            /// RankTitlePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef RankTitlePKID {
                get {
                    if (Object.ReferenceEquals(_rankTitlePKID, null)) {
                        _rankTitlePKID = new Int64APColumnDef(this, "RankTitlePKID", false);
                        _rankTitlePKID.Display = "行政职务";
                    }
                    return _rankTitlePKID;
                }
            }
            
            /// <summary>
            /// EduBgPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef EduBgPKID {
                get {
                    if (Object.ReferenceEquals(_eduBgPKID, null)) {
                        _eduBgPKID = new Int64APColumnDef(this, "EduBgPKID", false);
                        _eduBgPKID.Display = "学历";
                    }
                    return _eduBgPKID;
                }
            }
            
            /// <summary>
            /// EduDegreePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef EduDegreePKID {
                get {
                    if (Object.ReferenceEquals(_eduDegreePKID, null)) {
                        _eduDegreePKID = new Int64APColumnDef(this, "EduDegreePKID", false);
                        _eduDegreePKID.Display = "学位";
                    }
                    return _eduDegreePKID;
                }
            }
            
            /// <summary>
            /// GraduateSchool ColumnDef
            /// </summary>
            public virtual StringAPColumnDef GraduateSchool {
                get {
                    if (Object.ReferenceEquals(_graduateSchool, null)) {
                        _graduateSchool = new StringAPColumnDef(this, "GraduateSchool", false, 100);
                        _graduateSchool.Display = "毕业院校与专业";
                    }
                    return _graduateSchool;
                }
            }
            
            /// <summary>
            /// GraduateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef GraduateDate {
                get {
                    if (Object.ReferenceEquals(_graduateDate, null)) {
                        _graduateDate = new DateTimeAPColumnDef(this, "GraduateDate", true);
                        _graduateDate.Display = "毕业年月";
                    }
                    return _graduateDate;
                }
            }
            
            /// <summary>
            /// Phonemobile ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Phonemobile {
                get {
                    if (Object.ReferenceEquals(_phonemobile, null)) {
                        _phonemobile = new StringAPColumnDef(this, "Phonemobile", false, 20);
                        _phonemobile.Display = "手机号码";
                    }
                    return _phonemobile;
                }
            }
            
            /// <summary>
            /// Email ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Email {
                get {
                    if (Object.ReferenceEquals(_email, null)) {
                        _email = new StringAPColumnDef(this, "Email", false, 255);
                        _email.Display = "电子邮箱";
                    }
                    return _email;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual BzUserProfileTableDef As(string name) {
                return new BzUserProfileTableDef("BzUserProfile", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, BzUserProfile data, bool throwIfValidColumnName) {
                data.UserId = UserId.GetValue<long>(reader, throwIfValidColumnName);
                data.UUID = UUID.GetValue<string>(reader, throwIfValidColumnName);
                data.CompanyId = CompanyId.GetValue<long>(reader, throwIfValidColumnName);
                data.UserName = UserName.GetValue<string>(reader, throwIfValidColumnName);
                data.UserType = UserType.GetValue<string>(reader, throwIfValidColumnName);
                data.RealName = RealName.GetValue<string>(reader, throwIfValidColumnName);
                data.IDCard = IDCard.GetValue<string>(reader, throwIfValidColumnName);
                data.TrainNo = TrainNo.GetValue<string>(reader, throwIfValidColumnName);
                data.GenderPKID = GenderPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.Birthday = Birthday.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.PoliticalStatusPKID = PoliticalStatusPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.NationalityPKID = NationalityPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.EduSubjectPKID = EduSubjectPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.EduStagePKID = EduStagePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.JobDate = JobDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.SkillTitlePKID = SkillTitlePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.SkillDate = SkillDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.CompanyName = CompanyName.GetValue<string>(reader, throwIfValidColumnName);
                data.CompanyNameOuter = CompanyNameOuter.GetValue<string>(reader, throwIfValidColumnName);
                data.Companyaddress = Companyaddress.GetValue<string>(reader, throwIfValidColumnName);
                data.RankTitlePKID = RankTitlePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.EduBgPKID = EduBgPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.EduDegreePKID = EduDegreePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.GraduateSchool = GraduateSchool.GetValue<string>(reader, throwIfValidColumnName);
                data.GraduateDate = GraduateDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Phonemobile = Phonemobile.GetValue<string>(reader, throwIfValidColumnName);
                data.Email = Email.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUserProfile Map(IDataReader reader) {
                BzUserProfile data = new BzUserProfile();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUserProfile TolerantMap(IDataReader reader) {
                BzUserProfile data = new BzUserProfile();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUserProfile> MapList(IDataReader reader) {
                List<BzUserProfile> list = new List<BzUserProfile>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUserProfile> TolerantMapList(IDataReader reader) {
                List<BzUserProfile> list = new List<BzUserProfile>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class BzRoleTableDef : APTableDef {
            
            private Int64APColumnDef _id;
            
            private StringAPColumnDef _name;
            
            private StringAPColumnDef _normalizedName;
            
            public BzRoleTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected BzRoleTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// RoleId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Id {
                get {
                    if (Object.ReferenceEquals(_id, null)) {
                        _id = new Int64APColumnDef(this, "RoleId", false);
                        _id.Display = "角色ID";
                    }
                    return _id;
                }
            }
            
            /// <summary>
            /// Name ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Name {
                get {
                    if (Object.ReferenceEquals(_name, null)) {
                        _name = new StringAPColumnDef(this, "Name", false, 255);
                        _name.Display = "角色名";
                        _name.Required = true;
                    }
                    return _name;
                }
            }
            
            /// <summary>
            /// NormalizedName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef NormalizedName {
                get {
                    if (Object.ReferenceEquals(_normalizedName, null)) {
                        _normalizedName = new StringAPColumnDef(this, "NormalizedName", false, 255);
                        _normalizedName.Display = "常名";
                    }
                    return _normalizedName;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual BzRoleTableDef As(string name) {
                return new BzRoleTableDef("BzRole", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, BzRole data, bool throwIfValidColumnName) {
                data.Id = Id.GetValue<long>(reader, throwIfValidColumnName);
                data.Name = Name.GetValue<string>(reader, throwIfValidColumnName);
                data.NormalizedName = NormalizedName.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzRole Map(IDataReader reader) {
                BzRole data = new BzRole();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzRole TolerantMap(IDataReader reader) {
                BzRole data = new BzRole();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzRole> MapList(IDataReader reader) {
                List<BzRole> list = new List<BzRole>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzRole> TolerantMapList(IDataReader reader) {
                List<BzRole> list = new List<BzRole>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class BzUserRoleTableDef : APTableDef {
            
            private Int64APColumnDef _userRoleId;
            
            private Int64APColumnDef _userId;
            
            private Int64APColumnDef _roleId;
            
            private StringAPColumnDef _scopeType;
            
            private Int64APColumnDef _scopeId;
            
            public BzUserRoleTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected BzUserRoleTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// UserRoleId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserRoleId {
                get {
                    if (Object.ReferenceEquals(_userRoleId, null)) {
                        _userRoleId = new Int64APColumnDef(this, "UserRoleId", false);
                        _userRoleId.Display = "ID";
                    }
                    return _userRoleId;
                }
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new Int64APColumnDef(this, "UserId", false);
                        _userId.Display = "用户ID";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// RoleId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef RoleId {
                get {
                    if (Object.ReferenceEquals(_roleId, null)) {
                        _roleId = new Int64APColumnDef(this, "RoleId", false);
                        _roleId.Display = "角色ID";
                    }
                    return _roleId;
                }
            }
            
            /// <summary>
            /// ScopeType ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ScopeType {
                get {
                    if (Object.ReferenceEquals(_scopeType, null)) {
                        _scopeType = new StringAPColumnDef(this, "ScopeType", false, 30);
                        _scopeType.Display = "作用域类型";
                    }
                    return _scopeType;
                }
            }
            
            /// <summary>
            /// ScopeId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ScopeId {
                get {
                    if (Object.ReferenceEquals(_scopeId, null)) {
                        _scopeId = new Int64APColumnDef(this, "ScopeId", false);
                        _scopeId.Display = "作用域ID";
                    }
                    return _scopeId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual BzUserRoleTableDef As(string name) {
                return new BzUserRoleTableDef("BzUserRole", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, BzUserRole data, bool throwIfValidColumnName) {
                data.UserRoleId = UserRoleId.GetValue<long>(reader, throwIfValidColumnName);
                data.UserId = UserId.GetValue<long>(reader, throwIfValidColumnName);
                data.RoleId = RoleId.GetValue<long>(reader, throwIfValidColumnName);
                data.ScopeType = ScopeType.GetValue<string>(reader, throwIfValidColumnName);
                data.ScopeId = ScopeId.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUserRole Map(IDataReader reader) {
                BzUserRole data = new BzUserRole();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUserRole TolerantMap(IDataReader reader) {
                BzUserRole data = new BzUserRole();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUserRole> MapList(IDataReader reader) {
                List<BzUserRole> list = new List<BzUserRole>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUserRole> TolerantMapList(IDataReader reader) {
                List<BzUserRole> list = new List<BzUserRole>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclareTableDef : APTableDef {
            
            private Int64APColumnDef _teacherId;
            
            private Int64APColumnDef _declareTargetPKID;
            
            private Int64APColumnDef _declareSubjectPKID;
            
            private Int64APColumnDef _declareStagePKID;
            
            private BooleanAPColumnDef _allowFlowToSchool;
            
            private BooleanAPColumnDef _allowFitResearcher;
            
            public DeclareTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclareTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// DeclareTargetPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareTargetPKID {
                get {
                    if (Object.ReferenceEquals(_declareTargetPKID, null)) {
                        _declareTargetPKID = new Int64APColumnDef(this, "DeclareTargetPKID", false);
                        _declareTargetPKID.Display = "申报（担任）称号";
                    }
                    return _declareTargetPKID;
                }
            }
            
            /// <summary>
            /// DeclareSubjectPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareSubjectPKID {
                get {
                    if (Object.ReferenceEquals(_declareSubjectPKID, null)) {
                        _declareSubjectPKID = new Int64APColumnDef(this, "DeclareSubjectPKID", false);
                        _declareSubjectPKID.Display = "申报学科";
                    }
                    return _declareSubjectPKID;
                }
            }
            
            /// <summary>
            /// DeclareStagePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareStagePKID {
                get {
                    if (Object.ReferenceEquals(_declareStagePKID, null)) {
                        _declareStagePKID = new Int64APColumnDef(this, "DeclareStagePKID", false);
                        _declareStagePKID.Display = "申报学段";
                    }
                    return _declareStagePKID;
                }
            }
            
            /// <summary>
            /// AllowFlowToSchool ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef AllowFlowToSchool {
                get {
                    if (Object.ReferenceEquals(_allowFlowToSchool, null)) {
                        _allowFlowToSchool = new BooleanAPColumnDef(this, "AllowFlowToSchool", false);
                        _allowFlowToSchool.Display = "流入学校开展工作";
                    }
                    return _allowFlowToSchool;
                }
            }
            
            /// <summary>
            /// AllowFitResearcher ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef AllowFitResearcher {
                get {
                    if (Object.ReferenceEquals(_allowFitResearcher, null)) {
                        _allowFitResearcher = new BooleanAPColumnDef(this, "AllowFitResearcher", false);
                        _allowFitResearcher.Display = "配合教研员开展工作";
                    }
                    return _allowFitResearcher;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclareTableDef As(string name) {
                return new DeclareTableDef("Declare", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Declare data, bool throwIfValidColumnName) {
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareTargetPKID = DeclareTargetPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareSubjectPKID = DeclareSubjectPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareStagePKID = DeclareStagePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.AllowFlowToSchool = AllowFlowToSchool.GetValue<bool>(reader, throwIfValidColumnName);
                data.AllowFitResearcher = AllowFitResearcher.GetValue<bool>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Declare Map(IDataReader reader) {
                Declare data = new Declare();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Declare TolerantMap(IDataReader reader) {
                Declare data = new Declare();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Declare> MapList(IDataReader reader) {
                List<Declare> list = new List<Declare>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Declare> TolerantMapList(IDataReader reader) {
                List<Declare> list = new List<Declare>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclareResumeTableDef : APTableDef {
            
            private Int64APColumnDef _declareResumeId;
            
            private Int64APColumnDef _teacherId;
            
            private StringAPColumnDef _dateRegion;
            
            private StringAPColumnDef _company;
            
            private StringAPColumnDef _title;
            
            public DeclareResumeTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclareResumeTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// DeclareResumeId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareResumeId {
                get {
                    if (Object.ReferenceEquals(_declareResumeId, null)) {
                        _declareResumeId = new Int64APColumnDef(this, "DeclareResumeId", false);
                        _declareResumeId.Display = "简历ID";
                    }
                    return _declareResumeId;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// DateRegion ColumnDef
            /// </summary>
            public virtual StringAPColumnDef DateRegion {
                get {
                    if (Object.ReferenceEquals(_dateRegion, null)) {
                        _dateRegion = new StringAPColumnDef(this, "DateRegion", false, 100);
                        _dateRegion.Display = "时间区间";
                    }
                    return _dateRegion;
                }
            }
            
            /// <summary>
            /// Company ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Company {
                get {
                    if (Object.ReferenceEquals(_company, null)) {
                        _company = new StringAPColumnDef(this, "Company", false, 100);
                        _company.Display = "单位";
                    }
                    return _company;
                }
            }
            
            /// <summary>
            /// Title ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Title {
                get {
                    if (Object.ReferenceEquals(_title, null)) {
                        _title = new StringAPColumnDef(this, "Title", false, 100);
                        _title.Display = "职称、职务";
                    }
                    return _title;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclareResumeTableDef As(string name) {
                return new DeclareResumeTableDef("DeclareResume", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, DeclareResume data, bool throwIfValidColumnName) {
                data.DeclareResumeId = DeclareResumeId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.DateRegion = DateRegion.GetValue<string>(reader, throwIfValidColumnName);
                data.Company = Company.GetValue<string>(reader, throwIfValidColumnName);
                data.Title = Title.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareResume Map(IDataReader reader) {
                DeclareResume data = new DeclareResume();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareResume TolerantMap(IDataReader reader) {
                DeclareResume data = new DeclareResume();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareResume> MapList(IDataReader reader) {
                List<DeclareResume> list = new List<DeclareResume>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareResume> TolerantMapList(IDataReader reader) {
                List<DeclareResume> list = new List<DeclareResume>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclareContentTableDef : APTableDef {
            
            private Int64APColumnDef _declareContentId;
            
            private Int64APColumnDef _teacherId;
            
            private StringAPColumnDef _contentKey;
            
            private StringAPColumnDef _contentValue;
            
            private StringAPColumnDef _contentDataType;
            
            public DeclareContentTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclareContentTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// DeclareContentId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareContentId {
                get {
                    if (Object.ReferenceEquals(_declareContentId, null)) {
                        _declareContentId = new Int64APColumnDef(this, "DeclareContentId", false);
                        _declareContentId.Display = "内容ID";
                    }
                    return _declareContentId;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// ContentKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ContentKey {
                get {
                    if (Object.ReferenceEquals(_contentKey, null)) {
                        _contentKey = new StringAPColumnDef(this, "ContentKey", false, 200);
                        _contentKey.Display = "内容类别";
                    }
                    return _contentKey;
                }
            }
            
            /// <summary>
            /// ContentValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ContentValue {
                get {
                    if (Object.ReferenceEquals(_contentValue, null)) {
                        _contentValue = new StringAPColumnDef(this, "ContentValue", false, 30000);
                        _contentValue.Display = "内容";
                    }
                    return _contentValue;
                }
            }
            
            /// <summary>
            /// ContentDataType ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ContentDataType {
                get {
                    if (Object.ReferenceEquals(_contentDataType, null)) {
                        _contentDataType = new StringAPColumnDef(this, "ContentDataType", false, 100);
                        _contentDataType.Display = "内容数据类型";
                    }
                    return _contentDataType;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclareContentTableDef As(string name) {
                return new DeclareContentTableDef("DeclareContent", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, DeclareContent data, bool throwIfValidColumnName) {
                data.DeclareContentId = DeclareContentId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.ContentKey = ContentKey.GetValue<string>(reader, throwIfValidColumnName);
                data.ContentValue = ContentValue.GetValue<string>(reader, throwIfValidColumnName);
                data.ContentDataType = ContentDataType.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareContent Map(IDataReader reader) {
                DeclareContent data = new DeclareContent();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareContent TolerantMap(IDataReader reader) {
                DeclareContent data = new DeclareContent();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareContent> MapList(IDataReader reader) {
                List<DeclareContent> list = new List<DeclareContent>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareContent> TolerantMapList(IDataReader reader) {
                List<DeclareContent> list = new List<DeclareContent>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclareActiveTableDef : APTableDef {
            
            private Int64APColumnDef _declareActiveId;
            
            private Int64APColumnDef _teacherId;
            
            private StringAPColumnDef _activeKey;
            
            private DateTimeAPColumnDef _date;
            
            private StringAPColumnDef _location;
            
            private StringAPColumnDef _level;
            
            private StringAPColumnDef _contentValue;
            
            private StringAPColumnDef _attachmentUrl;
            
            private StringAPColumnDef _attachmentName;
            
            private StringAPColumnDef _dynamic1;
            
            private StringAPColumnDef _dynamic2;
            
            private StringAPColumnDef _dynamic3;
            
            private StringAPColumnDef _dynamic4;
            
            private StringAPColumnDef _dynamic5;
            
            private StringAPColumnDef _dynamic6;
            
            private StringAPColumnDef _dynamic7;
            
            private StringAPColumnDef _dynamic8;
            
            public DeclareActiveTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclareActiveTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// DeclareActiveId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareActiveId {
                get {
                    if (Object.ReferenceEquals(_declareActiveId, null)) {
                        _declareActiveId = new Int64APColumnDef(this, "DeclareActiveId", false);
                        _declareActiveId.Display = "ID";
                    }
                    return _declareActiveId;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// ActiveKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ActiveKey {
                get {
                    if (Object.ReferenceEquals(_activeKey, null)) {
                        _activeKey = new StringAPColumnDef(this, "ActiveKey", false, 200);
                        _activeKey.Display = "内容类别";
                    }
                    return _activeKey;
                }
            }
            
            /// <summary>
            /// Date ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef Date {
                get {
                    if (Object.ReferenceEquals(_date, null)) {
                        _date = new DateTimeAPColumnDef(this, "Date", false);
                        _date.Display = "时间";
                    }
                    return _date;
                }
            }
            
            /// <summary>
            /// Location ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Location {
                get {
                    if (Object.ReferenceEquals(_location, null)) {
                        _location = new StringAPColumnDef(this, "Location", false, 100);
                        _location.Display = "地点";
                    }
                    return _location;
                }
            }
            
            /// <summary>
            /// Level ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Level {
                get {
                    if (Object.ReferenceEquals(_level, null)) {
                        _level = new StringAPColumnDef(this, "Level", false, 100);
                        _level.Display = "等级";
                    }
                    return _level;
                }
            }
            
            /// <summary>
            /// ContentValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ContentValue {
                get {
                    if (Object.ReferenceEquals(_contentValue, null)) {
                        _contentValue = new StringAPColumnDef(this, "ContentValue", false, 30000);
                        _contentValue.Display = "内容";
                    }
                    return _contentValue;
                }
            }
            
            /// <summary>
            /// AttachmentUrl ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AttachmentUrl {
                get {
                    if (Object.ReferenceEquals(_attachmentUrl, null)) {
                        _attachmentUrl = new StringAPColumnDef(this, "AttachmentUrl", false, 255);
                        _attachmentUrl.Display = "附件路径";
                    }
                    return _attachmentUrl;
                }
            }
            
            /// <summary>
            /// AttachmentName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AttachmentName {
                get {
                    if (Object.ReferenceEquals(_attachmentName, null)) {
                        _attachmentName = new StringAPColumnDef(this, "AttachmentName", false, 40);
                        _attachmentName.Display = "附件名称";
                    }
                    return _attachmentName;
                }
            }
            
            /// <summary>
            /// Dynamic1 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic1 {
                get {
                    if (Object.ReferenceEquals(_dynamic1, null)) {
                        _dynamic1 = new StringAPColumnDef(this, "Dynamic1", false, 2000);
                        _dynamic1.Display = "动态内容1";
                    }
                    return _dynamic1;
                }
            }
            
            /// <summary>
            /// Dynamic2 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic2 {
                get {
                    if (Object.ReferenceEquals(_dynamic2, null)) {
                        _dynamic2 = new StringAPColumnDef(this, "Dynamic2", false, 2000);
                        _dynamic2.Display = "动态内容2";
                    }
                    return _dynamic2;
                }
            }
            
            /// <summary>
            /// Dynamic3 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic3 {
                get {
                    if (Object.ReferenceEquals(_dynamic3, null)) {
                        _dynamic3 = new StringAPColumnDef(this, "Dynamic3", false, 2000);
                        _dynamic3.Display = "动态内容3";
                    }
                    return _dynamic3;
                }
            }
            
            /// <summary>
            /// Dynamic4 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic4 {
                get {
                    if (Object.ReferenceEquals(_dynamic4, null)) {
                        _dynamic4 = new StringAPColumnDef(this, "Dynamic4", false, 2000);
                        _dynamic4.Display = "动态内容4";
                    }
                    return _dynamic4;
                }
            }
            
            /// <summary>
            /// Dynamic5 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic5 {
                get {
                    if (Object.ReferenceEquals(_dynamic5, null)) {
                        _dynamic5 = new StringAPColumnDef(this, "Dynamic5", false, 2000);
                        _dynamic5.Display = "动态内容5";
                    }
                    return _dynamic5;
                }
            }
            
            /// <summary>
            /// Dynamic6 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic6 {
                get {
                    if (Object.ReferenceEquals(_dynamic6, null)) {
                        _dynamic6 = new StringAPColumnDef(this, "Dynamic6", false, 2000);
                        _dynamic6.Display = "动态内容6";
                    }
                    return _dynamic6;
                }
            }
            
            /// <summary>
            /// Dynamic7 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic7 {
                get {
                    if (Object.ReferenceEquals(_dynamic7, null)) {
                        _dynamic7 = new StringAPColumnDef(this, "Dynamic7", false, 2000);
                        _dynamic7.Display = "动态内容7";
                    }
                    return _dynamic7;
                }
            }
            
            /// <summary>
            /// Dynamic8 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic8 {
                get {
                    if (Object.ReferenceEquals(_dynamic8, null)) {
                        _dynamic8 = new StringAPColumnDef(this, "Dynamic8", false, 2000);
                        _dynamic8.Display = "动态内容8";
                    }
                    return _dynamic8;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclareActiveTableDef As(string name) {
                return new DeclareActiveTableDef("DeclareActive", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, DeclareActive data, bool throwIfValidColumnName) {
                data.DeclareActiveId = DeclareActiveId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.ActiveKey = ActiveKey.GetValue<string>(reader, throwIfValidColumnName);
                data.Date = Date.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Location = Location.GetValue<string>(reader, throwIfValidColumnName);
                data.Level = Level.GetValue<string>(reader, throwIfValidColumnName);
                data.ContentValue = ContentValue.GetValue<string>(reader, throwIfValidColumnName);
                data.AttachmentUrl = AttachmentUrl.GetValue<string>(reader, throwIfValidColumnName);
                data.AttachmentName = AttachmentName.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic1 = Dynamic1.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic2 = Dynamic2.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic3 = Dynamic3.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic4 = Dynamic4.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic5 = Dynamic5.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic6 = Dynamic6.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic7 = Dynamic7.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic8 = Dynamic8.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareActive Map(IDataReader reader) {
                DeclareActive data = new DeclareActive();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareActive TolerantMap(IDataReader reader) {
                DeclareActive data = new DeclareActive();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareActive> MapList(IDataReader reader) {
                List<DeclareActive> list = new List<DeclareActive>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareActive> TolerantMapList(IDataReader reader) {
                List<DeclareActive> list = new List<DeclareActive>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclareAchievementTableDef : APTableDef {
            
            private Int64APColumnDef _declareAchievementId;
            
            private Int64APColumnDef _teacherId;
            
            private StringAPColumnDef _achievementKey;
            
            private StringAPColumnDef _date;
            
            private StringAPColumnDef _dateRegion;
            
            private StringAPColumnDef _location;
            
            private StringAPColumnDef _level;
            
            private StringAPColumnDef _nameOrTitle;
            
            private StringAPColumnDef _dynamic1;
            
            private StringAPColumnDef _dynamic2;
            
            private StringAPColumnDef _dynamic3;
            
            private StringAPColumnDef _dynamic4;
            
            private StringAPColumnDef _dynamic5;
            
            public DeclareAchievementTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclareAchievementTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// DeclareAchievementId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareAchievementId {
                get {
                    if (Object.ReferenceEquals(_declareAchievementId, null)) {
                        _declareAchievementId = new Int64APColumnDef(this, "DeclareAchievementId", false);
                        _declareAchievementId.Display = "成果ID";
                    }
                    return _declareAchievementId;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// AchievementKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AchievementKey {
                get {
                    if (Object.ReferenceEquals(_achievementKey, null)) {
                        _achievementKey = new StringAPColumnDef(this, "AchievementKey", false, 200);
                        _achievementKey.Display = "内容类别";
                    }
                    return _achievementKey;
                }
            }
            
            /// <summary>
            /// Date ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Date {
                get {
                    if (Object.ReferenceEquals(_date, null)) {
                        _date = new StringAPColumnDef(this, "Date", false, 100);
                        _date.Display = "时间";
                    }
                    return _date;
                }
            }
            
            /// <summary>
            /// DateRegion ColumnDef
            /// </summary>
            public virtual StringAPColumnDef DateRegion {
                get {
                    if (Object.ReferenceEquals(_dateRegion, null)) {
                        _dateRegion = new StringAPColumnDef(this, "DateRegion", false, 100);
                        _dateRegion.Display = "时间区间";
                    }
                    return _dateRegion;
                }
            }
            
            /// <summary>
            /// Location ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Location {
                get {
                    if (Object.ReferenceEquals(_location, null)) {
                        _location = new StringAPColumnDef(this, "Location", false, 100);
                        _location.Display = "地点";
                    }
                    return _location;
                }
            }
            
            /// <summary>
            /// Level ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Level {
                get {
                    if (Object.ReferenceEquals(_level, null)) {
                        _level = new StringAPColumnDef(this, "Level", false, 100);
                        _level.Display = "等级";
                    }
                    return _level;
                }
            }
            
            /// <summary>
            /// NameOrTitle ColumnDef
            /// </summary>
            public virtual StringAPColumnDef NameOrTitle {
                get {
                    if (Object.ReferenceEquals(_nameOrTitle, null)) {
                        _nameOrTitle = new StringAPColumnDef(this, "NameOrTitle", false, 100);
                        _nameOrTitle.Display = "名称或标题";
                    }
                    return _nameOrTitle;
                }
            }
            
            /// <summary>
            /// Dynamic1 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic1 {
                get {
                    if (Object.ReferenceEquals(_dynamic1, null)) {
                        _dynamic1 = new StringAPColumnDef(this, "Dynamic1", false, 2000);
                        _dynamic1.Display = "动态内容1";
                    }
                    return _dynamic1;
                }
            }
            
            /// <summary>
            /// Dynamic2 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic2 {
                get {
                    if (Object.ReferenceEquals(_dynamic2, null)) {
                        _dynamic2 = new StringAPColumnDef(this, "Dynamic2", false, 2000);
                        _dynamic2.Display = "动态内容2";
                    }
                    return _dynamic2;
                }
            }
            
            /// <summary>
            /// Dynamic3 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic3 {
                get {
                    if (Object.ReferenceEquals(_dynamic3, null)) {
                        _dynamic3 = new StringAPColumnDef(this, "Dynamic3", false, 2000);
                        _dynamic3.Display = "动态内容3";
                    }
                    return _dynamic3;
                }
            }
            
            /// <summary>
            /// Dynamic4 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic4 {
                get {
                    if (Object.ReferenceEquals(_dynamic4, null)) {
                        _dynamic4 = new StringAPColumnDef(this, "Dynamic4", false, 2000);
                        _dynamic4.Display = "动态内容4";
                    }
                    return _dynamic4;
                }
            }
            
            /// <summary>
            /// Dynamic5 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic5 {
                get {
                    if (Object.ReferenceEquals(_dynamic5, null)) {
                        _dynamic5 = new StringAPColumnDef(this, "Dynamic5", false, 2000);
                        _dynamic5.Display = "动态内容5";
                    }
                    return _dynamic5;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclareAchievementTableDef As(string name) {
                return new DeclareAchievementTableDef("DeclareAchievement", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, DeclareAchievement data, bool throwIfValidColumnName) {
                data.DeclareAchievementId = DeclareAchievementId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.AchievementKey = AchievementKey.GetValue<string>(reader, throwIfValidColumnName);
                data.Date = Date.GetValue<string>(reader, throwIfValidColumnName);
                data.DateRegion = DateRegion.GetValue<string>(reader, throwIfValidColumnName);
                data.Location = Location.GetValue<string>(reader, throwIfValidColumnName);
                data.Level = Level.GetValue<string>(reader, throwIfValidColumnName);
                data.NameOrTitle = NameOrTitle.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic1 = Dynamic1.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic2 = Dynamic2.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic3 = Dynamic3.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic4 = Dynamic4.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic5 = Dynamic5.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareAchievement Map(IDataReader reader) {
                DeclareAchievement data = new DeclareAchievement();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareAchievement TolerantMap(IDataReader reader) {
                DeclareAchievement data = new DeclareAchievement();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareAchievement> MapList(IDataReader reader) {
                List<DeclareAchievement> list = new List<DeclareAchievement>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareAchievement> TolerantMapList(IDataReader reader) {
                List<DeclareAchievement> list = new List<DeclareAchievement>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclareOrgConstTableDef : APTableDef {
            
            private Int64APColumnDef _declareOrgConstId;
            
            private Int64APColumnDef _teacherId;
            
            private StringAPColumnDef _content;
            
            private StringAPColumnDef _work;
            
            private StringAPColumnDef _remark;
            
            public DeclareOrgConstTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclareOrgConstTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// DeclareOrgConstId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareOrgConstId {
                get {
                    if (Object.ReferenceEquals(_declareOrgConstId, null)) {
                        _declareOrgConstId = new Int64APColumnDef(this, "DeclareOrgConstId", false);
                        _declareOrgConstId.Display = "建设ID";
                    }
                    return _declareOrgConstId;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// Content ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Content {
                get {
                    if (Object.ReferenceEquals(_content, null)) {
                        _content = new StringAPColumnDef(this, "Content", false, 2000);
                        _content.Display = "内容";
                    }
                    return _content;
                }
            }
            
            /// <summary>
            /// Work ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Work {
                get {
                    if (Object.ReferenceEquals(_work, null)) {
                        _work = new StringAPColumnDef(this, "Work", false, 2000);
                        _work.Display = "开展情况";
                    }
                    return _work;
                }
            }
            
            /// <summary>
            /// Remark ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Remark {
                get {
                    if (Object.ReferenceEquals(_remark, null)) {
                        _remark = new StringAPColumnDef(this, "Remark", false, 2000);
                        _remark.Display = "备注";
                    }
                    return _remark;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclareOrgConstTableDef As(string name) {
                return new DeclareOrgConstTableDef("DeclareOrgConst", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, DeclareOrgConst data, bool throwIfValidColumnName) {
                data.DeclareOrgConstId = DeclareOrgConstId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.Content = Content.GetValue<string>(reader, throwIfValidColumnName);
                data.Work = Work.GetValue<string>(reader, throwIfValidColumnName);
                data.Remark = Remark.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareOrgConst Map(IDataReader reader) {
                DeclareOrgConst data = new DeclareOrgConst();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareOrgConst TolerantMap(IDataReader reader) {
                DeclareOrgConst data = new DeclareOrgConst();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareOrgConst> MapList(IDataReader reader) {
                List<DeclareOrgConst> list = new List<DeclareOrgConst>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareOrgConst> TolerantMapList(IDataReader reader) {
                List<DeclareOrgConst> list = new List<DeclareOrgConst>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
    }
    
    /// <summary>
    /// APDBDef 是一个自动生成的具有 Partial 修饰的类，用于定义所有 从 APDal 继承来的 Dal 类。你可以添加同名的 Partial 类来扩充功能。
    /// </summary>
    public partial class APDalDef {
        
        /// <summary>
        /// 选项列表 DalBase
        /// </summary>
        public partial class PicklistDalBase : APDal {
            
            public PicklistDalBase() {
            }
            
            public PicklistDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Picklist data) {
                var query = APQuery.insert(APDBDef.Picklist).values(APDBDef.Picklist.PicklistId.SetValue(data.PicklistId), APDBDef.Picklist.InnerKey.SetValue(data.InnerKey), APDBDef.Picklist.Name.SetValue(data.Name), APDBDef.Picklist.Adjustable.SetValue(data.Adjustable), APDBDef.Picklist.Strengthen.SetValue(data.Strengthen), APDBDef.Picklist.Description.SetValue(data.Description));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Picklist data) {
                var query = APQuery.update(APDBDef.Picklist).values(APDBDef.Picklist.InnerKey.SetValue(data.InnerKey), APDBDef.Picklist.Name.SetValue(data.Name), APDBDef.Picklist.Adjustable.SetValue(data.Adjustable), APDBDef.Picklist.Strengthen.SetValue(data.Strengthen), APDBDef.Picklist.Description.SetValue(data.Description)).where((APDBDef.Picklist.PicklistId == data.PicklistId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long picklistId, Object metadata) {
                var query = APQuery.update(APDBDef.Picklist).values(APSqlSetPhraseSelector.Select(APDBDef.Picklist, metadata)).where((APDBDef.Picklist.PicklistId == picklistId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long picklistId) {
                var query = APQuery.delete(APDBDef.Picklist).where((APDBDef.Picklist.PicklistId == picklistId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Picklist).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Picklist.Asterisk.Count()).from(APDBDef.Picklist).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Picklist PrimaryGet(long picklistId) {
                var query = APQuery.select(APDBDef.Picklist.Asterisk).from(APDBDef.Picklist).where((APDBDef.Picklist.PicklistId == picklistId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Picklist.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Picklist> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Picklist.Asterisk).from(APDBDef.Picklist);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Picklist.PicklistId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Picklist.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Picklist> GetInitData() {
                return new List<Picklist>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Picklist> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Picklist data = list[i];
                    if ((PrimaryGet(data.PicklistId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 选项列表 Dal
        /// </summary>
        public partial class PicklistDal : PicklistDalBase {
            
            public PicklistDal() {
            }
            
            public PicklistDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 选项列表项 DalBase
        /// </summary>
        public partial class PicklistItemDalBase : APDal {
            
            public PicklistItemDalBase() {
            }
            
            public PicklistItemDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(PicklistItem data) {
                var query = APQuery.insert(APDBDef.PicklistItem).values(APDBDef.PicklistItem.PicklistItemId.SetValue(data.PicklistItemId), APDBDef.PicklistItem.PicklistId.SetValue(data.PicklistId), APDBDef.PicklistItem.Name.SetValue(data.Name), APDBDef.PicklistItem.StrengthenValue.SetValue(data.StrengthenValue), APDBDef.PicklistItem.Code.SetValue(data.Code), APDBDef.PicklistItem.IsDefault.SetValue(data.IsDefault));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(PicklistItem data) {
                var query = APQuery.update(APDBDef.PicklistItem).values(APDBDef.PicklistItem.Name.SetValue(data.Name), APDBDef.PicklistItem.StrengthenValue.SetValue(data.StrengthenValue), APDBDef.PicklistItem.Code.SetValue(data.Code), APDBDef.PicklistItem.IsDefault.SetValue(data.IsDefault)).where((APDBDef.PicklistItem.PicklistItemId == data.PicklistItemId), (APDBDef.PicklistItem.PicklistId == data.PicklistId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long picklistItemId, long picklistId, Object metadata) {
                var query = APQuery.update(APDBDef.PicklistItem).values(APSqlSetPhraseSelector.Select(APDBDef.PicklistItem, metadata)).where((APDBDef.PicklistItem.PicklistItemId == picklistItemId), (APDBDef.PicklistItem.PicklistId == picklistId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long picklistItemId, long picklistId) {
                var query = APQuery.delete(APDBDef.PicklistItem).where((APDBDef.PicklistItem.PicklistItemId == picklistItemId), (APDBDef.PicklistItem.PicklistId == picklistId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.PicklistItem).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.PicklistItem.Asterisk.Count()).from(APDBDef.PicklistItem).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual PicklistItem PrimaryGet(long picklistItemId, long picklistId) {
                var query = APQuery.select(APDBDef.PicklistItem.Asterisk).from(APDBDef.PicklistItem).where((APDBDef.PicklistItem.PicklistItemId == picklistItemId), (APDBDef.PicklistItem.PicklistId == picklistId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.PicklistItem.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<PicklistItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.PicklistItem.Asterisk).from(APDBDef.PicklistItem);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.PicklistItem.PicklistItemId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.PicklistItem.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<PicklistItem> GetInitData() {
                return new List<PicklistItem>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<PicklistItem> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    PicklistItem data = list[i];
                    if ((PrimaryGet(data.PicklistItemId, data.PicklistId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 选项列表项 Dal
        /// </summary>
        public partial class PicklistItemDal : PicklistItemDalBase {
            
            public PicklistItemDal() {
            }
            
            public PicklistItemDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 学校基础数据表 DalBase
        /// </summary>
        public partial class School_InfoDalBase : APDal {
            
            public School_InfoDalBase() {
            }
            
            public School_InfoDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(School_Info data) {
                var query = APQuery.insert(APDBDef.School_Info).values(APDBDef.School_Info.id.SetValue(data.id), APDBDef.School_Info.xxmc.SetValue(data.xxmc), APDBDef.School_Info.xxdm.SetValue(data.xxdm));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(School_Info data) {
                var query = APQuery.update(APDBDef.School_Info).values(APDBDef.School_Info.xxmc.SetValue(data.xxmc), APDBDef.School_Info.xxdm.SetValue(data.xxdm)).where((APDBDef.School_Info.id == data.id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(string id, Object metadata) {
                var query = APQuery.update(APDBDef.School_Info).values(APSqlSetPhraseSelector.Select(APDBDef.School_Info, metadata)).where((APDBDef.School_Info.id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(string id) {
                var query = APQuery.delete(APDBDef.School_Info).where((APDBDef.School_Info.id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.School_Info).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.School_Info.Asterisk.Count()).from(APDBDef.School_Info).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual School_Info PrimaryGet(string id) {
                var query = APQuery.select(APDBDef.School_Info.Asterisk).from(APDBDef.School_Info).where((APDBDef.School_Info.id == id));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.School_Info.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<School_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.School_Info.Asterisk).from(APDBDef.School_Info);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.School_Info.id);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.School_Info.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<School_Info> GetInitData() {
                return new List<School_Info>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<School_Info> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    School_Info data = list[i];
                    if ((PrimaryGet(data.id) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 学校基础数据表 Dal
        /// </summary>
        public partial class School_InfoDal : School_InfoDalBase {
            
            public School_InfoDal() {
            }
            
            public School_InfoDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 教职工基础数据表 DalBase
        /// </summary>
        public partial class Staff_InfoDalBase : APDal {
            
            public Staff_InfoDalBase() {
            }
            
            public Staff_InfoDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Staff_Info data) {
                var query = APQuery.insert(APDBDef.Staff_Info).values(APDBDef.Staff_Info.id.SetValue(data.id), APDBDef.Staff_Info.yhm.SetValue(data.yhm), APDBDef.Staff_Info.xxdm.SetValue(data.xxdm), APDBDef.Staff_Info.xm.SetValue(data.xm), APDBDef.Staff_Info.sfzjh.SetValue(data.sfzjh), APDBDef.Staff_Info.sxh.SetValue(data.sxh), APDBDef.Staff_Info.csrq.SetValue(data.csrq), APDBDef.Staff_Info.xb.SetValue(data.xb), APDBDef.Staff_Info.xl.SetValue(data.xl), APDBDef.Staff_Info.xw.SetValue(data.xw), APDBDef.Staff_Info.byxx.SetValue(data.byxx), APDBDef.Staff_Info.zy.SetValue(data.zy), APDBDef.Staff_Info.zw.SetValue(data.zw), APDBDef.Staff_Info.zc.SetValue(data.zc), APDBDef.Staff_Info.rjxk.SetValue(data.rjxk), APDBDef.Staff_Info.dw.SetValue(data.dw));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Staff_Info data) {
                var query = APQuery.update(APDBDef.Staff_Info).values(APDBDef.Staff_Info.yhm.SetValue(data.yhm), APDBDef.Staff_Info.xxdm.SetValue(data.xxdm), APDBDef.Staff_Info.xm.SetValue(data.xm), APDBDef.Staff_Info.sfzjh.SetValue(data.sfzjh), APDBDef.Staff_Info.sxh.SetValue(data.sxh), APDBDef.Staff_Info.csrq.SetValue(data.csrq), APDBDef.Staff_Info.xb.SetValue(data.xb), APDBDef.Staff_Info.xl.SetValue(data.xl), APDBDef.Staff_Info.xw.SetValue(data.xw), APDBDef.Staff_Info.byxx.SetValue(data.byxx), APDBDef.Staff_Info.zy.SetValue(data.zy), APDBDef.Staff_Info.zw.SetValue(data.zw), APDBDef.Staff_Info.zc.SetValue(data.zc), APDBDef.Staff_Info.rjxk.SetValue(data.rjxk), APDBDef.Staff_Info.dw.SetValue(data.dw)).where((APDBDef.Staff_Info.id == data.id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(string id, Object metadata) {
                var query = APQuery.update(APDBDef.Staff_Info).values(APSqlSetPhraseSelector.Select(APDBDef.Staff_Info, metadata)).where((APDBDef.Staff_Info.id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(string id) {
                var query = APQuery.delete(APDBDef.Staff_Info).where((APDBDef.Staff_Info.id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Staff_Info).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Staff_Info.Asterisk.Count()).from(APDBDef.Staff_Info).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Staff_Info PrimaryGet(string id) {
                var query = APQuery.select(APDBDef.Staff_Info.Asterisk).from(APDBDef.Staff_Info).where((APDBDef.Staff_Info.id == id));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Staff_Info.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Staff_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Staff_Info.Asterisk).from(APDBDef.Staff_Info);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Staff_Info.id);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Staff_Info.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Staff_Info> GetInitData() {
                return new List<Staff_Info>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Staff_Info> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Staff_Info data = list[i];
                    if ((PrimaryGet(data.id) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 教职工基础数据表 Dal
        /// </summary>
        public partial class Staff_InfoDal : Staff_InfoDalBase {
            
            public Staff_InfoDal() {
            }
            
            public Staff_InfoDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 用户 DalBase
        /// </summary>
        public partial class BzUserDalBase : APDal {
            
            public BzUserDalBase() {
            }
            
            public BzUserDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(BzUser data) {
                if ((data.Id == 0)) {
                    data.Id = ((long)(GetNewId(APDBDef.BzUser.Id)));
                }
                var query = APQuery.insert(APDBDef.BzUser).values(APDBDef.BzUser.Id.SetValue(data.Id), APDBDef.BzUser.UserName.SetValue(data.UserName), APDBDef.BzUser.PasswordHash.SetValue(data.PasswordHash), APDBDef.BzUser.SecurityStamp.SetValue(data.SecurityStamp), APDBDef.BzUser.Email.SetValue(data.Email), APDBDef.BzUser.EmailConfirmed.SetValue(data.EmailConfirmed), APDBDef.BzUser.PhoneNumber.SetValue(data.PhoneNumber), APDBDef.BzUser.PhoneNumberConfirmed.SetValue(data.PhoneNumberConfirmed), APDBDef.BzUser.TwoFactorEnabled.SetValue(data.TwoFactorEnabled), APDBDef.BzUser.LockoutEndDtc.SetValue(data.LockoutEndDtc), APDBDef.BzUser.LockoutEnabled.SetValue(data.LockoutEnabled), APDBDef.BzUser.AccessFailedCount.SetValue(data.AccessFailedCount), APDBDef.BzUser.Actived.SetValue(data.Actived));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(BzUser data) {
                var query = APQuery.update(APDBDef.BzUser).values(APDBDef.BzUser.UserName.SetValue(data.UserName), APDBDef.BzUser.PasswordHash.SetValue(data.PasswordHash), APDBDef.BzUser.SecurityStamp.SetValue(data.SecurityStamp), APDBDef.BzUser.Email.SetValue(data.Email), APDBDef.BzUser.EmailConfirmed.SetValue(data.EmailConfirmed), APDBDef.BzUser.PhoneNumber.SetValue(data.PhoneNumber), APDBDef.BzUser.PhoneNumberConfirmed.SetValue(data.PhoneNumberConfirmed), APDBDef.BzUser.TwoFactorEnabled.SetValue(data.TwoFactorEnabled), APDBDef.BzUser.LockoutEndDtc.SetValue(data.LockoutEndDtc), APDBDef.BzUser.LockoutEnabled.SetValue(data.LockoutEnabled), APDBDef.BzUser.AccessFailedCount.SetValue(data.AccessFailedCount), APDBDef.BzUser.Actived.SetValue(data.Actived)).where((APDBDef.BzUser.Id == data.Id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long id, Object metadata) {
                var query = APQuery.update(APDBDef.BzUser).values(APSqlSetPhraseSelector.Select(APDBDef.BzUser, metadata)).where((APDBDef.BzUser.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long id) {
                var query = APQuery.delete(APDBDef.BzUser).where((APDBDef.BzUser.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.BzUser).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.BzUser.Asterisk.Count()).from(APDBDef.BzUser).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual BzUser PrimaryGet(long id) {
                var query = APQuery.select(APDBDef.BzUser.Asterisk).from(APDBDef.BzUser).where((APDBDef.BzUser.Id == id));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.BzUser.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<BzUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.BzUser.Asterisk).from(APDBDef.BzUser);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.BzUser.Id);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.BzUser.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<BzUser> GetInitData() {
                return new List<BzUser>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<BzUser> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    BzUser data = list[i];
                    if ((PrimaryGet(data.Id) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 用户 Dal
        /// </summary>
        public partial class BzUserDal : BzUserDalBase {
            
            public BzUserDal() {
            }
            
            public BzUserDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// UserClaim DalBase
        /// </summary>
        public partial class BzUserClaimDalBase : APDal {
            
            public BzUserClaimDalBase() {
            }
            
            public BzUserClaimDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(BzUserClaim data) {
                if ((data.Id == 0)) {
                    data.Id = ((int)(GetNewId(APDBDef.BzUserClaim.Id)));
                }
                var query = APQuery.insert(APDBDef.BzUserClaim).values(APDBDef.BzUserClaim.Id.SetValue(data.Id), APDBDef.BzUserClaim.UserId.SetValue(data.UserId), APDBDef.BzUserClaim.ClaimType.SetValue(data.ClaimType), APDBDef.BzUserClaim.ClaimValue.SetValue(data.ClaimValue));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(BzUserClaim data) {
                var query = APQuery.update(APDBDef.BzUserClaim).values(APDBDef.BzUserClaim.UserId.SetValue(data.UserId), APDBDef.BzUserClaim.ClaimType.SetValue(data.ClaimType), APDBDef.BzUserClaim.ClaimValue.SetValue(data.ClaimValue)).where((APDBDef.BzUserClaim.Id == data.Id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(int id, Object metadata) {
                var query = APQuery.update(APDBDef.BzUserClaim).values(APSqlSetPhraseSelector.Select(APDBDef.BzUserClaim, metadata)).where((APDBDef.BzUserClaim.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(int id) {
                var query = APQuery.delete(APDBDef.BzUserClaim).where((APDBDef.BzUserClaim.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.BzUserClaim).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.BzUserClaim.Asterisk.Count()).from(APDBDef.BzUserClaim).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual BzUserClaim PrimaryGet(int id) {
                var query = APQuery.select(APDBDef.BzUserClaim.Asterisk).from(APDBDef.BzUserClaim).where((APDBDef.BzUserClaim.Id == id));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.BzUserClaim.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<BzUserClaim> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.BzUserClaim.Asterisk).from(APDBDef.BzUserClaim);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.BzUserClaim.Id);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.BzUserClaim.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<BzUserClaim> GetInitData() {
                return new List<BzUserClaim>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<BzUserClaim> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    BzUserClaim data = list[i];
                    if ((PrimaryGet(data.Id) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// UserClaim Dal
        /// </summary>
        public partial class BzUserClaimDal : BzUserClaimDalBase {
            
            public BzUserClaimDal() {
            }
            
            public BzUserClaimDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 用户简档 DalBase
        /// </summary>
        public partial class BzUserProfileDalBase : APDal {
            
            public BzUserProfileDalBase() {
            }
            
            public BzUserProfileDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(BzUserProfile data) {
                var query = APQuery.insert(APDBDef.BzUserProfile).values(APDBDef.BzUserProfile.UserId.SetValue(data.UserId), APDBDef.BzUserProfile.UUID.SetValue(data.UUID), APDBDef.BzUserProfile.CompanyId.SetValue(data.CompanyId), APDBDef.BzUserProfile.UserName.SetValue(data.UserName), APDBDef.BzUserProfile.UserType.SetValue(data.UserType), APDBDef.BzUserProfile.RealName.SetValue(data.RealName), APDBDef.BzUserProfile.IDCard.SetValue(data.IDCard), APDBDef.BzUserProfile.TrainNo.SetValue(data.TrainNo), APDBDef.BzUserProfile.GenderPKID.SetValue(data.GenderPKID), APDBDef.BzUserProfile.Birthday.SetValue(data.Birthday), APDBDef.BzUserProfile.PoliticalStatusPKID.SetValue(data.PoliticalStatusPKID), APDBDef.BzUserProfile.NationalityPKID.SetValue(data.NationalityPKID), APDBDef.BzUserProfile.EduSubjectPKID.SetValue(data.EduSubjectPKID), APDBDef.BzUserProfile.EduStagePKID.SetValue(data.EduStagePKID), APDBDef.BzUserProfile.JobDate.SetValue(data.JobDate), APDBDef.BzUserProfile.SkillTitlePKID.SetValue(data.SkillTitlePKID), APDBDef.BzUserProfile.SkillDate.SetValue(data.SkillDate), APDBDef.BzUserProfile.CompanyName.SetValue(data.CompanyName), APDBDef.BzUserProfile.CompanyNameOuter.SetValue(data.CompanyNameOuter), APDBDef.BzUserProfile.Companyaddress.SetValue(data.Companyaddress), APDBDef.BzUserProfile.RankTitlePKID.SetValue(data.RankTitlePKID), APDBDef.BzUserProfile.EduBgPKID.SetValue(data.EduBgPKID), APDBDef.BzUserProfile.EduDegreePKID.SetValue(data.EduDegreePKID), APDBDef.BzUserProfile.GraduateSchool.SetValue(data.GraduateSchool), APDBDef.BzUserProfile.GraduateDate.SetValue(data.GraduateDate), APDBDef.BzUserProfile.Phonemobile.SetValue(data.Phonemobile), APDBDef.BzUserProfile.Email.SetValue(data.Email));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(BzUserProfile data) {
                var query = APQuery.update(APDBDef.BzUserProfile).values(APDBDef.BzUserProfile.UUID.SetValue(data.UUID), APDBDef.BzUserProfile.CompanyId.SetValue(data.CompanyId), APDBDef.BzUserProfile.UserName.SetValue(data.UserName), APDBDef.BzUserProfile.UserType.SetValue(data.UserType), APDBDef.BzUserProfile.RealName.SetValue(data.RealName), APDBDef.BzUserProfile.IDCard.SetValue(data.IDCard), APDBDef.BzUserProfile.TrainNo.SetValue(data.TrainNo), APDBDef.BzUserProfile.GenderPKID.SetValue(data.GenderPKID), APDBDef.BzUserProfile.Birthday.SetValue(data.Birthday), APDBDef.BzUserProfile.PoliticalStatusPKID.SetValue(data.PoliticalStatusPKID), APDBDef.BzUserProfile.NationalityPKID.SetValue(data.NationalityPKID), APDBDef.BzUserProfile.EduSubjectPKID.SetValue(data.EduSubjectPKID), APDBDef.BzUserProfile.EduStagePKID.SetValue(data.EduStagePKID), APDBDef.BzUserProfile.JobDate.SetValue(data.JobDate), APDBDef.BzUserProfile.SkillTitlePKID.SetValue(data.SkillTitlePKID), APDBDef.BzUserProfile.SkillDate.SetValue(data.SkillDate), APDBDef.BzUserProfile.CompanyName.SetValue(data.CompanyName), APDBDef.BzUserProfile.CompanyNameOuter.SetValue(data.CompanyNameOuter), APDBDef.BzUserProfile.Companyaddress.SetValue(data.Companyaddress), APDBDef.BzUserProfile.RankTitlePKID.SetValue(data.RankTitlePKID), APDBDef.BzUserProfile.EduBgPKID.SetValue(data.EduBgPKID), APDBDef.BzUserProfile.EduDegreePKID.SetValue(data.EduDegreePKID), APDBDef.BzUserProfile.GraduateSchool.SetValue(data.GraduateSchool), APDBDef.BzUserProfile.GraduateDate.SetValue(data.GraduateDate), APDBDef.BzUserProfile.Phonemobile.SetValue(data.Phonemobile), APDBDef.BzUserProfile.Email.SetValue(data.Email)).where((APDBDef.BzUserProfile.UserId == data.UserId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long userId, Object metadata) {
                var query = APQuery.update(APDBDef.BzUserProfile).values(APSqlSetPhraseSelector.Select(APDBDef.BzUserProfile, metadata)).where((APDBDef.BzUserProfile.UserId == userId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long userId) {
                var query = APQuery.delete(APDBDef.BzUserProfile).where((APDBDef.BzUserProfile.UserId == userId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.BzUserProfile).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.BzUserProfile.Asterisk.Count()).from(APDBDef.BzUserProfile).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual BzUserProfile PrimaryGet(long userId) {
                var query = APQuery.select(APDBDef.BzUserProfile.Asterisk).from(APDBDef.BzUserProfile).where((APDBDef.BzUserProfile.UserId == userId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.BzUserProfile.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<BzUserProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.BzUserProfile.Asterisk).from(APDBDef.BzUserProfile);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.BzUserProfile.UserId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.BzUserProfile.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<BzUserProfile> GetInitData() {
                return new List<BzUserProfile>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<BzUserProfile> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    BzUserProfile data = list[i];
                    if ((PrimaryGet(data.UserId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 用户简档 Dal
        /// </summary>
        public partial class BzUserProfileDal : BzUserProfileDalBase {
            
            public BzUserProfileDal() {
            }
            
            public BzUserProfileDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 角色 DalBase
        /// </summary>
        public partial class BzRoleDalBase : APDal {
            
            public BzRoleDalBase() {
            }
            
            public BzRoleDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(BzRole data) {
                if ((data.Id == 0)) {
                    data.Id = ((long)(GetNewId(APDBDef.BzRole.Id)));
                }
                var query = APQuery.insert(APDBDef.BzRole).values(APDBDef.BzRole.Id.SetValue(data.Id), APDBDef.BzRole.Name.SetValue(data.Name), APDBDef.BzRole.NormalizedName.SetValue(data.NormalizedName));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(BzRole data) {
                var query = APQuery.update(APDBDef.BzRole).values(APDBDef.BzRole.Name.SetValue(data.Name), APDBDef.BzRole.NormalizedName.SetValue(data.NormalizedName)).where((APDBDef.BzRole.Id == data.Id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long id, Object metadata) {
                var query = APQuery.update(APDBDef.BzRole).values(APSqlSetPhraseSelector.Select(APDBDef.BzRole, metadata)).where((APDBDef.BzRole.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long id) {
                var query = APQuery.delete(APDBDef.BzRole).where((APDBDef.BzRole.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.BzRole).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.BzRole.Asterisk.Count()).from(APDBDef.BzRole).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual BzRole PrimaryGet(long id) {
                var query = APQuery.select(APDBDef.BzRole.Asterisk).from(APDBDef.BzRole).where((APDBDef.BzRole.Id == id));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.BzRole.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<BzRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.BzRole.Asterisk).from(APDBDef.BzRole);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.BzRole.Id);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.BzRole.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<BzRole> GetInitData() {
                return new List<BzRole>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<BzRole> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    BzRole data = list[i];
                    if ((PrimaryGet(data.Id) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 角色 Dal
        /// </summary>
        public partial class BzRoleDal : BzRoleDalBase {
            
            public BzRoleDal() {
            }
            
            public BzRoleDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 用户角色 DalBase
        /// </summary>
        public partial class BzUserRoleDalBase : APDal {
            
            public BzUserRoleDalBase() {
            }
            
            public BzUserRoleDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(BzUserRole data) {
                if ((data.UserRoleId == 0)) {
                    data.UserRoleId = ((long)(GetNewId(APDBDef.BzUserRole.UserRoleId)));
                }
                var query = APQuery.insert(APDBDef.BzUserRole).values(APDBDef.BzUserRole.UserRoleId.SetValue(data.UserRoleId), APDBDef.BzUserRole.UserId.SetValue(data.UserId), APDBDef.BzUserRole.RoleId.SetValue(data.RoleId), APDBDef.BzUserRole.ScopeType.SetValue(data.ScopeType), APDBDef.BzUserRole.ScopeId.SetValue(data.ScopeId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(BzUserRole data) {
                var query = APQuery.update(APDBDef.BzUserRole).values(APDBDef.BzUserRole.UserId.SetValue(data.UserId), APDBDef.BzUserRole.RoleId.SetValue(data.RoleId), APDBDef.BzUserRole.ScopeType.SetValue(data.ScopeType), APDBDef.BzUserRole.ScopeId.SetValue(data.ScopeId)).where((APDBDef.BzUserRole.UserRoleId == data.UserRoleId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long userRoleId, Object metadata) {
                var query = APQuery.update(APDBDef.BzUserRole).values(APSqlSetPhraseSelector.Select(APDBDef.BzUserRole, metadata)).where((APDBDef.BzUserRole.UserRoleId == userRoleId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long userRoleId) {
                var query = APQuery.delete(APDBDef.BzUserRole).where((APDBDef.BzUserRole.UserRoleId == userRoleId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.BzUserRole).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.BzUserRole.Asterisk.Count()).from(APDBDef.BzUserRole).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual BzUserRole PrimaryGet(long userRoleId) {
                var query = APQuery.select(APDBDef.BzUserRole.Asterisk).from(APDBDef.BzUserRole).where((APDBDef.BzUserRole.UserRoleId == userRoleId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.BzUserRole.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<BzUserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.BzUserRole.Asterisk).from(APDBDef.BzUserRole);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.BzUserRole.UserRoleId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.BzUserRole.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<BzUserRole> GetInitData() {
                return new List<BzUserRole>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<BzUserRole> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    BzUserRole data = list[i];
                    if ((PrimaryGet(data.UserRoleId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 用户角色 Dal
        /// </summary>
        public partial class BzUserRoleDal : BzUserRoleDalBase {
            
            public BzUserRoleDal() {
            }
            
            public BzUserRoleDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报 DalBase
        /// </summary>
        public partial class DeclareDalBase : APDal {
            
            public DeclareDalBase() {
            }
            
            public DeclareDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Declare data) {
                var query = APQuery.insert(APDBDef.Declare).values(APDBDef.Declare.TeacherId.SetValue(data.TeacherId), APDBDef.Declare.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.Declare.DeclareSubjectPKID.SetValue(data.DeclareSubjectPKID), APDBDef.Declare.DeclareStagePKID.SetValue(data.DeclareStagePKID), APDBDef.Declare.AllowFlowToSchool.SetValue(data.AllowFlowToSchool), APDBDef.Declare.AllowFitResearcher.SetValue(data.AllowFitResearcher));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Declare data) {
                var query = APQuery.update(APDBDef.Declare).values(APDBDef.Declare.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.Declare.DeclareSubjectPKID.SetValue(data.DeclareSubjectPKID), APDBDef.Declare.DeclareStagePKID.SetValue(data.DeclareStagePKID), APDBDef.Declare.AllowFlowToSchool.SetValue(data.AllowFlowToSchool), APDBDef.Declare.AllowFitResearcher.SetValue(data.AllowFitResearcher)).where((APDBDef.Declare.TeacherId == data.TeacherId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long teacherId, Object metadata) {
                var query = APQuery.update(APDBDef.Declare).values(APSqlSetPhraseSelector.Select(APDBDef.Declare, metadata)).where((APDBDef.Declare.TeacherId == teacherId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long teacherId) {
                var query = APQuery.delete(APDBDef.Declare).where((APDBDef.Declare.TeacherId == teacherId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Declare).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Declare.Asterisk.Count()).from(APDBDef.Declare).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Declare PrimaryGet(long teacherId) {
                var query = APQuery.select(APDBDef.Declare.Asterisk).from(APDBDef.Declare).where((APDBDef.Declare.TeacherId == teacherId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Declare.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Declare> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Declare.Asterisk).from(APDBDef.Declare);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Declare.TeacherId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Declare.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Declare> GetInitData() {
                return new List<Declare>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Declare> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Declare data = list[i];
                    if ((PrimaryGet(data.TeacherId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报 Dal
        /// </summary>
        public partial class DeclareDal : DeclareDalBase {
            
            public DeclareDal() {
            }
            
            public DeclareDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报-简历 DalBase
        /// </summary>
        public partial class DeclareResumeDalBase : APDal {
            
            public DeclareResumeDalBase() {
            }
            
            public DeclareResumeDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(DeclareResume data) {
                if ((data.DeclareResumeId == 0)) {
                    data.DeclareResumeId = ((long)(GetNewId(APDBDef.DeclareResume.DeclareResumeId)));
                }
                var query = APQuery.insert(APDBDef.DeclareResume).values(APDBDef.DeclareResume.DeclareResumeId.SetValue(data.DeclareResumeId), APDBDef.DeclareResume.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareResume.DateRegion.SetValue(data.DateRegion), APDBDef.DeclareResume.Company.SetValue(data.Company), APDBDef.DeclareResume.Title.SetValue(data.Title));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(DeclareResume data) {
                var query = APQuery.update(APDBDef.DeclareResume).values(APDBDef.DeclareResume.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareResume.DateRegion.SetValue(data.DateRegion), APDBDef.DeclareResume.Company.SetValue(data.Company), APDBDef.DeclareResume.Title.SetValue(data.Title)).where((APDBDef.DeclareResume.DeclareResumeId == data.DeclareResumeId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long declareResumeId, Object metadata) {
                var query = APQuery.update(APDBDef.DeclareResume).values(APSqlSetPhraseSelector.Select(APDBDef.DeclareResume, metadata)).where((APDBDef.DeclareResume.DeclareResumeId == declareResumeId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long declareResumeId) {
                var query = APQuery.delete(APDBDef.DeclareResume).where((APDBDef.DeclareResume.DeclareResumeId == declareResumeId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.DeclareResume).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.DeclareResume.Asterisk.Count()).from(APDBDef.DeclareResume).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual DeclareResume PrimaryGet(long declareResumeId) {
                var query = APQuery.select(APDBDef.DeclareResume.Asterisk).from(APDBDef.DeclareResume).where((APDBDef.DeclareResume.DeclareResumeId == declareResumeId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.DeclareResume.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<DeclareResume> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.DeclareResume.Asterisk).from(APDBDef.DeclareResume);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.DeclareResume.DeclareResumeId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.DeclareResume.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<DeclareResume> GetInitData() {
                return new List<DeclareResume>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<DeclareResume> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    DeclareResume data = list[i];
                    if ((PrimaryGet(data.DeclareResumeId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报-简历 Dal
        /// </summary>
        public partial class DeclareResumeDal : DeclareResumeDalBase {
            
            public DeclareResumeDal() {
            }
            
            public DeclareResumeDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报-内容 DalBase
        /// </summary>
        public partial class DeclareContentDalBase : APDal {
            
            public DeclareContentDalBase() {
            }
            
            public DeclareContentDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(DeclareContent data) {
                if ((data.DeclareContentId == 0)) {
                    data.DeclareContentId = ((long)(GetNewId(APDBDef.DeclareContent.DeclareContentId)));
                }
                var query = APQuery.insert(APDBDef.DeclareContent).values(APDBDef.DeclareContent.DeclareContentId.SetValue(data.DeclareContentId), APDBDef.DeclareContent.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareContent.ContentKey.SetValue(data.ContentKey), APDBDef.DeclareContent.ContentValue.SetValue(data.ContentValue), APDBDef.DeclareContent.ContentDataType.SetValue(data.ContentDataType));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(DeclareContent data) {
                var query = APQuery.update(APDBDef.DeclareContent).values(APDBDef.DeclareContent.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareContent.ContentKey.SetValue(data.ContentKey), APDBDef.DeclareContent.ContentValue.SetValue(data.ContentValue), APDBDef.DeclareContent.ContentDataType.SetValue(data.ContentDataType)).where((APDBDef.DeclareContent.DeclareContentId == data.DeclareContentId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long declareContentId, Object metadata) {
                var query = APQuery.update(APDBDef.DeclareContent).values(APSqlSetPhraseSelector.Select(APDBDef.DeclareContent, metadata)).where((APDBDef.DeclareContent.DeclareContentId == declareContentId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long declareContentId) {
                var query = APQuery.delete(APDBDef.DeclareContent).where((APDBDef.DeclareContent.DeclareContentId == declareContentId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.DeclareContent).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.DeclareContent.Asterisk.Count()).from(APDBDef.DeclareContent).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual DeclareContent PrimaryGet(long declareContentId) {
                var query = APQuery.select(APDBDef.DeclareContent.Asterisk).from(APDBDef.DeclareContent).where((APDBDef.DeclareContent.DeclareContentId == declareContentId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.DeclareContent.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<DeclareContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.DeclareContent.Asterisk).from(APDBDef.DeclareContent);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.DeclareContent.DeclareContentId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.DeclareContent.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<DeclareContent> GetInitData() {
                return new List<DeclareContent>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<DeclareContent> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    DeclareContent data = list[i];
                    if ((PrimaryGet(data.DeclareContentId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报-内容 Dal
        /// </summary>
        public partial class DeclareContentDal : DeclareContentDalBase {
            
            public DeclareContentDal() {
            }
            
            public DeclareContentDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报-活动 DalBase
        /// </summary>
        public partial class DeclareActiveDalBase : APDal {
            
            public DeclareActiveDalBase() {
            }
            
            public DeclareActiveDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(DeclareActive data) {
                if ((data.DeclareActiveId == 0)) {
                    data.DeclareActiveId = ((long)(GetNewId(APDBDef.DeclareActive.DeclareActiveId)));
                }
                var query = APQuery.insert(APDBDef.DeclareActive).values(APDBDef.DeclareActive.DeclareActiveId.SetValue(data.DeclareActiveId), APDBDef.DeclareActive.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareActive.ActiveKey.SetValue(data.ActiveKey), APDBDef.DeclareActive.Date.SetValue(data.Date), APDBDef.DeclareActive.Location.SetValue(data.Location), APDBDef.DeclareActive.Level.SetValue(data.Level), APDBDef.DeclareActive.ContentValue.SetValue(data.ContentValue), APDBDef.DeclareActive.AttachmentUrl.SetValue(data.AttachmentUrl), APDBDef.DeclareActive.AttachmentName.SetValue(data.AttachmentName), APDBDef.DeclareActive.Dynamic1.SetValue(data.Dynamic1), APDBDef.DeclareActive.Dynamic2.SetValue(data.Dynamic2), APDBDef.DeclareActive.Dynamic3.SetValue(data.Dynamic3), APDBDef.DeclareActive.Dynamic4.SetValue(data.Dynamic4), APDBDef.DeclareActive.Dynamic5.SetValue(data.Dynamic5), APDBDef.DeclareActive.Dynamic6.SetValue(data.Dynamic6), APDBDef.DeclareActive.Dynamic7.SetValue(data.Dynamic7), APDBDef.DeclareActive.Dynamic8.SetValue(data.Dynamic8));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(DeclareActive data) {
                var query = APQuery.update(APDBDef.DeclareActive).values(APDBDef.DeclareActive.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareActive.ActiveKey.SetValue(data.ActiveKey), APDBDef.DeclareActive.Date.SetValue(data.Date), APDBDef.DeclareActive.Location.SetValue(data.Location), APDBDef.DeclareActive.Level.SetValue(data.Level), APDBDef.DeclareActive.ContentValue.SetValue(data.ContentValue), APDBDef.DeclareActive.AttachmentUrl.SetValue(data.AttachmentUrl), APDBDef.DeclareActive.AttachmentName.SetValue(data.AttachmentName), APDBDef.DeclareActive.Dynamic1.SetValue(data.Dynamic1), APDBDef.DeclareActive.Dynamic2.SetValue(data.Dynamic2), APDBDef.DeclareActive.Dynamic3.SetValue(data.Dynamic3), APDBDef.DeclareActive.Dynamic4.SetValue(data.Dynamic4), APDBDef.DeclareActive.Dynamic5.SetValue(data.Dynamic5), APDBDef.DeclareActive.Dynamic6.SetValue(data.Dynamic6), APDBDef.DeclareActive.Dynamic7.SetValue(data.Dynamic7), APDBDef.DeclareActive.Dynamic8.SetValue(data.Dynamic8)).where((APDBDef.DeclareActive.DeclareActiveId == data.DeclareActiveId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long declareActiveId, Object metadata) {
                var query = APQuery.update(APDBDef.DeclareActive).values(APSqlSetPhraseSelector.Select(APDBDef.DeclareActive, metadata)).where((APDBDef.DeclareActive.DeclareActiveId == declareActiveId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long declareActiveId) {
                var query = APQuery.delete(APDBDef.DeclareActive).where((APDBDef.DeclareActive.DeclareActiveId == declareActiveId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.DeclareActive).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.DeclareActive.Asterisk.Count()).from(APDBDef.DeclareActive).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual DeclareActive PrimaryGet(long declareActiveId) {
                var query = APQuery.select(APDBDef.DeclareActive.Asterisk).from(APDBDef.DeclareActive).where((APDBDef.DeclareActive.DeclareActiveId == declareActiveId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.DeclareActive.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<DeclareActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.DeclareActive.Asterisk).from(APDBDef.DeclareActive);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.DeclareActive.DeclareActiveId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.DeclareActive.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<DeclareActive> GetInitData() {
                return new List<DeclareActive>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<DeclareActive> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    DeclareActive data = list[i];
                    if ((PrimaryGet(data.DeclareActiveId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报-活动 Dal
        /// </summary>
        public partial class DeclareActiveDal : DeclareActiveDalBase {
            
            public DeclareActiveDal() {
            }
            
            public DeclareActiveDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报-科研成果 DalBase
        /// </summary>
        public partial class DeclareAchievementDalBase : APDal {
            
            public DeclareAchievementDalBase() {
            }
            
            public DeclareAchievementDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(DeclareAchievement data) {
                if ((data.DeclareAchievementId == 0)) {
                    data.DeclareAchievementId = ((long)(GetNewId(APDBDef.DeclareAchievement.DeclareAchievementId)));
                }
                var query = APQuery.insert(APDBDef.DeclareAchievement).values(APDBDef.DeclareAchievement.DeclareAchievementId.SetValue(data.DeclareAchievementId), APDBDef.DeclareAchievement.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareAchievement.AchievementKey.SetValue(data.AchievementKey), APDBDef.DeclareAchievement.Date.SetValue(data.Date), APDBDef.DeclareAchievement.DateRegion.SetValue(data.DateRegion), APDBDef.DeclareAchievement.Location.SetValue(data.Location), APDBDef.DeclareAchievement.Level.SetValue(data.Level), APDBDef.DeclareAchievement.NameOrTitle.SetValue(data.NameOrTitle), APDBDef.DeclareAchievement.Dynamic1.SetValue(data.Dynamic1), APDBDef.DeclareAchievement.Dynamic2.SetValue(data.Dynamic2), APDBDef.DeclareAchievement.Dynamic3.SetValue(data.Dynamic3), APDBDef.DeclareAchievement.Dynamic4.SetValue(data.Dynamic4), APDBDef.DeclareAchievement.Dynamic5.SetValue(data.Dynamic5));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(DeclareAchievement data) {
                var query = APQuery.update(APDBDef.DeclareAchievement).values(APDBDef.DeclareAchievement.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareAchievement.AchievementKey.SetValue(data.AchievementKey), APDBDef.DeclareAchievement.Date.SetValue(data.Date), APDBDef.DeclareAchievement.DateRegion.SetValue(data.DateRegion), APDBDef.DeclareAchievement.Location.SetValue(data.Location), APDBDef.DeclareAchievement.Level.SetValue(data.Level), APDBDef.DeclareAchievement.NameOrTitle.SetValue(data.NameOrTitle), APDBDef.DeclareAchievement.Dynamic1.SetValue(data.Dynamic1), APDBDef.DeclareAchievement.Dynamic2.SetValue(data.Dynamic2), APDBDef.DeclareAchievement.Dynamic3.SetValue(data.Dynamic3), APDBDef.DeclareAchievement.Dynamic4.SetValue(data.Dynamic4), APDBDef.DeclareAchievement.Dynamic5.SetValue(data.Dynamic5)).where((APDBDef.DeclareAchievement.DeclareAchievementId == data.DeclareAchievementId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long declareAchievementId, Object metadata) {
                var query = APQuery.update(APDBDef.DeclareAchievement).values(APSqlSetPhraseSelector.Select(APDBDef.DeclareAchievement, metadata)).where((APDBDef.DeclareAchievement.DeclareAchievementId == declareAchievementId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long declareAchievementId) {
                var query = APQuery.delete(APDBDef.DeclareAchievement).where((APDBDef.DeclareAchievement.DeclareAchievementId == declareAchievementId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.DeclareAchievement).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.DeclareAchievement.Asterisk.Count()).from(APDBDef.DeclareAchievement).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual DeclareAchievement PrimaryGet(long declareAchievementId) {
                var query = APQuery.select(APDBDef.DeclareAchievement.Asterisk).from(APDBDef.DeclareAchievement).where((APDBDef.DeclareAchievement.DeclareAchievementId == declareAchievementId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.DeclareAchievement.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<DeclareAchievement> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.DeclareAchievement.Asterisk).from(APDBDef.DeclareAchievement);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.DeclareAchievement.DeclareAchievementId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.DeclareAchievement.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<DeclareAchievement> GetInitData() {
                return new List<DeclareAchievement>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<DeclareAchievement> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    DeclareAchievement data = list[i];
                    if ((PrimaryGet(data.DeclareAchievementId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报-科研成果 Dal
        /// </summary>
        public partial class DeclareAchievementDal : DeclareAchievementDalBase {
            
            public DeclareAchievementDal() {
            }
            
            public DeclareAchievementDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报-制度建设 DalBase
        /// </summary>
        public partial class DeclareOrgConstDalBase : APDal {
            
            public DeclareOrgConstDalBase() {
            }
            
            public DeclareOrgConstDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(DeclareOrgConst data) {
                if ((data.DeclareOrgConstId == 0)) {
                    data.DeclareOrgConstId = ((long)(GetNewId(APDBDef.DeclareOrgConst.DeclareOrgConstId)));
                }
                var query = APQuery.insert(APDBDef.DeclareOrgConst).values(APDBDef.DeclareOrgConst.DeclareOrgConstId.SetValue(data.DeclareOrgConstId), APDBDef.DeclareOrgConst.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareOrgConst.Content.SetValue(data.Content), APDBDef.DeclareOrgConst.Work.SetValue(data.Work), APDBDef.DeclareOrgConst.Remark.SetValue(data.Remark));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(DeclareOrgConst data) {
                var query = APQuery.update(APDBDef.DeclareOrgConst).values(APDBDef.DeclareOrgConst.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareOrgConst.Content.SetValue(data.Content), APDBDef.DeclareOrgConst.Work.SetValue(data.Work), APDBDef.DeclareOrgConst.Remark.SetValue(data.Remark)).where((APDBDef.DeclareOrgConst.DeclareOrgConstId == data.DeclareOrgConstId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long declareOrgConstId, Object metadata) {
                var query = APQuery.update(APDBDef.DeclareOrgConst).values(APSqlSetPhraseSelector.Select(APDBDef.DeclareOrgConst, metadata)).where((APDBDef.DeclareOrgConst.DeclareOrgConstId == declareOrgConstId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long declareOrgConstId) {
                var query = APQuery.delete(APDBDef.DeclareOrgConst).where((APDBDef.DeclareOrgConst.DeclareOrgConstId == declareOrgConstId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.DeclareOrgConst).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.DeclareOrgConst.Asterisk.Count()).from(APDBDef.DeclareOrgConst).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual DeclareOrgConst PrimaryGet(long declareOrgConstId) {
                var query = APQuery.select(APDBDef.DeclareOrgConst.Asterisk).from(APDBDef.DeclareOrgConst).where((APDBDef.DeclareOrgConst.DeclareOrgConstId == declareOrgConstId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.DeclareOrgConst.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<DeclareOrgConst> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.DeclareOrgConst.Asterisk).from(APDBDef.DeclareOrgConst);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.DeclareOrgConst.DeclareOrgConstId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.DeclareOrgConst.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<DeclareOrgConst> GetInitData() {
                return new List<DeclareOrgConst>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<DeclareOrgConst> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    DeclareOrgConst data = list[i];
                    if ((PrimaryGet(data.DeclareOrgConstId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报-制度建设 Dal
        /// </summary>
        public partial class DeclareOrgConstDal : DeclareOrgConstDalBase {
            
            public DeclareOrgConstDal() {
            }
            
            public DeclareOrgConstDal(APDatabase db) : 
                    base(db) {
            }
        }
    }
    
    /// <summary>
    /// APBplDef 是一个自动生成的具有 Partial 修饰的类，用于定义所有的 Bpl 类。你可以 添加同名的 Partial 类来扩充功能。
    /// </summary>
    public partial class APBplDef {
        
        /// <summary>
        /// 选项列表 BplBase
        /// </summary>
        public partial class PicklistBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Picklist data) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Picklist data) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long picklistId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistDal.UpdatePartial(picklistId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long picklistId) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistDal.PrimaryDelete(picklistId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Picklist PrimaryGet(long picklistId) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistDal.PrimaryGet(picklistId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Picklist> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Picklist> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Picklist> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Picklist> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 选项列表 Dal
        /// </summary>
        public partial class PicklistBpl : PicklistBplBase {
        }
        
        /// <summary>
        /// 选项列表项 BplBase
        /// </summary>
        public partial class PicklistItemBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(PicklistItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistItemDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(PicklistItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistItemDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long picklistItemId, long picklistId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistItemDal.UpdatePartial(picklistItemId, picklistId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long picklistItemId, long picklistId) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistItemDal.PrimaryDelete(picklistItemId, picklistId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistItemDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistItemDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static PicklistItem PrimaryGet(long picklistItemId, long picklistId) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistItemDal.PrimaryGet(picklistItemId, picklistId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<PicklistItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistItemDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<PicklistItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistItemDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<PicklistItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistItemDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<PicklistItem> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 选项列表项 Dal
        /// </summary>
        public partial class PicklistItemBpl : PicklistItemBplBase {
        }
        
        /// <summary>
        /// 学校基础数据表 BplBase
        /// </summary>
        public partial class School_InfoBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(School_Info data) {
                APDBDef db = new APDBDef();
                try {
                    db.School_InfoDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(School_Info data) {
                APDBDef db = new APDBDef();
                try {
                    db.School_InfoDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(string id, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.School_InfoDal.UpdatePartial(id, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(string id) {
                APDBDef db = new APDBDef();
                try {
                    db.School_InfoDal.PrimaryDelete(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.School_InfoDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.School_InfoDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static School_Info PrimaryGet(string id) {
                APDBDef db = new APDBDef();
                try {
                    return db.School_InfoDal.PrimaryGet(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<School_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.School_InfoDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<School_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.School_InfoDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<School_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.School_InfoDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<School_Info> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 学校基础数据表 Dal
        /// </summary>
        public partial class School_InfoBpl : School_InfoBplBase {
        }
        
        /// <summary>
        /// 教职工基础数据表 BplBase
        /// </summary>
        public partial class Staff_InfoBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Staff_Info data) {
                APDBDef db = new APDBDef();
                try {
                    db.Staff_InfoDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Staff_Info data) {
                APDBDef db = new APDBDef();
                try {
                    db.Staff_InfoDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(string id, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.Staff_InfoDal.UpdatePartial(id, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(string id) {
                APDBDef db = new APDBDef();
                try {
                    db.Staff_InfoDal.PrimaryDelete(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.Staff_InfoDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.Staff_InfoDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Staff_Info PrimaryGet(string id) {
                APDBDef db = new APDBDef();
                try {
                    return db.Staff_InfoDal.PrimaryGet(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Staff_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.Staff_InfoDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Staff_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.Staff_InfoDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Staff_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.Staff_InfoDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Staff_Info> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 教职工基础数据表 Dal
        /// </summary>
        public partial class Staff_InfoBpl : Staff_InfoBplBase {
        }
        
        /// <summary>
        /// 用户 BplBase
        /// </summary>
        public partial class BzUserBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(BzUser data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(BzUser data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long id, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserDal.UpdatePartial(id, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long id) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserDal.PrimaryDelete(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static BzUser PrimaryGet(long id) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserDal.PrimaryGet(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<BzUser> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 用户 Dal
        /// </summary>
        public partial class BzUserBpl : BzUserBplBase {
        }
        
        /// <summary>
        /// UserClaim BplBase
        /// </summary>
        public partial class BzUserClaimBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(BzUserClaim data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserClaimDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(BzUserClaim data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserClaimDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(int id, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserClaimDal.UpdatePartial(id, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(int id) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserClaimDal.PrimaryDelete(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserClaimDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserClaimDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static BzUserClaim PrimaryGet(int id) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserClaimDal.PrimaryGet(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserClaim> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserClaimDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserClaim> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserClaimDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserClaim> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserClaimDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<BzUserClaim> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// UserClaim Dal
        /// </summary>
        public partial class BzUserClaimBpl : BzUserClaimBplBase {
        }
        
        /// <summary>
        /// 用户简档 BplBase
        /// </summary>
        public partial class BzUserProfileBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(BzUserProfile data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserProfileDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(BzUserProfile data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserProfileDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long userId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserProfileDal.UpdatePartial(userId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long userId) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserProfileDal.PrimaryDelete(userId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserProfileDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserProfileDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static BzUserProfile PrimaryGet(long userId) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserProfileDal.PrimaryGet(userId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserProfileDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserProfileDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserProfileDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<BzUserProfile> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 用户简档 Dal
        /// </summary>
        public partial class BzUserProfileBpl : BzUserProfileBplBase {
        }
        
        /// <summary>
        /// 角色 BplBase
        /// </summary>
        public partial class BzRoleBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(BzRole data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzRoleDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(BzRole data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzRoleDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long id, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.BzRoleDal.UpdatePartial(id, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long id) {
                APDBDef db = new APDBDef();
                try {
                    db.BzRoleDal.PrimaryDelete(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.BzRoleDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzRoleDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static BzRole PrimaryGet(long id) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzRoleDal.PrimaryGet(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzRoleDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzRoleDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzRoleDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<BzRole> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 角色 Dal
        /// </summary>
        public partial class BzRoleBpl : BzRoleBplBase {
        }
        
        /// <summary>
        /// 用户角色 BplBase
        /// </summary>
        public partial class BzUserRoleBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(BzUserRole data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserRoleDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(BzUserRole data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserRoleDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long userRoleId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserRoleDal.UpdatePartial(userRoleId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long userRoleId) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserRoleDal.PrimaryDelete(userRoleId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserRoleDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserRoleDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static BzUserRole PrimaryGet(long userRoleId) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserRoleDal.PrimaryGet(userRoleId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserRoleDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserRoleDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserRoleDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<BzUserRole> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 用户角色 Dal
        /// </summary>
        public partial class BzUserRoleBpl : BzUserRoleBplBase {
        }
        
        /// <summary>
        /// 申报 BplBase
        /// </summary>
        public partial class DeclareBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Declare data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Declare data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long teacherId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareDal.UpdatePartial(teacherId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long teacherId) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareDal.PrimaryDelete(teacherId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Declare PrimaryGet(long teacherId) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareDal.PrimaryGet(teacherId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Declare> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Declare> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Declare> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Declare> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报 Dal
        /// </summary>
        public partial class DeclareBpl : DeclareBplBase {
        }
        
        /// <summary>
        /// 申报-简历 BplBase
        /// </summary>
        public partial class DeclareResumeBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(DeclareResume data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareResumeDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(DeclareResume data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareResumeDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long declareResumeId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareResumeDal.UpdatePartial(declareResumeId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long declareResumeId) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareResumeDal.PrimaryDelete(declareResumeId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareResumeDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareResumeDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static DeclareResume PrimaryGet(long declareResumeId) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareResumeDal.PrimaryGet(declareResumeId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareResume> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareResumeDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareResume> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareResumeDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareResume> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareResumeDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<DeclareResume> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报-简历 Dal
        /// </summary>
        public partial class DeclareResumeBpl : DeclareResumeBplBase {
        }
        
        /// <summary>
        /// 申报-内容 BplBase
        /// </summary>
        public partial class DeclareContentBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(DeclareContent data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareContentDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(DeclareContent data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareContentDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long declareContentId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareContentDal.UpdatePartial(declareContentId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long declareContentId) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareContentDal.PrimaryDelete(declareContentId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareContentDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareContentDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static DeclareContent PrimaryGet(long declareContentId) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareContentDal.PrimaryGet(declareContentId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareContentDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareContentDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareContentDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<DeclareContent> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报-内容 Dal
        /// </summary>
        public partial class DeclareContentBpl : DeclareContentBplBase {
        }
        
        /// <summary>
        /// 申报-活动 BplBase
        /// </summary>
        public partial class DeclareActiveBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(DeclareActive data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareActiveDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(DeclareActive data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareActiveDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long declareActiveId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareActiveDal.UpdatePartial(declareActiveId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long declareActiveId) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareActiveDal.PrimaryDelete(declareActiveId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareActiveDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareActiveDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static DeclareActive PrimaryGet(long declareActiveId) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareActiveDal.PrimaryGet(declareActiveId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareActiveDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareActiveDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareActiveDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<DeclareActive> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报-活动 Dal
        /// </summary>
        public partial class DeclareActiveBpl : DeclareActiveBplBase {
        }
        
        /// <summary>
        /// 申报-科研成果 BplBase
        /// </summary>
        public partial class DeclareAchievementBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(DeclareAchievement data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareAchievementDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(DeclareAchievement data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareAchievementDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long declareAchievementId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareAchievementDal.UpdatePartial(declareAchievementId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long declareAchievementId) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareAchievementDal.PrimaryDelete(declareAchievementId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareAchievementDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareAchievementDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static DeclareAchievement PrimaryGet(long declareAchievementId) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareAchievementDal.PrimaryGet(declareAchievementId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareAchievement> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareAchievementDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareAchievement> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareAchievementDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareAchievement> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareAchievementDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<DeclareAchievement> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报-科研成果 Dal
        /// </summary>
        public partial class DeclareAchievementBpl : DeclareAchievementBplBase {
        }
        
        /// <summary>
        /// 申报-制度建设 BplBase
        /// </summary>
        public partial class DeclareOrgConstBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(DeclareOrgConst data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareOrgConstDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(DeclareOrgConst data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareOrgConstDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long declareOrgConstId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareOrgConstDal.UpdatePartial(declareOrgConstId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long declareOrgConstId) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareOrgConstDal.PrimaryDelete(declareOrgConstId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareOrgConstDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareOrgConstDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static DeclareOrgConst PrimaryGet(long declareOrgConstId) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareOrgConstDal.PrimaryGet(declareOrgConstId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareOrgConst> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareOrgConstDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareOrgConst> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareOrgConstDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareOrgConst> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareOrgConstDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<DeclareOrgConst> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报-制度建设 Dal
        /// </summary>
        public partial class DeclareOrgConstBpl : DeclareOrgConstBplBase {
        }
    }
    
    /// <summary>
    /// 选项列表 Base
    /// </summary>
    [Serializable()]
    public abstract partial class PicklistBase {
        
        /// <summary>
        /// PicklistId
        /// </summary>
        private long _picklistId;
        
        /// <summary>
        /// InnerKey
        /// </summary>
        private string _innerKey = string.Empty;
        
        /// <summary>
        /// Name
        /// </summary>
        private string _name = string.Empty;
        
        /// <summary>
        /// Adjustable
        /// </summary>
        private bool _adjustable;
        
        /// <summary>
        /// Strengthen
        /// </summary>
        private bool _strengthen;
        
        /// <summary>
        /// Description
        /// </summary>
        private string _description = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public PicklistBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public PicklistBase(long picklistId, string innerKey, string name, bool adjustable, bool strengthen, string description) {
            _picklistId = picklistId;
            _innerKey = innerKey;
            _name = name;
            _adjustable = adjustable;
            _strengthen = strengthen;
            _description = description;
        }
        
        /// <summary>
        /// PicklistId
        /// </summary>
        public virtual long PicklistId {
            get {
                return _picklistId;
            }
            set {
                _picklistId = value;
            }
        }
        
        /// <summary>
        /// PicklistId APColumnDef
        /// </summary>
        public static Int64APColumnDef PicklistIdDef {
            get {
                return APDBDef.Picklist.PicklistId;
            }
        }
        
        /// <summary>
        /// InnerKey
        /// </summary>
        [StringLength(40)]
        public virtual string InnerKey {
            get {
                return _innerKey;
            }
            set {
                _innerKey = value;
            }
        }
        
        /// <summary>
        /// InnerKey APColumnDef
        /// </summary>
        public static StringAPColumnDef InnerKeyDef {
            get {
                return APDBDef.Picklist.InnerKey;
            }
        }
        
        /// <summary>
        /// Name
        /// </summary>
        [StringLength(255)]
        public virtual string Name {
            get {
                return _name;
            }
            set {
                _name = value;
            }
        }
        
        /// <summary>
        /// Name APColumnDef
        /// </summary>
        public static StringAPColumnDef NameDef {
            get {
                return APDBDef.Picklist.Name;
            }
        }
        
        /// <summary>
        /// Adjustable
        /// </summary>
        public virtual bool Adjustable {
            get {
                return _adjustable;
            }
            set {
                _adjustable = value;
            }
        }
        
        /// <summary>
        /// Adjustable APColumnDef
        /// </summary>
        public static BooleanAPColumnDef AdjustableDef {
            get {
                return APDBDef.Picklist.Adjustable;
            }
        }
        
        /// <summary>
        /// Strengthen
        /// </summary>
        public virtual bool Strengthen {
            get {
                return _strengthen;
            }
            set {
                _strengthen = value;
            }
        }
        
        /// <summary>
        /// Strengthen APColumnDef
        /// </summary>
        public static BooleanAPColumnDef StrengthenDef {
            get {
                return APDBDef.Picklist.Strengthen;
            }
        }
        
        /// <summary>
        /// Description
        /// </summary>
        [StringLength(1000)]
        public virtual string Description {
            get {
                return _description;
            }
            set {
                _description = value;
            }
        }
        
        /// <summary>
        /// Description APColumnDef
        /// </summary>
        public static StringAPColumnDef DescriptionDef {
            get {
                return APDBDef.Picklist.Description;
            }
        }
        
        /// <summary>
        /// PicklistTableDef APTableDef
        /// </summary>
        public static APDBDef.PicklistTableDef TableDef {
            get {
                return APDBDef.Picklist;
            }
        }
        
        /// <summary>
        /// PicklistTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Picklist.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Picklist data) {
            PicklistId = data.PicklistId;
            InnerKey = data.InnerKey;
            Name = data.Name;
            Adjustable = data.Adjustable;
            Strengthen = data.Strengthen;
            Description = data.Description;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Picklist data) {
            if ((PicklistId != data.PicklistId)) {
                return false;
            }
            if ((InnerKey != data.InnerKey)) {
                return false;
            }
            if ((Name != data.Name)) {
                return false;
            }
            if ((Adjustable != data.Adjustable)) {
                return false;
            }
            if ((Strengthen != data.Strengthen)) {
                return false;
            }
            if ((Description != data.Description)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.PicklistBpl.Insert(((Picklist)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.PicklistBpl.Update(((Picklist)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long picklistId, Object metadata) {
            APBplDef.PicklistBpl.UpdatePartial(picklistId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long picklistId) {
            APBplDef.PicklistBpl.PrimaryDelete(picklistId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.PicklistBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.PicklistBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Picklist PrimaryGet(long picklistId) {
            return APBplDef.PicklistBpl.PrimaryGet(picklistId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Picklist> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.PicklistBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Picklist> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.PicklistBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Picklist> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.PicklistBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Picklist> GetAll() {
            return APBplDef.PicklistBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 选项列表
    /// </summary>
    [Serializable()]
    public partial class Picklist : PicklistBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Picklist() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Picklist(long picklistId, string innerKey, string name, bool adjustable, bool strengthen, string description) : 
                base(picklistId, innerKey, name, adjustable, strengthen, description) {
        }
    }
    
    /// <summary>
    /// 选项列表项 Base
    /// </summary>
    [Serializable()]
    public abstract partial class PicklistItemBase {
        
        /// <summary>
        /// PicklistItemId
        /// </summary>
        private long _picklistItemId;
        
        /// <summary>
        /// Associated with PickList.PickListId
        /// </summary>
        private long _picklistId;
        
        /// <summary>
        /// Name
        /// </summary>
        private string _name = string.Empty;
        
        /// <summary>
        /// StrengthenValue
        /// </summary>
        private long _strengthenValue;
        
        /// <summary>
        /// Code
        /// </summary>
        private string _code = string.Empty;
        
        /// <summary>
        /// IsDefault
        /// </summary>
        private bool _isDefault;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public PicklistItemBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public PicklistItemBase(long picklistItemId, long picklistId, string name, long strengthenValue, string code, bool isDefault) {
            _picklistItemId = picklistItemId;
            _picklistId = picklistId;
            _name = name;
            _strengthenValue = strengthenValue;
            _code = code;
            _isDefault = isDefault;
        }
        
        /// <summary>
        /// PicklistItemId
        /// </summary>
        public virtual long PicklistItemId {
            get {
                return _picklistItemId;
            }
            set {
                _picklistItemId = value;
            }
        }
        
        /// <summary>
        /// PicklistItemId APColumnDef
        /// </summary>
        public static Int64APColumnDef PicklistItemIdDef {
            get {
                return APDBDef.PicklistItem.PicklistItemId;
            }
        }
        
        /// <summary>
        /// Associated with PickList.PickListId
        /// </summary>
        public virtual long PicklistId {
            get {
                return _picklistId;
            }
            set {
                _picklistId = value;
            }
        }
        
        /// <summary>
        /// Associated with PickList.PickListId APColumnDef
        /// </summary>
        public static Int64APColumnDef PicklistIdDef {
            get {
                return APDBDef.PicklistItem.PicklistId;
            }
        }
        
        /// <summary>
        /// Name
        /// </summary>
        [StringLength(255)]
        public virtual string Name {
            get {
                return _name;
            }
            set {
                _name = value;
            }
        }
        
        /// <summary>
        /// Name APColumnDef
        /// </summary>
        public static StringAPColumnDef NameDef {
            get {
                return APDBDef.PicklistItem.Name;
            }
        }
        
        /// <summary>
        /// StrengthenValue
        /// </summary>
        public virtual long StrengthenValue {
            get {
                return _strengthenValue;
            }
            set {
                _strengthenValue = value;
            }
        }
        
        /// <summary>
        /// StrengthenValue APColumnDef
        /// </summary>
        public static Int64APColumnDef StrengthenValueDef {
            get {
                return APDBDef.PicklistItem.StrengthenValue;
            }
        }
        
        /// <summary>
        /// Code
        /// </summary>
        [StringLength(100)]
        public virtual string Code {
            get {
                return _code;
            }
            set {
                _code = value;
            }
        }
        
        /// <summary>
        /// Code APColumnDef
        /// </summary>
        public static StringAPColumnDef CodeDef {
            get {
                return APDBDef.PicklistItem.Code;
            }
        }
        
        /// <summary>
        /// IsDefault
        /// </summary>
        public virtual bool IsDefault {
            get {
                return _isDefault;
            }
            set {
                _isDefault = value;
            }
        }
        
        /// <summary>
        /// IsDefault APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsDefaultDef {
            get {
                return APDBDef.PicklistItem.IsDefault;
            }
        }
        
        /// <summary>
        /// PicklistItemTableDef APTableDef
        /// </summary>
        public static APDBDef.PicklistItemTableDef TableDef {
            get {
                return APDBDef.PicklistItem;
            }
        }
        
        /// <summary>
        /// PicklistItemTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.PicklistItem.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(PicklistItem data) {
            PicklistItemId = data.PicklistItemId;
            PicklistId = data.PicklistId;
            Name = data.Name;
            StrengthenValue = data.StrengthenValue;
            Code = data.Code;
            IsDefault = data.IsDefault;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(PicklistItem data) {
            if ((PicklistItemId != data.PicklistItemId)) {
                return false;
            }
            if ((PicklistId != data.PicklistId)) {
                return false;
            }
            if ((Name != data.Name)) {
                return false;
            }
            if ((StrengthenValue != data.StrengthenValue)) {
                return false;
            }
            if ((Code != data.Code)) {
                return false;
            }
            if ((IsDefault != data.IsDefault)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.PicklistItemBpl.Insert(((PicklistItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.PicklistItemBpl.Update(((PicklistItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long picklistItemId, long picklistId, Object metadata) {
            APBplDef.PicklistItemBpl.UpdatePartial(picklistItemId, picklistId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long picklistItemId, long picklistId) {
            APBplDef.PicklistItemBpl.PrimaryDelete(picklistItemId, picklistId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.PicklistItemBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.PicklistItemBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static PicklistItem PrimaryGet(long picklistItemId, long picklistId) {
            return APBplDef.PicklistItemBpl.PrimaryGet(picklistItemId, picklistId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<PicklistItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.PicklistItemBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<PicklistItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.PicklistItemBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<PicklistItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.PicklistItemBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<PicklistItem> GetAll() {
            return APBplDef.PicklistItemBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 选项列表项
    /// </summary>
    [Serializable()]
    public partial class PicklistItem : PicklistItemBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public PicklistItem() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public PicklistItem(long picklistItemId, long picklistId, string name, long strengthenValue, string code, bool isDefault) : 
                base(picklistItemId, picklistId, name, strengthenValue, code, isDefault) {
        }
    }
    
    /// <summary>
    /// 学校基础数据表 Base
    /// </summary>
    [Serializable()]
    public abstract partial class School_InfoBase {
        
        /// <summary>
        /// id
        /// </summary>
        private string _id = string.Empty;
        
        /// <summary>
        /// xxmc
        /// </summary>
        private string _xxmc = string.Empty;
        
        /// <summary>
        /// xxdm
        /// </summary>
        private string _xxdm = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public School_InfoBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public School_InfoBase(string id, string xxmc, string xxdm) {
            _id = id;
            _xxmc = xxmc;
            _xxdm = xxdm;
        }
        
        /// <summary>
        /// id
        /// </summary>
        [Display(Name="学校ID")]
        [StringLength(36)]
        public virtual string id {
            get {
                return _id;
            }
            set {
                _id = value;
            }
        }
        
        /// <summary>
        /// id APColumnDef
        /// </summary>
        public static StringAPColumnDef idDef {
            get {
                return APDBDef.School_Info.id;
            }
        }
        
        /// <summary>
        /// xxmc
        /// </summary>
        [Display(Name="学校名称")]
        [StringLength(60)]
        public virtual string xxmc {
            get {
                return _xxmc;
            }
            set {
                _xxmc = value;
            }
        }
        
        /// <summary>
        /// xxmc APColumnDef
        /// </summary>
        public static StringAPColumnDef xxmcDef {
            get {
                return APDBDef.School_Info.xxmc;
            }
        }
        
        /// <summary>
        /// xxdm
        /// </summary>
        [Display(Name="学校代码")]
        [StringLength(10)]
        public virtual string xxdm {
            get {
                return _xxdm;
            }
            set {
                _xxdm = value;
            }
        }
        
        /// <summary>
        /// xxdm APColumnDef
        /// </summary>
        public static StringAPColumnDef xxdmDef {
            get {
                return APDBDef.School_Info.xxdm;
            }
        }
        
        /// <summary>
        /// School_InfoTableDef APTableDef
        /// </summary>
        public static APDBDef.School_InfoTableDef TableDef {
            get {
                return APDBDef.School_Info;
            }
        }
        
        /// <summary>
        /// School_InfoTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.School_Info.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(School_Info data) {
            id = data.id;
            xxmc = data.xxmc;
            xxdm = data.xxdm;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(School_Info data) {
            if ((id != data.id)) {
                return false;
            }
            if ((xxmc != data.xxmc)) {
                return false;
            }
            if ((xxdm != data.xxdm)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.School_InfoBpl.Insert(((School_Info)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.School_InfoBpl.Update(((School_Info)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(string id, Object metadata) {
            APBplDef.School_InfoBpl.UpdatePartial(id, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(string id) {
            APBplDef.School_InfoBpl.PrimaryDelete(id);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.School_InfoBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.School_InfoBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static School_Info PrimaryGet(string id) {
            return APBplDef.School_InfoBpl.PrimaryGet(id);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<School_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.School_InfoBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<School_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.School_InfoBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<School_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.School_InfoBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<School_Info> GetAll() {
            return APBplDef.School_InfoBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 学校基础数据表
    /// </summary>
    [Serializable()]
    public partial class School_Info : School_InfoBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public School_Info() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public School_Info(string id, string xxmc, string xxdm) : 
                base(id, xxmc, xxdm) {
        }
    }
    
    /// <summary>
    /// 教职工基础数据表 Base
    /// </summary>
    [Serializable()]
    public abstract partial class Staff_InfoBase {
        
        /// <summary>
        /// id
        /// </summary>
        private string _id = string.Empty;
        
        /// <summary>
        /// yhm
        /// </summary>
        private string _yhm;
        
        /// <summary>
        /// xxdm
        /// </summary>
        private string _xxdm;
        
        /// <summary>
        /// xm
        /// </summary>
        private string _xm;
        
        /// <summary>
        /// sfzjh
        /// </summary>
        private string _sfzjh;
        
        /// <summary>
        /// sxh
        /// </summary>
        private string _sxh;
        
        /// <summary>
        /// csrq
        /// </summary>
        private string _csrq;
        
        /// <summary>
        /// xb
        /// </summary>
        private string _xb;
        
        /// <summary>
        /// xl
        /// </summary>
        private string _xl;
        
        /// <summary>
        /// xw
        /// </summary>
        private string _xw;
        
        /// <summary>
        /// byxx
        /// </summary>
        private string _byxx;
        
        /// <summary>
        /// zy
        /// </summary>
        private string _zy;
        
        /// <summary>
        /// zw
        /// </summary>
        private string _zw;
        
        /// <summary>
        /// zc
        /// </summary>
        private string _zc;
        
        /// <summary>
        /// rjxk
        /// </summary>
        private string _rjxk;
        
        /// <summary>
        /// dw
        /// </summary>
        private string _dw;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Staff_InfoBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Staff_InfoBase(
                    string id, 
                    string yhm, 
                    string xxdm, 
                    string xm, 
                    string sfzjh, 
                    string sxh, 
                    string csrq, 
                    string xb, 
                    string xl, 
                    string xw, 
                    string byxx, 
                    string zy, 
                    string zw, 
                    string zc, 
                    string rjxk, 
                    string dw) {
            _id = id;
            _yhm = yhm;
            _xxdm = xxdm;
            _xm = xm;
            _sfzjh = sfzjh;
            _sxh = sxh;
            _csrq = csrq;
            _xb = xb;
            _xl = xl;
            _xw = xw;
            _byxx = byxx;
            _zy = zy;
            _zw = zw;
            _zc = zc;
            _rjxk = rjxk;
            _dw = dw;
        }
        
        /// <summary>
        /// id
        /// </summary>
        [Display(Name="教职工ID")]
        [StringLength(36)]
        public virtual string id {
            get {
                return _id;
            }
            set {
                _id = value;
            }
        }
        
        /// <summary>
        /// id APColumnDef
        /// </summary>
        public static StringAPColumnDef idDef {
            get {
                return APDBDef.Staff_Info.id;
            }
        }
        
        /// <summary>
        /// yhm
        /// </summary>
        [Display(Name="用户登录名")]
        [StringLength(36)]
        public virtual string yhm {
            get {
                return _yhm;
            }
            set {
                _yhm = value;
            }
        }
        
        /// <summary>
        /// yhm APColumnDef
        /// </summary>
        public static StringAPColumnDef yhmDef {
            get {
                return APDBDef.Staff_Info.yhm;
            }
        }
        
        /// <summary>
        /// xxdm
        /// </summary>
        [Display(Name="学校代码")]
        [StringLength(10)]
        public virtual string xxdm {
            get {
                return _xxdm;
            }
            set {
                _xxdm = value;
            }
        }
        
        /// <summary>
        /// xxdm APColumnDef
        /// </summary>
        public static StringAPColumnDef xxdmDef {
            get {
                return APDBDef.Staff_Info.xxdm;
            }
        }
        
        /// <summary>
        /// xm
        /// </summary>
        [Display(Name="真实姓名")]
        [StringLength(50)]
        public virtual string xm {
            get {
                return _xm;
            }
            set {
                _xm = value;
            }
        }
        
        /// <summary>
        /// xm APColumnDef
        /// </summary>
        public static StringAPColumnDef xmDef {
            get {
                return APDBDef.Staff_Info.xm;
            }
        }
        
        /// <summary>
        /// sfzjh
        /// </summary>
        [Display(Name="身份证件号")]
        [StringLength(50)]
        public virtual string sfzjh {
            get {
                return _sfzjh;
            }
            set {
                _sfzjh = value;
            }
        }
        
        /// <summary>
        /// sfzjh APColumnDef
        /// </summary>
        public static StringAPColumnDef sfzjhDef {
            get {
                return APDBDef.Staff_Info.sfzjh;
            }
        }
        
        /// <summary>
        /// sxh
        /// </summary>
        [Display(Name="师训号")]
        [StringLength(20)]
        public virtual string sxh {
            get {
                return _sxh;
            }
            set {
                _sxh = value;
            }
        }
        
        /// <summary>
        /// sxh APColumnDef
        /// </summary>
        public static StringAPColumnDef sxhDef {
            get {
                return APDBDef.Staff_Info.sxh;
            }
        }
        
        /// <summary>
        /// csrq
        /// </summary>
        [Display(Name="出生日期")]
        [StringLength(8)]
        public virtual string csrq {
            get {
                return _csrq;
            }
            set {
                _csrq = value;
            }
        }
        
        /// <summary>
        /// csrq APColumnDef
        /// </summary>
        public static StringAPColumnDef csrqDef {
            get {
                return APDBDef.Staff_Info.csrq;
            }
        }
        
        /// <summary>
        /// xb
        /// </summary>
        [Display(Name="性别ID")]
        [StringLength(1)]
        public virtual string xb {
            get {
                return _xb;
            }
            set {
                _xb = value;
            }
        }
        
        /// <summary>
        /// xb APColumnDef
        /// </summary>
        public static StringAPColumnDef xbDef {
            get {
                return APDBDef.Staff_Info.xb;
            }
        }
        
        /// <summary>
        /// xl
        /// </summary>
        [Display(Name="学历ID")]
        [StringLength(2)]
        public virtual string xl {
            get {
                return _xl;
            }
            set {
                _xl = value;
            }
        }
        
        /// <summary>
        /// xl APColumnDef
        /// </summary>
        public static StringAPColumnDef xlDef {
            get {
                return APDBDef.Staff_Info.xl;
            }
        }
        
        /// <summary>
        /// xw
        /// </summary>
        [Display(Name="学位ID")]
        [StringLength(3)]
        public virtual string xw {
            get {
                return _xw;
            }
            set {
                _xw = value;
            }
        }
        
        /// <summary>
        /// xw APColumnDef
        /// </summary>
        public static StringAPColumnDef xwDef {
            get {
                return APDBDef.Staff_Info.xw;
            }
        }
        
        /// <summary>
        /// byxx
        /// </summary>
        [Display(Name="毕业学校")]
        [StringLength(100)]
        public virtual string byxx {
            get {
                return _byxx;
            }
            set {
                _byxx = value;
            }
        }
        
        /// <summary>
        /// byxx APColumnDef
        /// </summary>
        public static StringAPColumnDef byxxDef {
            get {
                return APDBDef.Staff_Info.byxx;
            }
        }
        
        /// <summary>
        /// zy
        /// </summary>
        [Display(Name="专业")]
        [StringLength(50)]
        public virtual string zy {
            get {
                return _zy;
            }
            set {
                _zy = value;
            }
        }
        
        /// <summary>
        /// zy APColumnDef
        /// </summary>
        public static StringAPColumnDef zyDef {
            get {
                return APDBDef.Staff_Info.zy;
            }
        }
        
        /// <summary>
        /// zw
        /// </summary>
        [Display(Name="职务ID")]
        [StringLength(3)]
        public virtual string zw {
            get {
                return _zw;
            }
            set {
                _zw = value;
            }
        }
        
        /// <summary>
        /// zw APColumnDef
        /// </summary>
        public static StringAPColumnDef zwDef {
            get {
                return APDBDef.Staff_Info.zw;
            }
        }
        
        /// <summary>
        /// zc
        /// </summary>
        [Display(Name="职称ID")]
        [StringLength(1)]
        public virtual string zc {
            get {
                return _zc;
            }
            set {
                _zc = value;
            }
        }
        
        /// <summary>
        /// zc APColumnDef
        /// </summary>
        public static StringAPColumnDef zcDef {
            get {
                return APDBDef.Staff_Info.zc;
            }
        }
        
        /// <summary>
        /// rjxk
        /// </summary>
        [Display(Name="任教学科ID")]
        [StringLength(2)]
        public virtual string rjxk {
            get {
                return _rjxk;
            }
            set {
                _rjxk = value;
            }
        }
        
        /// <summary>
        /// rjxk APColumnDef
        /// </summary>
        public static StringAPColumnDef rjxkDef {
            get {
                return APDBDef.Staff_Info.rjxk;
            }
        }
        
        /// <summary>
        /// dw
        /// </summary>
        [Display(Name="单位")]
        [StringLength(800)]
        public virtual string dw {
            get {
                return _dw;
            }
            set {
                _dw = value;
            }
        }
        
        /// <summary>
        /// dw APColumnDef
        /// </summary>
        public static StringAPColumnDef dwDef {
            get {
                return APDBDef.Staff_Info.dw;
            }
        }
        
        /// <summary>
        /// Staff_InfoTableDef APTableDef
        /// </summary>
        public static APDBDef.Staff_InfoTableDef TableDef {
            get {
                return APDBDef.Staff_Info;
            }
        }
        
        /// <summary>
        /// Staff_InfoTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Staff_Info.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Staff_Info data) {
            id = data.id;
            yhm = data.yhm;
            xxdm = data.xxdm;
            xm = data.xm;
            sfzjh = data.sfzjh;
            sxh = data.sxh;
            csrq = data.csrq;
            xb = data.xb;
            xl = data.xl;
            xw = data.xw;
            byxx = data.byxx;
            zy = data.zy;
            zw = data.zw;
            zc = data.zc;
            rjxk = data.rjxk;
            dw = data.dw;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Staff_Info data) {
            if ((id != data.id)) {
                return false;
            }
            if ((yhm != data.yhm)) {
                return false;
            }
            if ((xxdm != data.xxdm)) {
                return false;
            }
            if ((xm != data.xm)) {
                return false;
            }
            if ((sfzjh != data.sfzjh)) {
                return false;
            }
            if ((sxh != data.sxh)) {
                return false;
            }
            if ((csrq != data.csrq)) {
                return false;
            }
            if ((xb != data.xb)) {
                return false;
            }
            if ((xl != data.xl)) {
                return false;
            }
            if ((xw != data.xw)) {
                return false;
            }
            if ((byxx != data.byxx)) {
                return false;
            }
            if ((zy != data.zy)) {
                return false;
            }
            if ((zw != data.zw)) {
                return false;
            }
            if ((zc != data.zc)) {
                return false;
            }
            if ((rjxk != data.rjxk)) {
                return false;
            }
            if ((dw != data.dw)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.Staff_InfoBpl.Insert(((Staff_Info)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.Staff_InfoBpl.Update(((Staff_Info)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(string id, Object metadata) {
            APBplDef.Staff_InfoBpl.UpdatePartial(id, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(string id) {
            APBplDef.Staff_InfoBpl.PrimaryDelete(id);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.Staff_InfoBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.Staff_InfoBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Staff_Info PrimaryGet(string id) {
            return APBplDef.Staff_InfoBpl.PrimaryGet(id);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Staff_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.Staff_InfoBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Staff_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.Staff_InfoBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Staff_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.Staff_InfoBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Staff_Info> GetAll() {
            return APBplDef.Staff_InfoBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 教职工基础数据表
    /// </summary>
    [Serializable()]
    public partial class Staff_Info : Staff_InfoBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Staff_Info() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Staff_Info(
                    string id, 
                    string yhm, 
                    string xxdm, 
                    string xm, 
                    string sfzjh, 
                    string sxh, 
                    string csrq, 
                    string xb, 
                    string xl, 
                    string xw, 
                    string byxx, 
                    string zy, 
                    string zw, 
                    string zc, 
                    string rjxk, 
                    string dw) : 
                base(id, yhm, xxdm, xm, sfzjh, sxh, csrq, xb, xl, xw, byxx, zy, zw, zc, rjxk, dw) {
        }
    }
    
    /// <summary>
    /// 用户 Base
    /// </summary>
    [Serializable()]
    public abstract partial class BzUserBase : IdentityUser<long> {
        
        /// <summary>
        /// UserId
        /// </summary>
        private long _id;
        
        /// <summary>
        /// UserName
        /// </summary>
        private string _userName = string.Empty;
        
        /// <summary>
        /// PasswordHash
        /// </summary>
        private string _passwordHash = string.Empty;
        
        /// <summary>
        /// SecurityStamp
        /// </summary>
        private string _securityStamp = string.Empty;
        
        /// <summary>
        /// 尝试实现用户名或邮箱双模式登录
        /// </summary>
        private string _email = string.Empty;
        
        /// <summary>
        /// EmailConfirmed
        /// </summary>
        private bool _emailConfirmed;
        
        /// <summary>
        /// 为短信服务预留
        /// </summary>
        private string _phoneNumber = string.Empty;
        
        /// <summary>
        /// PhoneNumberConfirmed
        /// </summary>
        private bool _phoneNumberConfirmed;
        
        /// <summary>
        /// TwoFactorEnabled
        /// </summary>
        private bool _twoFactorEnabled;
        
        /// <summary>
        /// LockoutEndDtc
        /// </summary>
        private System.Nullable<System.DateTime> _lockoutEndDtc;
        
        /// <summary>
        /// LockoutEnabled
        /// </summary>
        private bool _lockoutEnabled;
        
        /// <summary>
        /// AccessFailedCount
        /// </summary>
        private int _accessFailedCount;
        
        /// <summary>
        /// Actived
        /// </summary>
        private bool _actived;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUserBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUserBase(long id, string userName, string passwordHash, string securityStamp, string email, bool emailConfirmed, string phoneNumber, bool phoneNumberConfirmed, bool twoFactorEnabled, System.Nullable<System.DateTime> lockoutEndDtc, bool lockoutEnabled, int accessFailedCount, bool actived) {
            _id = id;
            _userName = userName;
            _passwordHash = passwordHash;
            _securityStamp = securityStamp;
            _email = email;
            _emailConfirmed = emailConfirmed;
            _phoneNumber = phoneNumber;
            _phoneNumberConfirmed = phoneNumberConfirmed;
            _twoFactorEnabled = twoFactorEnabled;
            _lockoutEndDtc = lockoutEndDtc;
            _lockoutEnabled = lockoutEnabled;
            _accessFailedCount = accessFailedCount;
            _actived = actived;
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        [Display(Name="用户ID")]
        public override long Id {
            get {
                return _id;
            }
            set {
                _id = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static Int64APColumnDef IdDef {
            get {
                return APDBDef.BzUser.Id;
            }
        }
        
        /// <summary>
        /// UserName
        /// </summary>
        [Display(Name="用户名")]
        [Required()]
        [StringLength(255)]
        public override string UserName {
            get {
                return _userName;
            }
            set {
                _userName = value;
            }
        }
        
        /// <summary>
        /// UserName APColumnDef
        /// </summary>
        public static StringAPColumnDef UserNameDef {
            get {
                return APDBDef.BzUser.UserName;
            }
        }
        
        /// <summary>
        /// PasswordHash
        /// </summary>
        [Display(Name="密码哈希")]
        [StringLength(255)]
        public override string PasswordHash {
            get {
                return _passwordHash;
            }
            set {
                _passwordHash = value;
            }
        }
        
        /// <summary>
        /// PasswordHash APColumnDef
        /// </summary>
        public static StringAPColumnDef PasswordHashDef {
            get {
                return APDBDef.BzUser.PasswordHash;
            }
        }
        
        /// <summary>
        /// SecurityStamp
        /// </summary>
        [Display(Name="Salt")]
        [StringLength(255)]
        public override string SecurityStamp {
            get {
                return _securityStamp;
            }
            set {
                _securityStamp = value;
            }
        }
        
        /// <summary>
        /// SecurityStamp APColumnDef
        /// </summary>
        public static StringAPColumnDef SecurityStampDef {
            get {
                return APDBDef.BzUser.SecurityStamp;
            }
        }
        
        /// <summary>
        /// 尝试实现用户名或邮箱双模式登录
        /// </summary>
        [Display(Name="电子邮箱")]
        [StringLength(255)]
        public override string Email {
            get {
                return _email;
            }
            set {
                _email = value;
            }
        }
        
        /// <summary>
        /// 尝试实现用户名或邮箱双模式登录 APColumnDef
        /// </summary>
        public static StringAPColumnDef EmailDef {
            get {
                return APDBDef.BzUser.Email;
            }
        }
        
        /// <summary>
        /// EmailConfirmed
        /// </summary>
        [Display(Name="电子邮箱确认")]
        public override bool EmailConfirmed {
            get {
                return _emailConfirmed;
            }
            set {
                _emailConfirmed = value;
            }
        }
        
        /// <summary>
        /// EmailConfirmed APColumnDef
        /// </summary>
        public static BooleanAPColumnDef EmailConfirmedDef {
            get {
                return APDBDef.BzUser.EmailConfirmed;
            }
        }
        
        /// <summary>
        /// 为短信服务预留
        /// </summary>
        [Display(Name="电话")]
        [StringLength(255)]
        public override string PhoneNumber {
            get {
                return _phoneNumber;
            }
            set {
                _phoneNumber = value;
            }
        }
        
        /// <summary>
        /// 为短信服务预留 APColumnDef
        /// </summary>
        public static StringAPColumnDef PhoneNumberDef {
            get {
                return APDBDef.BzUser.PhoneNumber;
            }
        }
        
        /// <summary>
        /// PhoneNumberConfirmed
        /// </summary>
        [Display(Name="电话确认")]
        public override bool PhoneNumberConfirmed {
            get {
                return _phoneNumberConfirmed;
            }
            set {
                _phoneNumberConfirmed = value;
            }
        }
        
        /// <summary>
        /// PhoneNumberConfirmed APColumnDef
        /// </summary>
        public static BooleanAPColumnDef PhoneNumberConfirmedDef {
            get {
                return APDBDef.BzUser.PhoneNumberConfirmed;
            }
        }
        
        /// <summary>
        /// TwoFactorEnabled
        /// </summary>
        [Display(Name="双模式")]
        public override bool TwoFactorEnabled {
            get {
                return _twoFactorEnabled;
            }
            set {
                _twoFactorEnabled = value;
            }
        }
        
        /// <summary>
        /// TwoFactorEnabled APColumnDef
        /// </summary>
        public static BooleanAPColumnDef TwoFactorEnabledDef {
            get {
                return APDBDef.BzUser.TwoFactorEnabled;
            }
        }
        
        /// <summary>
        /// LockoutEndDtc
        /// </summary>
        [Display(Name="锁定时间")]
        public virtual System.Nullable<System.DateTime> LockoutEndDtc {
            get {
                return _lockoutEndDtc;
            }
            set {
                _lockoutEndDtc = value;
            }
        }
        
        /// <summary>
        /// LockoutEndDtc APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef LockoutEndDtcDef {
            get {
                return APDBDef.BzUser.LockoutEndDtc;
            }
        }
        
        /// <summary>
        /// LockoutEnabled
        /// </summary>
        [Display(Name="锁定")]
        public override bool LockoutEnabled {
            get {
                return _lockoutEnabled;
            }
            set {
                _lockoutEnabled = value;
            }
        }
        
        /// <summary>
        /// LockoutEnabled APColumnDef
        /// </summary>
        public static BooleanAPColumnDef LockoutEnabledDef {
            get {
                return APDBDef.BzUser.LockoutEnabled;
            }
        }
        
        /// <summary>
        /// AccessFailedCount
        /// </summary>
        [Display(Name="错误次数")]
        public override int AccessFailedCount {
            get {
                return _accessFailedCount;
            }
            set {
                _accessFailedCount = value;
            }
        }
        
        /// <summary>
        /// AccessFailedCount APColumnDef
        /// </summary>
        public static Int32APColumnDef AccessFailedCountDef {
            get {
                return APDBDef.BzUser.AccessFailedCount;
            }
        }
        
        /// <summary>
        /// Actived
        /// </summary>
        [Display(Name="有效")]
        public virtual bool Actived {
            get {
                return _actived;
            }
            set {
                _actived = value;
            }
        }
        
        /// <summary>
        /// Actived APColumnDef
        /// </summary>
        public static BooleanAPColumnDef ActivedDef {
            get {
                return APDBDef.BzUser.Actived;
            }
        }
        
        /// <summary>
        /// BzUserTableDef APTableDef
        /// </summary>
        public static APDBDef.BzUserTableDef TableDef {
            get {
                return APDBDef.BzUser;
            }
        }
        
        /// <summary>
        /// BzUserTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.BzUser.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(BzUser data) {
            Id = data.Id;
            UserName = data.UserName;
            PasswordHash = data.PasswordHash;
            SecurityStamp = data.SecurityStamp;
            Email = data.Email;
            EmailConfirmed = data.EmailConfirmed;
            PhoneNumber = data.PhoneNumber;
            PhoneNumberConfirmed = data.PhoneNumberConfirmed;
            TwoFactorEnabled = data.TwoFactorEnabled;
            LockoutEndDtc = data.LockoutEndDtc;
            LockoutEnabled = data.LockoutEnabled;
            AccessFailedCount = data.AccessFailedCount;
            Actived = data.Actived;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(BzUser data) {
            if ((Id != data.Id)) {
                return false;
            }
            if ((UserName != data.UserName)) {
                return false;
            }
            if ((PasswordHash != data.PasswordHash)) {
                return false;
            }
            if ((SecurityStamp != data.SecurityStamp)) {
                return false;
            }
            if ((Email != data.Email)) {
                return false;
            }
            if ((EmailConfirmed != data.EmailConfirmed)) {
                return false;
            }
            if ((PhoneNumber != data.PhoneNumber)) {
                return false;
            }
            if ((PhoneNumberConfirmed != data.PhoneNumberConfirmed)) {
                return false;
            }
            if ((TwoFactorEnabled != data.TwoFactorEnabled)) {
                return false;
            }
            if ((LockoutEndDtc != data.LockoutEndDtc)) {
                return false;
            }
            if ((LockoutEnabled != data.LockoutEnabled)) {
                return false;
            }
            if ((AccessFailedCount != data.AccessFailedCount)) {
                return false;
            }
            if ((Actived != data.Actived)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.BzUserBpl.Insert(((BzUser)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.BzUserBpl.Update(((BzUser)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long id, Object metadata) {
            APBplDef.BzUserBpl.UpdatePartial(id, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long id) {
            APBplDef.BzUserBpl.PrimaryDelete(id);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.BzUserBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.BzUserBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static BzUser PrimaryGet(long id) {
            return APBplDef.BzUserBpl.PrimaryGet(id);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.BzUserBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.BzUserBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.BzUserBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<BzUser> GetAll() {
            return APBplDef.BzUserBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 用户
    /// </summary>
    [Serializable()]
    public partial class BzUser : BzUserBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUser() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUser(long id, string userName, string passwordHash, string securityStamp, string email, bool emailConfirmed, string phoneNumber, bool phoneNumberConfirmed, bool twoFactorEnabled, System.Nullable<System.DateTime> lockoutEndDtc, bool lockoutEnabled, int accessFailedCount, bool actived) : 
                base(id, userName, passwordHash, securityStamp, email, emailConfirmed, phoneNumber, phoneNumberConfirmed, twoFactorEnabled, lockoutEndDtc, lockoutEnabled, accessFailedCount, actived) {
        }
    }
    
    /// <summary>
    /// UserClaim Base
    /// </summary>
    [Serializable()]
    public abstract partial class BzUserClaimBase : IdentityUserClaim<long> {
        
        /// <summary>
        /// Id
        /// </summary>
        private int _id;
        
        /// <summary>
        /// UserId
        /// </summary>
        private long _userId;
        
        /// <summary>
        /// ClaimType
        /// </summary>
        private string _claimType = string.Empty;
        
        /// <summary>
        /// ClaimValue
        /// </summary>
        private string _claimValue = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUserClaimBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUserClaimBase(int id, long userId, string claimType, string claimValue) {
            _id = id;
            _userId = userId;
            _claimType = claimType;
            _claimValue = claimValue;
        }
        
        /// <summary>
        /// Id
        /// </summary>
        [Display(Name="ID")]
        public override int Id {
            get {
                return _id;
            }
            set {
                _id = value;
            }
        }
        
        /// <summary>
        /// Id APColumnDef
        /// </summary>
        public static Int32APColumnDef IdDef {
            get {
                return APDBDef.BzUserClaim.Id;
            }
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        public override long UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static Int64APColumnDef UserIdDef {
            get {
                return APDBDef.BzUserClaim.UserId;
            }
        }
        
        /// <summary>
        /// ClaimType
        /// </summary>
        [StringLength(100)]
        public override string ClaimType {
            get {
                return _claimType;
            }
            set {
                _claimType = value;
            }
        }
        
        /// <summary>
        /// ClaimType APColumnDef
        /// </summary>
        public static StringAPColumnDef ClaimTypeDef {
            get {
                return APDBDef.BzUserClaim.ClaimType;
            }
        }
        
        /// <summary>
        /// ClaimValue
        /// </summary>
        [StringLength(100)]
        public override string ClaimValue {
            get {
                return _claimValue;
            }
            set {
                _claimValue = value;
            }
        }
        
        /// <summary>
        /// ClaimValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ClaimValueDef {
            get {
                return APDBDef.BzUserClaim.ClaimValue;
            }
        }
        
        /// <summary>
        /// BzUserClaimTableDef APTableDef
        /// </summary>
        public static APDBDef.BzUserClaimTableDef TableDef {
            get {
                return APDBDef.BzUserClaim;
            }
        }
        
        /// <summary>
        /// BzUserClaimTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.BzUserClaim.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(BzUserClaim data) {
            Id = data.Id;
            UserId = data.UserId;
            ClaimType = data.ClaimType;
            ClaimValue = data.ClaimValue;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(BzUserClaim data) {
            if ((Id != data.Id)) {
                return false;
            }
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((ClaimType != data.ClaimType)) {
                return false;
            }
            if ((ClaimValue != data.ClaimValue)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.BzUserClaimBpl.Insert(((BzUserClaim)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.BzUserClaimBpl.Update(((BzUserClaim)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(int id, Object metadata) {
            APBplDef.BzUserClaimBpl.UpdatePartial(id, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(int id) {
            APBplDef.BzUserClaimBpl.PrimaryDelete(id);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.BzUserClaimBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.BzUserClaimBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static BzUserClaim PrimaryGet(int id) {
            return APBplDef.BzUserClaimBpl.PrimaryGet(id);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserClaim> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.BzUserClaimBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserClaim> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.BzUserClaimBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserClaim> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.BzUserClaimBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<BzUserClaim> GetAll() {
            return APBplDef.BzUserClaimBpl.GetAll();
        }
    }
    
    /// <summary>
    /// UserClaim
    /// </summary>
    [Serializable()]
    public partial class BzUserClaim : BzUserClaimBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUserClaim() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUserClaim(int id, long userId, string claimType, string claimValue) : 
                base(id, userId, claimType, claimValue) {
        }
    }
    
    /// <summary>
    /// 用户简档 Base
    /// </summary>
    [Serializable()]
    public abstract partial class BzUserProfileBase {
        
        /// <summary>
        /// UserId
        /// </summary>
        private long _userId;
        
        /// <summary>
        /// UUID
        /// </summary>
        private string _uUID = string.Empty;
        
        /// <summary>
        /// CompanyId
        /// </summary>
        private long _companyId;
        
        /// <summary>
        /// id+name 双重 id 为了提供数据迁移的的灵活性
        /// </summary>
        private string _userName = string.Empty;
        
        /// <summary>
        /// 管理员，学校管理员，教师
        /// </summary>
        private string _userType = string.Empty;
        
        /// <summary>
        /// RealName
        /// </summary>
        private string _realName = string.Empty;
        
        /// <summary>
        /// IDCard
        /// </summary>
        private string _iDCard = string.Empty;
        
        /// <summary>
        /// TrainNo
        /// </summary>
        private string _trainNo = string.Empty;
        
        /// <summary>
        /// PickList - Gender
        /// </summary>
        private long _genderPKID;
        
        /// <summary>
        /// Birthday
        /// </summary>
        private System.DateTime _birthday;
        
        /// <summary>
        /// PickList - PoliticalStatus
        /// </summary>
        private long _politicalStatusPKID;
        
        /// <summary>
        /// PickList - Nationality
        /// </summary>
        private long _nationalityPKID;
        
        /// <summary>
        /// PickList - EduSubject
        /// </summary>
        private long _eduSubjectPKID;
        
        /// <summary>
        /// PickList - EduStage
        /// </summary>
        private long _eduStagePKID;
        
        /// <summary>
        /// JobDate
        /// </summary>
        private System.Nullable<System.DateTime> _jobDate;
        
        /// <summary>
        /// PickList - SkillTitle
        /// </summary>
        private long _skillTitlePKID;
        
        /// <summary>
        /// SkillDate
        /// </summary>
        private System.Nullable<System.DateTime> _skillDate;
        
        /// <summary>
        /// CompanyName
        /// </summary>
        private string _companyName = string.Empty;
        
        /// <summary>
        /// CompanyNameOuter
        /// </summary>
        private string _companyNameOuter = string.Empty;
        
        /// <summary>
        /// Companyaddress
        /// </summary>
        private string _companyaddress = string.Empty;
        
        /// <summary>
        /// PickList - RankTitle
        /// </summary>
        private long _rankTitlePKID;
        
        /// <summary>
        /// PickList - EduBg
        /// </summary>
        private long _eduBgPKID;
        
        /// <summary>
        /// PickList - PLKey_EduDegree
        /// </summary>
        private long _eduDegreePKID;
        
        /// <summary>
        /// GraduateSchool
        /// </summary>
        private string _graduateSchool = string.Empty;
        
        /// <summary>
        /// GraduateDate
        /// </summary>
        private System.Nullable<System.DateTime> _graduateDate;
        
        /// <summary>
        /// Phonemobile
        /// </summary>
        private string _phonemobile = string.Empty;
        
        /// <summary>
        /// 用于联系的电子邮箱
        /// </summary>
        private string _email = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUserProfileBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUserProfileBase(
                    long userId, 
                    string uUID, 
                    long companyId, 
                    string userName, 
                    string userType, 
                    string realName, 
                    string iDCard, 
                    string trainNo, 
                    long genderPKID, 
                    System.DateTime birthday, 
                    long politicalStatusPKID, 
                    long nationalityPKID, 
                    long eduSubjectPKID, 
                    long eduStagePKID, 
                    System.Nullable<System.DateTime> jobDate, 
                    long skillTitlePKID, 
                    System.Nullable<System.DateTime> skillDate, 
                    string companyName, 
                    string companyNameOuter, 
                    string companyaddress, 
                    long rankTitlePKID, 
                    long eduBgPKID, 
                    long eduDegreePKID, 
                    string graduateSchool, 
                    System.Nullable<System.DateTime> graduateDate, 
                    string phonemobile, 
                    string email) {
            _userId = userId;
            _uUID = uUID;
            _companyId = companyId;
            _userName = userName;
            _userType = userType;
            _realName = realName;
            _iDCard = iDCard;
            _trainNo = trainNo;
            _genderPKID = genderPKID;
            _birthday = birthday;
            _politicalStatusPKID = politicalStatusPKID;
            _nationalityPKID = nationalityPKID;
            _eduSubjectPKID = eduSubjectPKID;
            _eduStagePKID = eduStagePKID;
            _jobDate = jobDate;
            _skillTitlePKID = skillTitlePKID;
            _skillDate = skillDate;
            _companyName = companyName;
            _companyNameOuter = companyNameOuter;
            _companyaddress = companyaddress;
            _rankTitlePKID = rankTitlePKID;
            _eduBgPKID = eduBgPKID;
            _eduDegreePKID = eduDegreePKID;
            _graduateSchool = graduateSchool;
            _graduateDate = graduateDate;
            _phonemobile = phonemobile;
            _email = email;
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        [Display(Name="用户ID")]
        public virtual long UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static Int64APColumnDef UserIdDef {
            get {
                return APDBDef.BzUserProfile.UserId;
            }
        }
        
        /// <summary>
        /// UUID
        /// </summary>
        [Display(Name="UUID")]
        [StringLength(100)]
        public virtual string UUID {
            get {
                return _uUID;
            }
            set {
                _uUID = value;
            }
        }
        
        /// <summary>
        /// UUID APColumnDef
        /// </summary>
        public static StringAPColumnDef UUIDDef {
            get {
                return APDBDef.BzUserProfile.UUID;
            }
        }
        
        /// <summary>
        /// CompanyId
        /// </summary>
        [Display(Name="单位ID")]
        public virtual long CompanyId {
            get {
                return _companyId;
            }
            set {
                _companyId = value;
            }
        }
        
        /// <summary>
        /// CompanyId APColumnDef
        /// </summary>
        public static Int64APColumnDef CompanyIdDef {
            get {
                return APDBDef.BzUserProfile.CompanyId;
            }
        }
        
        /// <summary>
        /// id+name 双重 id 为了提供数据迁移的的灵活性
        /// </summary>
        [Display(Name="用户名")]
        [Required()]
        [StringLength(255)]
        public virtual string UserName {
            get {
                return _userName;
            }
            set {
                _userName = value;
            }
        }
        
        /// <summary>
        /// id+name 双重 id 为了提供数据迁移的的灵活性 APColumnDef
        /// </summary>
        public static StringAPColumnDef UserNameDef {
            get {
                return APDBDef.BzUserProfile.UserName;
            }
        }
        
        /// <summary>
        /// 管理员，学校管理员，教师
        /// </summary>
        [Display(Name="用户类型")]
        [StringLength(255)]
        public virtual string UserType {
            get {
                return _userType;
            }
            set {
                _userType = value;
            }
        }
        
        /// <summary>
        /// 管理员，学校管理员，教师 APColumnDef
        /// </summary>
        public static StringAPColumnDef UserTypeDef {
            get {
                return APDBDef.BzUserProfile.UserType;
            }
        }
        
        /// <summary>
        /// RealName
        /// </summary>
        [Display(Name="真实姓名")]
        [Required()]
        [StringLength(40)]
        public virtual string RealName {
            get {
                return _realName;
            }
            set {
                _realName = value;
            }
        }
        
        /// <summary>
        /// RealName APColumnDef
        /// </summary>
        public static StringAPColumnDef RealNameDef {
            get {
                return APDBDef.BzUserProfile.RealName;
            }
        }
        
        /// <summary>
        /// IDCard
        /// </summary>
        [Display(Name="身份证件号")]
        [Required()]
        [StringLength(18)]
        public virtual string IDCard {
            get {
                return _iDCard;
            }
            set {
                _iDCard = value;
            }
        }
        
        /// <summary>
        /// IDCard APColumnDef
        /// </summary>
        public static StringAPColumnDef IDCardDef {
            get {
                return APDBDef.BzUserProfile.IDCard;
            }
        }
        
        /// <summary>
        /// TrainNo
        /// </summary>
        [Display(Name="师训编号")]
        [StringLength(20)]
        public virtual string TrainNo {
            get {
                return _trainNo;
            }
            set {
                _trainNo = value;
            }
        }
        
        /// <summary>
        /// TrainNo APColumnDef
        /// </summary>
        public static StringAPColumnDef TrainNoDef {
            get {
                return APDBDef.BzUserProfile.TrainNo;
            }
        }
        
        /// <summary>
        /// PickList - Gender
        /// </summary>
        [Display(Name="性别")]
        public virtual long GenderPKID {
            get {
                return _genderPKID;
            }
            set {
                _genderPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - Gender APColumnDef
        /// </summary>
        public static Int64APColumnDef GenderPKIDDef {
            get {
                return APDBDef.BzUserProfile.GenderPKID;
            }
        }
        
        /// <summary>
        /// Birthday
        /// </summary>
        [Display(Name="出生年月")]
        [Required()]
        public virtual System.DateTime Birthday {
            get {
                return _birthday;
            }
            set {
                _birthday = value;
            }
        }
        
        /// <summary>
        /// Birthday APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef BirthdayDef {
            get {
                return APDBDef.BzUserProfile.Birthday;
            }
        }
        
        /// <summary>
        /// PickList - PoliticalStatus
        /// </summary>
        [Display(Name="政治面貌")]
        public virtual long PoliticalStatusPKID {
            get {
                return _politicalStatusPKID;
            }
            set {
                _politicalStatusPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PoliticalStatus APColumnDef
        /// </summary>
        public static Int64APColumnDef PoliticalStatusPKIDDef {
            get {
                return APDBDef.BzUserProfile.PoliticalStatusPKID;
            }
        }
        
        /// <summary>
        /// PickList - Nationality
        /// </summary>
        [Display(Name="民族")]
        public virtual long NationalityPKID {
            get {
                return _nationalityPKID;
            }
            set {
                _nationalityPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - Nationality APColumnDef
        /// </summary>
        public static Int64APColumnDef NationalityPKIDDef {
            get {
                return APDBDef.BzUserProfile.NationalityPKID;
            }
        }
        
        /// <summary>
        /// PickList - EduSubject
        /// </summary>
        [Display(Name="任教学科")]
        public virtual long EduSubjectPKID {
            get {
                return _eduSubjectPKID;
            }
            set {
                _eduSubjectPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - EduSubject APColumnDef
        /// </summary>
        public static Int64APColumnDef EduSubjectPKIDDef {
            get {
                return APDBDef.BzUserProfile.EduSubjectPKID;
            }
        }
        
        /// <summary>
        /// PickList - EduStage
        /// </summary>
        [Display(Name="任教学段")]
        public virtual long EduStagePKID {
            get {
                return _eduStagePKID;
            }
            set {
                _eduStagePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - EduStage APColumnDef
        /// </summary>
        public static Int64APColumnDef EduStagePKIDDef {
            get {
                return APDBDef.BzUserProfile.EduStagePKID;
            }
        }
        
        /// <summary>
        /// JobDate
        /// </summary>
        [Display(Name="参加教育工作年月")]
        public virtual System.Nullable<System.DateTime> JobDate {
            get {
                return _jobDate;
            }
            set {
                _jobDate = value;
            }
        }
        
        /// <summary>
        /// JobDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef JobDateDef {
            get {
                return APDBDef.BzUserProfile.JobDate;
            }
        }
        
        /// <summary>
        /// PickList - SkillTitle
        /// </summary>
        [Display(Name="现任专技职称")]
        public virtual long SkillTitlePKID {
            get {
                return _skillTitlePKID;
            }
            set {
                _skillTitlePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - SkillTitle APColumnDef
        /// </summary>
        public static Int64APColumnDef SkillTitlePKIDDef {
            get {
                return APDBDef.BzUserProfile.SkillTitlePKID;
            }
        }
        
        /// <summary>
        /// SkillDate
        /// </summary>
        [Display(Name="职称通过年月")]
        public virtual System.Nullable<System.DateTime> SkillDate {
            get {
                return _skillDate;
            }
            set {
                _skillDate = value;
            }
        }
        
        /// <summary>
        /// SkillDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef SkillDateDef {
            get {
                return APDBDef.BzUserProfile.SkillDate;
            }
        }
        
        /// <summary>
        /// CompanyName
        /// </summary>
        [Display(Name="单位")]
        [StringLength(100)]
        public virtual string CompanyName {
            get {
                return _companyName;
            }
            set {
                _companyName = value;
            }
        }
        
        /// <summary>
        /// CompanyName APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyNameDef {
            get {
                return APDBDef.BzUserProfile.CompanyName;
            }
        }
        
        /// <summary>
        /// CompanyNameOuter
        /// </summary>
        [Display(Name="单位(数据同步)")]
        [StringLength(800)]
        public virtual string CompanyNameOuter {
            get {
                return _companyNameOuter;
            }
            set {
                _companyNameOuter = value;
            }
        }
        
        /// <summary>
        /// CompanyNameOuter APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyNameOuterDef {
            get {
                return APDBDef.BzUserProfile.CompanyNameOuter;
            }
        }
        
        /// <summary>
        /// Companyaddress
        /// </summary>
        [Display(Name="单位地址")]
        [StringLength(255)]
        public virtual string Companyaddress {
            get {
                return _companyaddress;
            }
            set {
                _companyaddress = value;
            }
        }
        
        /// <summary>
        /// Companyaddress APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyaddressDef {
            get {
                return APDBDef.BzUserProfile.Companyaddress;
            }
        }
        
        /// <summary>
        /// PickList - RankTitle
        /// </summary>
        [Display(Name="行政职务")]
        public virtual long RankTitlePKID {
            get {
                return _rankTitlePKID;
            }
            set {
                _rankTitlePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - RankTitle APColumnDef
        /// </summary>
        public static Int64APColumnDef RankTitlePKIDDef {
            get {
                return APDBDef.BzUserProfile.RankTitlePKID;
            }
        }
        
        /// <summary>
        /// PickList - EduBg
        /// </summary>
        [Display(Name="学历")]
        public virtual long EduBgPKID {
            get {
                return _eduBgPKID;
            }
            set {
                _eduBgPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - EduBg APColumnDef
        /// </summary>
        public static Int64APColumnDef EduBgPKIDDef {
            get {
                return APDBDef.BzUserProfile.EduBgPKID;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_EduDegree
        /// </summary>
        [Display(Name="学位")]
        public virtual long EduDegreePKID {
            get {
                return _eduDegreePKID;
            }
            set {
                _eduDegreePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_EduDegree APColumnDef
        /// </summary>
        public static Int64APColumnDef EduDegreePKIDDef {
            get {
                return APDBDef.BzUserProfile.EduDegreePKID;
            }
        }
        
        /// <summary>
        /// GraduateSchool
        /// </summary>
        [Display(Name="毕业院校与专业")]
        [StringLength(100)]
        public virtual string GraduateSchool {
            get {
                return _graduateSchool;
            }
            set {
                _graduateSchool = value;
            }
        }
        
        /// <summary>
        /// GraduateSchool APColumnDef
        /// </summary>
        public static StringAPColumnDef GraduateSchoolDef {
            get {
                return APDBDef.BzUserProfile.GraduateSchool;
            }
        }
        
        /// <summary>
        /// GraduateDate
        /// </summary>
        [Display(Name="毕业年月")]
        public virtual System.Nullable<System.DateTime> GraduateDate {
            get {
                return _graduateDate;
            }
            set {
                _graduateDate = value;
            }
        }
        
        /// <summary>
        /// GraduateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef GraduateDateDef {
            get {
                return APDBDef.BzUserProfile.GraduateDate;
            }
        }
        
        /// <summary>
        /// Phonemobile
        /// </summary>
        [Display(Name="手机号码")]
        [StringLength(20)]
        public virtual string Phonemobile {
            get {
                return _phonemobile;
            }
            set {
                _phonemobile = value;
            }
        }
        
        /// <summary>
        /// Phonemobile APColumnDef
        /// </summary>
        public static StringAPColumnDef PhonemobileDef {
            get {
                return APDBDef.BzUserProfile.Phonemobile;
            }
        }
        
        /// <summary>
        /// 用于联系的电子邮箱
        /// </summary>
        [Display(Name="电子邮箱")]
        [StringLength(255)]
        public virtual string Email {
            get {
                return _email;
            }
            set {
                _email = value;
            }
        }
        
        /// <summary>
        /// 用于联系的电子邮箱 APColumnDef
        /// </summary>
        public static StringAPColumnDef EmailDef {
            get {
                return APDBDef.BzUserProfile.Email;
            }
        }
        
        /// <summary>
        /// BzUserProfileTableDef APTableDef
        /// </summary>
        public static APDBDef.BzUserProfileTableDef TableDef {
            get {
                return APDBDef.BzUserProfile;
            }
        }
        
        /// <summary>
        /// BzUserProfileTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.BzUserProfile.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(BzUserProfile data) {
            UserId = data.UserId;
            UUID = data.UUID;
            CompanyId = data.CompanyId;
            UserName = data.UserName;
            UserType = data.UserType;
            RealName = data.RealName;
            IDCard = data.IDCard;
            TrainNo = data.TrainNo;
            GenderPKID = data.GenderPKID;
            Birthday = data.Birthday;
            PoliticalStatusPKID = data.PoliticalStatusPKID;
            NationalityPKID = data.NationalityPKID;
            EduSubjectPKID = data.EduSubjectPKID;
            EduStagePKID = data.EduStagePKID;
            JobDate = data.JobDate;
            SkillTitlePKID = data.SkillTitlePKID;
            SkillDate = data.SkillDate;
            CompanyName = data.CompanyName;
            CompanyNameOuter = data.CompanyNameOuter;
            Companyaddress = data.Companyaddress;
            RankTitlePKID = data.RankTitlePKID;
            EduBgPKID = data.EduBgPKID;
            EduDegreePKID = data.EduDegreePKID;
            GraduateSchool = data.GraduateSchool;
            GraduateDate = data.GraduateDate;
            Phonemobile = data.Phonemobile;
            Email = data.Email;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(BzUserProfile data) {
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((UUID != data.UUID)) {
                return false;
            }
            if ((CompanyId != data.CompanyId)) {
                return false;
            }
            if ((UserName != data.UserName)) {
                return false;
            }
            if ((UserType != data.UserType)) {
                return false;
            }
            if ((RealName != data.RealName)) {
                return false;
            }
            if ((IDCard != data.IDCard)) {
                return false;
            }
            if ((TrainNo != data.TrainNo)) {
                return false;
            }
            if ((GenderPKID != data.GenderPKID)) {
                return false;
            }
            if ((Birthday != data.Birthday)) {
                return false;
            }
            if ((PoliticalStatusPKID != data.PoliticalStatusPKID)) {
                return false;
            }
            if ((NationalityPKID != data.NationalityPKID)) {
                return false;
            }
            if ((EduSubjectPKID != data.EduSubjectPKID)) {
                return false;
            }
            if ((EduStagePKID != data.EduStagePKID)) {
                return false;
            }
            if ((JobDate != data.JobDate)) {
                return false;
            }
            if ((SkillTitlePKID != data.SkillTitlePKID)) {
                return false;
            }
            if ((SkillDate != data.SkillDate)) {
                return false;
            }
            if ((CompanyName != data.CompanyName)) {
                return false;
            }
            if ((CompanyNameOuter != data.CompanyNameOuter)) {
                return false;
            }
            if ((Companyaddress != data.Companyaddress)) {
                return false;
            }
            if ((RankTitlePKID != data.RankTitlePKID)) {
                return false;
            }
            if ((EduBgPKID != data.EduBgPKID)) {
                return false;
            }
            if ((EduDegreePKID != data.EduDegreePKID)) {
                return false;
            }
            if ((GraduateSchool != data.GraduateSchool)) {
                return false;
            }
            if ((GraduateDate != data.GraduateDate)) {
                return false;
            }
            if ((Phonemobile != data.Phonemobile)) {
                return false;
            }
            if ((Email != data.Email)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.BzUserProfileBpl.Insert(((BzUserProfile)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.BzUserProfileBpl.Update(((BzUserProfile)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long userId, Object metadata) {
            APBplDef.BzUserProfileBpl.UpdatePartial(userId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long userId) {
            APBplDef.BzUserProfileBpl.PrimaryDelete(userId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.BzUserProfileBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.BzUserProfileBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static BzUserProfile PrimaryGet(long userId) {
            return APBplDef.BzUserProfileBpl.PrimaryGet(userId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.BzUserProfileBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.BzUserProfileBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.BzUserProfileBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<BzUserProfile> GetAll() {
            return APBplDef.BzUserProfileBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 用户简档
    /// </summary>
    [Serializable()]
    public partial class BzUserProfile : BzUserProfileBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUserProfile() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUserProfile(
                    long userId, 
                    string uUID, 
                    long companyId, 
                    string userName, 
                    string userType, 
                    string realName, 
                    string iDCard, 
                    string trainNo, 
                    long genderPKID, 
                    System.DateTime birthday, 
                    long politicalStatusPKID, 
                    long nationalityPKID, 
                    long eduSubjectPKID, 
                    long eduStagePKID, 
                    System.Nullable<System.DateTime> jobDate, 
                    long skillTitlePKID, 
                    System.Nullable<System.DateTime> skillDate, 
                    string companyName, 
                    string companyNameOuter, 
                    string companyaddress, 
                    long rankTitlePKID, 
                    long eduBgPKID, 
                    long eduDegreePKID, 
                    string graduateSchool, 
                    System.Nullable<System.DateTime> graduateDate, 
                    string phonemobile, 
                    string email) : 
                base(userId, uUID, companyId, userName, userType, realName, iDCard, trainNo, genderPKID, birthday, politicalStatusPKID, nationalityPKID, eduSubjectPKID, eduStagePKID, jobDate, skillTitlePKID, skillDate, companyName, companyNameOuter, companyaddress, rankTitlePKID, eduBgPKID, eduDegreePKID, graduateSchool, graduateDate, phonemobile, email) {
        }
    }
    
    /// <summary>
    /// 角色 Base
    /// </summary>
    [Serializable()]
    public abstract partial class BzRoleBase : IdentityRole<long> {
        
        /// <summary>
        /// RoleId
        /// </summary>
        private long _id;
        
        /// <summary>
        /// Name
        /// </summary>
        private string _name = string.Empty;
        
        /// <summary>
        /// NormalizedName
        /// </summary>
        private string _normalizedName = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzRoleBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzRoleBase(long id, string name, string normalizedName) {
            _id = id;
            _name = name;
            _normalizedName = normalizedName;
        }
        
        /// <summary>
        /// RoleId
        /// </summary>
        [Display(Name="角色ID")]
        public override long Id {
            get {
                return _id;
            }
            set {
                _id = value;
            }
        }
        
        /// <summary>
        /// RoleId APColumnDef
        /// </summary>
        public static Int64APColumnDef IdDef {
            get {
                return APDBDef.BzRole.Id;
            }
        }
        
        /// <summary>
        /// Name
        /// </summary>
        [Display(Name="角色名")]
        [Required()]
        [StringLength(255)]
        public override string Name {
            get {
                return _name;
            }
            set {
                _name = value;
            }
        }
        
        /// <summary>
        /// Name APColumnDef
        /// </summary>
        public static StringAPColumnDef NameDef {
            get {
                return APDBDef.BzRole.Name;
            }
        }
        
        /// <summary>
        /// NormalizedName
        /// </summary>
        [Display(Name="常名")]
        [StringLength(255)]
        public override string NormalizedName {
            get {
                return _normalizedName;
            }
            set {
                _normalizedName = value;
            }
        }
        
        /// <summary>
        /// NormalizedName APColumnDef
        /// </summary>
        public static StringAPColumnDef NormalizedNameDef {
            get {
                return APDBDef.BzRole.NormalizedName;
            }
        }
        
        /// <summary>
        /// BzRoleTableDef APTableDef
        /// </summary>
        public static APDBDef.BzRoleTableDef TableDef {
            get {
                return APDBDef.BzRole;
            }
        }
        
        /// <summary>
        /// BzRoleTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.BzRole.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(BzRole data) {
            Id = data.Id;
            Name = data.Name;
            NormalizedName = data.NormalizedName;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(BzRole data) {
            if ((Id != data.Id)) {
                return false;
            }
            if ((Name != data.Name)) {
                return false;
            }
            if ((NormalizedName != data.NormalizedName)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.BzRoleBpl.Insert(((BzRole)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.BzRoleBpl.Update(((BzRole)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long id, Object metadata) {
            APBplDef.BzRoleBpl.UpdatePartial(id, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long id) {
            APBplDef.BzRoleBpl.PrimaryDelete(id);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.BzRoleBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.BzRoleBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static BzRole PrimaryGet(long id) {
            return APBplDef.BzRoleBpl.PrimaryGet(id);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.BzRoleBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.BzRoleBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.BzRoleBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<BzRole> GetAll() {
            return APBplDef.BzRoleBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 角色
    /// </summary>
    [Serializable()]
    public partial class BzRole : BzRoleBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzRole() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzRole(long id, string name, string normalizedName) : 
                base(id, name, normalizedName) {
        }
    }
    
    /// <summary>
    /// 用户角色 Base
    /// </summary>
    [Serializable()]
    public abstract partial class BzUserRoleBase {
        
        /// <summary>
        /// UserRoleId
        /// </summary>
        private long _userRoleId;
        
        /// <summary>
        /// UserId
        /// </summary>
        private long _userId;
        
        /// <summary>
        /// RoleId
        /// </summary>
        private long _roleId;
        
        /// <summary>
        /// ScopeType
        /// </summary>
        private string _scopeType = string.Empty;
        
        /// <summary>
        /// ScopeId
        /// </summary>
        private long _scopeId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUserRoleBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUserRoleBase(long userRoleId, long userId, long roleId, string scopeType, long scopeId) {
            _userRoleId = userRoleId;
            _userId = userId;
            _roleId = roleId;
            _scopeType = scopeType;
            _scopeId = scopeId;
        }
        
        /// <summary>
        /// UserRoleId
        /// </summary>
        [Display(Name="ID")]
        public virtual long UserRoleId {
            get {
                return _userRoleId;
            }
            set {
                _userRoleId = value;
            }
        }
        
        /// <summary>
        /// UserRoleId APColumnDef
        /// </summary>
        public static Int64APColumnDef UserRoleIdDef {
            get {
                return APDBDef.BzUserRole.UserRoleId;
            }
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        [Display(Name="用户ID")]
        public virtual long UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static Int64APColumnDef UserIdDef {
            get {
                return APDBDef.BzUserRole.UserId;
            }
        }
        
        /// <summary>
        /// RoleId
        /// </summary>
        [Display(Name="角色ID")]
        public virtual long RoleId {
            get {
                return _roleId;
            }
            set {
                _roleId = value;
            }
        }
        
        /// <summary>
        /// RoleId APColumnDef
        /// </summary>
        public static Int64APColumnDef RoleIdDef {
            get {
                return APDBDef.BzUserRole.RoleId;
            }
        }
        
        /// <summary>
        /// ScopeType
        /// </summary>
        [Display(Name="作用域类型")]
        [StringLength(30)]
        public virtual string ScopeType {
            get {
                return _scopeType;
            }
            set {
                _scopeType = value;
            }
        }
        
        /// <summary>
        /// ScopeType APColumnDef
        /// </summary>
        public static StringAPColumnDef ScopeTypeDef {
            get {
                return APDBDef.BzUserRole.ScopeType;
            }
        }
        
        /// <summary>
        /// ScopeId
        /// </summary>
        [Display(Name="作用域ID")]
        public virtual long ScopeId {
            get {
                return _scopeId;
            }
            set {
                _scopeId = value;
            }
        }
        
        /// <summary>
        /// ScopeId APColumnDef
        /// </summary>
        public static Int64APColumnDef ScopeIdDef {
            get {
                return APDBDef.BzUserRole.ScopeId;
            }
        }
        
        /// <summary>
        /// BzUserRoleTableDef APTableDef
        /// </summary>
        public static APDBDef.BzUserRoleTableDef TableDef {
            get {
                return APDBDef.BzUserRole;
            }
        }
        
        /// <summary>
        /// BzUserRoleTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.BzUserRole.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(BzUserRole data) {
            UserRoleId = data.UserRoleId;
            UserId = data.UserId;
            RoleId = data.RoleId;
            ScopeType = data.ScopeType;
            ScopeId = data.ScopeId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(BzUserRole data) {
            if ((UserRoleId != data.UserRoleId)) {
                return false;
            }
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((RoleId != data.RoleId)) {
                return false;
            }
            if ((ScopeType != data.ScopeType)) {
                return false;
            }
            if ((ScopeId != data.ScopeId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.BzUserRoleBpl.Insert(((BzUserRole)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.BzUserRoleBpl.Update(((BzUserRole)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long userRoleId, Object metadata) {
            APBplDef.BzUserRoleBpl.UpdatePartial(userRoleId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long userRoleId) {
            APBplDef.BzUserRoleBpl.PrimaryDelete(userRoleId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.BzUserRoleBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.BzUserRoleBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static BzUserRole PrimaryGet(long userRoleId) {
            return APBplDef.BzUserRoleBpl.PrimaryGet(userRoleId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.BzUserRoleBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.BzUserRoleBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.BzUserRoleBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<BzUserRole> GetAll() {
            return APBplDef.BzUserRoleBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 用户角色
    /// </summary>
    [Serializable()]
    public partial class BzUserRole : BzUserRoleBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUserRole() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUserRole(long userRoleId, long userId, long roleId, string scopeType, long scopeId) : 
                base(userRoleId, userId, roleId, scopeType, scopeId) {
        }
    }
    
    /// <summary>
    /// 申报 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclareBase {
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        private long _declareTargetPKID;
        
        /// <summary>
        /// PickList - PLKey_DeclareSubject
        /// </summary>
        private long _declareSubjectPKID;
        
        /// <summary>
        /// PickList - PLKey_DeclareStage
        /// </summary>
        private long _declareStagePKID;
        
        /// <summary>
        /// AllowFlowToSchool
        /// </summary>
        private bool _allowFlowToSchool;
        
        /// <summary>
        /// AllowFitResearcher
        /// </summary>
        private bool _allowFitResearcher;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareBase(long teacherId, long declareTargetPKID, long declareSubjectPKID, long declareStagePKID, bool allowFlowToSchool, bool allowFitResearcher) {
            _teacherId = teacherId;
            _declareTargetPKID = declareTargetPKID;
            _declareSubjectPKID = declareSubjectPKID;
            _declareStagePKID = declareStagePKID;
            _allowFlowToSchool = allowFlowToSchool;
            _allowFitResearcher = allowFitResearcher;
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.Declare.TeacherId;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        [Display(Name="申报（担任）称号")]
        public virtual long DeclareTargetPKID {
            get {
                return _declareTargetPKID;
            }
            set {
                _declareTargetPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareTargetPKIDDef {
            get {
                return APDBDef.Declare.DeclareTargetPKID;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareSubject
        /// </summary>
        [Display(Name="申报学科")]
        public virtual long DeclareSubjectPKID {
            get {
                return _declareSubjectPKID;
            }
            set {
                _declareSubjectPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareSubject APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareSubjectPKIDDef {
            get {
                return APDBDef.Declare.DeclareSubjectPKID;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareStage
        /// </summary>
        [Display(Name="申报学段")]
        public virtual long DeclareStagePKID {
            get {
                return _declareStagePKID;
            }
            set {
                _declareStagePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareStage APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareStagePKIDDef {
            get {
                return APDBDef.Declare.DeclareStagePKID;
            }
        }
        
        /// <summary>
        /// AllowFlowToSchool
        /// </summary>
        [Display(Name="流入学校开展工作")]
        public virtual bool AllowFlowToSchool {
            get {
                return _allowFlowToSchool;
            }
            set {
                _allowFlowToSchool = value;
            }
        }
        
        /// <summary>
        /// AllowFlowToSchool APColumnDef
        /// </summary>
        public static BooleanAPColumnDef AllowFlowToSchoolDef {
            get {
                return APDBDef.Declare.AllowFlowToSchool;
            }
        }
        
        /// <summary>
        /// AllowFitResearcher
        /// </summary>
        [Display(Name="配合教研员开展工作")]
        public virtual bool AllowFitResearcher {
            get {
                return _allowFitResearcher;
            }
            set {
                _allowFitResearcher = value;
            }
        }
        
        /// <summary>
        /// AllowFitResearcher APColumnDef
        /// </summary>
        public static BooleanAPColumnDef AllowFitResearcherDef {
            get {
                return APDBDef.Declare.AllowFitResearcher;
            }
        }
        
        /// <summary>
        /// DeclareTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclareTableDef TableDef {
            get {
                return APDBDef.Declare;
            }
        }
        
        /// <summary>
        /// DeclareTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Declare.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Declare data) {
            TeacherId = data.TeacherId;
            DeclareTargetPKID = data.DeclareTargetPKID;
            DeclareSubjectPKID = data.DeclareSubjectPKID;
            DeclareStagePKID = data.DeclareStagePKID;
            AllowFlowToSchool = data.AllowFlowToSchool;
            AllowFitResearcher = data.AllowFitResearcher;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Declare data) {
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((DeclareTargetPKID != data.DeclareTargetPKID)) {
                return false;
            }
            if ((DeclareSubjectPKID != data.DeclareSubjectPKID)) {
                return false;
            }
            if ((DeclareStagePKID != data.DeclareStagePKID)) {
                return false;
            }
            if ((AllowFlowToSchool != data.AllowFlowToSchool)) {
                return false;
            }
            if ((AllowFitResearcher != data.AllowFitResearcher)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclareBpl.Insert(((Declare)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclareBpl.Update(((Declare)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long teacherId, Object metadata) {
            APBplDef.DeclareBpl.UpdatePartial(teacherId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long teacherId) {
            APBplDef.DeclareBpl.PrimaryDelete(teacherId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclareBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclareBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Declare PrimaryGet(long teacherId) {
            return APBplDef.DeclareBpl.PrimaryGet(teacherId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Declare> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclareBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Declare> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclareBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Declare> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclareBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Declare> GetAll() {
            return APBplDef.DeclareBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报
    /// </summary>
    [Serializable()]
    public partial class Declare : DeclareBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Declare() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Declare(long teacherId, long declareTargetPKID, long declareSubjectPKID, long declareStagePKID, bool allowFlowToSchool, bool allowFitResearcher) : 
                base(teacherId, declareTargetPKID, declareSubjectPKID, declareStagePKID, allowFlowToSchool, allowFitResearcher) {
        }
    }
    
    /// <summary>
    /// 申报-简历 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclareResumeBase {
        
        /// <summary>
        /// DeclareResumeId
        /// </summary>
        private long _declareResumeId;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// DateRegion
        /// </summary>
        private string _dateRegion = string.Empty;
        
        /// <summary>
        /// Company
        /// </summary>
        private string _company = string.Empty;
        
        /// <summary>
        /// Title
        /// </summary>
        private string _title = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareResumeBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareResumeBase(long declareResumeId, long teacherId, string dateRegion, string company, string title) {
            _declareResumeId = declareResumeId;
            _teacherId = teacherId;
            _dateRegion = dateRegion;
            _company = company;
            _title = title;
        }
        
        /// <summary>
        /// DeclareResumeId
        /// </summary>
        [Display(Name="简历ID")]
        public virtual long DeclareResumeId {
            get {
                return _declareResumeId;
            }
            set {
                _declareResumeId = value;
            }
        }
        
        /// <summary>
        /// DeclareResumeId APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareResumeIdDef {
            get {
                return APDBDef.DeclareResume.DeclareResumeId;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.DeclareResume.TeacherId;
            }
        }
        
        /// <summary>
        /// DateRegion
        /// </summary>
        [Display(Name="时间区间")]
        [StringLength(100)]
        public virtual string DateRegion {
            get {
                return _dateRegion;
            }
            set {
                _dateRegion = value;
            }
        }
        
        /// <summary>
        /// DateRegion APColumnDef
        /// </summary>
        public static StringAPColumnDef DateRegionDef {
            get {
                return APDBDef.DeclareResume.DateRegion;
            }
        }
        
        /// <summary>
        /// Company
        /// </summary>
        [Display(Name="单位")]
        [StringLength(100)]
        public virtual string Company {
            get {
                return _company;
            }
            set {
                _company = value;
            }
        }
        
        /// <summary>
        /// Company APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyDef {
            get {
                return APDBDef.DeclareResume.Company;
            }
        }
        
        /// <summary>
        /// Title
        /// </summary>
        [Display(Name="职称、职务")]
        [StringLength(100)]
        public virtual string Title {
            get {
                return _title;
            }
            set {
                _title = value;
            }
        }
        
        /// <summary>
        /// Title APColumnDef
        /// </summary>
        public static StringAPColumnDef TitleDef {
            get {
                return APDBDef.DeclareResume.Title;
            }
        }
        
        /// <summary>
        /// DeclareResumeTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclareResumeTableDef TableDef {
            get {
                return APDBDef.DeclareResume;
            }
        }
        
        /// <summary>
        /// DeclareResumeTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.DeclareResume.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(DeclareResume data) {
            DeclareResumeId = data.DeclareResumeId;
            TeacherId = data.TeacherId;
            DateRegion = data.DateRegion;
            Company = data.Company;
            Title = data.Title;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(DeclareResume data) {
            if ((DeclareResumeId != data.DeclareResumeId)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((DateRegion != data.DateRegion)) {
                return false;
            }
            if ((Company != data.Company)) {
                return false;
            }
            if ((Title != data.Title)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclareResumeBpl.Insert(((DeclareResume)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclareResumeBpl.Update(((DeclareResume)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long declareResumeId, Object metadata) {
            APBplDef.DeclareResumeBpl.UpdatePartial(declareResumeId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long declareResumeId) {
            APBplDef.DeclareResumeBpl.PrimaryDelete(declareResumeId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclareResumeBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclareResumeBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static DeclareResume PrimaryGet(long declareResumeId) {
            return APBplDef.DeclareResumeBpl.PrimaryGet(declareResumeId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareResume> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclareResumeBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareResume> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclareResumeBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareResume> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclareResumeBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<DeclareResume> GetAll() {
            return APBplDef.DeclareResumeBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报-简历
    /// </summary>
    [Serializable()]
    public partial class DeclareResume : DeclareResumeBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareResume() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareResume(long declareResumeId, long teacherId, string dateRegion, string company, string title) : 
                base(declareResumeId, teacherId, dateRegion, company, title) {
        }
    }
    
    /// <summary>
    /// 申报-内容 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclareContentBase {
        
        /// <summary>
        /// DeclareContentId
        /// </summary>
        private long _declareContentId;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        private string _contentKey = string.Empty;
        
        /// <summary>
        /// ContentValue
        /// </summary>
        private string _contentValue = string.Empty;
        
        /// <summary>
        /// 内容的数据类型，String，DateTime等
        /// </summary>
        private string _contentDataType = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareContentBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareContentBase(long declareContentId, long teacherId, string contentKey, string contentValue, string contentDataType) {
            _declareContentId = declareContentId;
            _teacherId = teacherId;
            _contentKey = contentKey;
            _contentValue = contentValue;
            _contentDataType = contentDataType;
        }
        
        /// <summary>
        /// DeclareContentId
        /// </summary>
        [Display(Name="内容ID")]
        public virtual long DeclareContentId {
            get {
                return _declareContentId;
            }
            set {
                _declareContentId = value;
            }
        }
        
        /// <summary>
        /// DeclareContentId APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareContentIdDef {
            get {
                return APDBDef.DeclareContent.DeclareContentId;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.DeclareContent.TeacherId;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        [Display(Name="内容类别")]
        [StringLength(200)]
        public virtual string ContentKey {
            get {
                return _contentKey;
            }
            set {
                _contentKey = value;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割 APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentKeyDef {
            get {
                return APDBDef.DeclareContent.ContentKey;
            }
        }
        
        /// <summary>
        /// ContentValue
        /// </summary>
        [Display(Name="内容")]
        [StringLength(30000)]
        public virtual string ContentValue {
            get {
                return _contentValue;
            }
            set {
                _contentValue = value;
            }
        }
        
        /// <summary>
        /// ContentValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentValueDef {
            get {
                return APDBDef.DeclareContent.ContentValue;
            }
        }
        
        /// <summary>
        /// 内容的数据类型，String，DateTime等
        /// </summary>
        [Display(Name="内容数据类型")]
        [StringLength(100)]
        public virtual string ContentDataType {
            get {
                return _contentDataType;
            }
            set {
                _contentDataType = value;
            }
        }
        
        /// <summary>
        /// 内容的数据类型，String，DateTime等 APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentDataTypeDef {
            get {
                return APDBDef.DeclareContent.ContentDataType;
            }
        }
        
        /// <summary>
        /// DeclareContentTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclareContentTableDef TableDef {
            get {
                return APDBDef.DeclareContent;
            }
        }
        
        /// <summary>
        /// DeclareContentTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.DeclareContent.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(DeclareContent data) {
            DeclareContentId = data.DeclareContentId;
            TeacherId = data.TeacherId;
            ContentKey = data.ContentKey;
            ContentValue = data.ContentValue;
            ContentDataType = data.ContentDataType;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(DeclareContent data) {
            if ((DeclareContentId != data.DeclareContentId)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((ContentKey != data.ContentKey)) {
                return false;
            }
            if ((ContentValue != data.ContentValue)) {
                return false;
            }
            if ((ContentDataType != data.ContentDataType)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclareContentBpl.Insert(((DeclareContent)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclareContentBpl.Update(((DeclareContent)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long declareContentId, Object metadata) {
            APBplDef.DeclareContentBpl.UpdatePartial(declareContentId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long declareContentId) {
            APBplDef.DeclareContentBpl.PrimaryDelete(declareContentId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclareContentBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclareContentBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static DeclareContent PrimaryGet(long declareContentId) {
            return APBplDef.DeclareContentBpl.PrimaryGet(declareContentId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclareContentBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclareContentBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclareContentBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<DeclareContent> GetAll() {
            return APBplDef.DeclareContentBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报-内容
    /// </summary>
    [Serializable()]
    public partial class DeclareContent : DeclareContentBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareContent() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareContent(long declareContentId, long teacherId, string contentKey, string contentValue, string contentDataType) : 
                base(declareContentId, teacherId, contentKey, contentValue, contentDataType) {
        }
    }
    
    /// <summary>
    /// 申报-活动 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclareActiveBase {
        
        /// <summary>
        /// DeclareActiveId
        /// </summary>
        private long _declareActiveId;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        private string _activeKey = string.Empty;
        
        /// <summary>
        /// Date
        /// </summary>
        private System.DateTime _date;
        
        /// <summary>
        /// Location
        /// </summary>
        private string _location = string.Empty;
        
        /// <summary>
        /// Level
        /// </summary>
        private string _level = string.Empty;
        
        /// <summary>
        /// ContentValue
        /// </summary>
        private string _contentValue = string.Empty;
        
        /// <summary>
        /// AttachmentUrl
        /// </summary>
        private string _attachmentUrl = string.Empty;
        
        /// <summary>
        /// AttachmentName
        /// </summary>
        private string _attachmentName = string.Empty;
        
        /// <summary>
        /// Dynamic1
        /// </summary>
        private string _dynamic1 = string.Empty;
        
        /// <summary>
        /// Dynamic2
        /// </summary>
        private string _dynamic2 = string.Empty;
        
        /// <summary>
        /// Dynamic3
        /// </summary>
        private string _dynamic3 = string.Empty;
        
        /// <summary>
        /// Dynamic4
        /// </summary>
        private string _dynamic4 = string.Empty;
        
        /// <summary>
        /// Dynamic5
        /// </summary>
        private string _dynamic5 = string.Empty;
        
        /// <summary>
        /// Dynamic6
        /// </summary>
        private string _dynamic6 = string.Empty;
        
        /// <summary>
        /// Dynamic7
        /// </summary>
        private string _dynamic7 = string.Empty;
        
        /// <summary>
        /// Dynamic8
        /// </summary>
        private string _dynamic8 = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareActiveBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareActiveBase(
                    long declareActiveId, 
                    long teacherId, 
                    string activeKey, 
                    System.DateTime date, 
                    string location, 
                    string level, 
                    string contentValue, 
                    string attachmentUrl, 
                    string attachmentName, 
                    string dynamic1, 
                    string dynamic2, 
                    string dynamic3, 
                    string dynamic4, 
                    string dynamic5, 
                    string dynamic6, 
                    string dynamic7, 
                    string dynamic8) {
            _declareActiveId = declareActiveId;
            _teacherId = teacherId;
            _activeKey = activeKey;
            _date = date;
            _location = location;
            _level = level;
            _contentValue = contentValue;
            _attachmentUrl = attachmentUrl;
            _attachmentName = attachmentName;
            _dynamic1 = dynamic1;
            _dynamic2 = dynamic2;
            _dynamic3 = dynamic3;
            _dynamic4 = dynamic4;
            _dynamic5 = dynamic5;
            _dynamic6 = dynamic6;
            _dynamic7 = dynamic7;
            _dynamic8 = dynamic8;
        }
        
        /// <summary>
        /// DeclareActiveId
        /// </summary>
        [Display(Name="ID")]
        public virtual long DeclareActiveId {
            get {
                return _declareActiveId;
            }
            set {
                _declareActiveId = value;
            }
        }
        
        /// <summary>
        /// DeclareActiveId APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareActiveIdDef {
            get {
                return APDBDef.DeclareActive.DeclareActiveId;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.DeclareActive.TeacherId;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        [Display(Name="内容类别")]
        [StringLength(200)]
        public virtual string ActiveKey {
            get {
                return _activeKey;
            }
            set {
                _activeKey = value;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割 APColumnDef
        /// </summary>
        public static StringAPColumnDef ActiveKeyDef {
            get {
                return APDBDef.DeclareActive.ActiveKey;
            }
        }
        
        /// <summary>
        /// Date
        /// </summary>
        [Display(Name="时间")]
        public virtual System.DateTime Date {
            get {
                return _date;
            }
            set {
                _date = value;
            }
        }
        
        /// <summary>
        /// Date APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef DateDef {
            get {
                return APDBDef.DeclareActive.Date;
            }
        }
        
        /// <summary>
        /// Location
        /// </summary>
        [Display(Name="地点")]
        [StringLength(100)]
        public virtual string Location {
            get {
                return _location;
            }
            set {
                _location = value;
            }
        }
        
        /// <summary>
        /// Location APColumnDef
        /// </summary>
        public static StringAPColumnDef LocationDef {
            get {
                return APDBDef.DeclareActive.Location;
            }
        }
        
        /// <summary>
        /// Level
        /// </summary>
        [Display(Name="等级")]
        [StringLength(100)]
        public virtual string Level {
            get {
                return _level;
            }
            set {
                _level = value;
            }
        }
        
        /// <summary>
        /// Level APColumnDef
        /// </summary>
        public static StringAPColumnDef LevelDef {
            get {
                return APDBDef.DeclareActive.Level;
            }
        }
        
        /// <summary>
        /// ContentValue
        /// </summary>
        [Display(Name="内容")]
        [StringLength(30000)]
        public virtual string ContentValue {
            get {
                return _contentValue;
            }
            set {
                _contentValue = value;
            }
        }
        
        /// <summary>
        /// ContentValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentValueDef {
            get {
                return APDBDef.DeclareActive.ContentValue;
            }
        }
        
        /// <summary>
        /// AttachmentUrl
        /// </summary>
        [Display(Name="附件路径")]
        [StringLength(255)]
        public virtual string AttachmentUrl {
            get {
                return _attachmentUrl;
            }
            set {
                _attachmentUrl = value;
            }
        }
        
        /// <summary>
        /// AttachmentUrl APColumnDef
        /// </summary>
        public static StringAPColumnDef AttachmentUrlDef {
            get {
                return APDBDef.DeclareActive.AttachmentUrl;
            }
        }
        
        /// <summary>
        /// AttachmentName
        /// </summary>
        [Display(Name="附件名称")]
        [StringLength(40)]
        public virtual string AttachmentName {
            get {
                return _attachmentName;
            }
            set {
                _attachmentName = value;
            }
        }
        
        /// <summary>
        /// AttachmentName APColumnDef
        /// </summary>
        public static StringAPColumnDef AttachmentNameDef {
            get {
                return APDBDef.DeclareActive.AttachmentName;
            }
        }
        
        /// <summary>
        /// Dynamic1
        /// </summary>
        [Display(Name="动态内容1")]
        [StringLength(2000)]
        public virtual string Dynamic1 {
            get {
                return _dynamic1;
            }
            set {
                _dynamic1 = value;
            }
        }
        
        /// <summary>
        /// Dynamic1 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic1Def {
            get {
                return APDBDef.DeclareActive.Dynamic1;
            }
        }
        
        /// <summary>
        /// Dynamic2
        /// </summary>
        [Display(Name="动态内容2")]
        [StringLength(2000)]
        public virtual string Dynamic2 {
            get {
                return _dynamic2;
            }
            set {
                _dynamic2 = value;
            }
        }
        
        /// <summary>
        /// Dynamic2 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic2Def {
            get {
                return APDBDef.DeclareActive.Dynamic2;
            }
        }
        
        /// <summary>
        /// Dynamic3
        /// </summary>
        [Display(Name="动态内容3")]
        [StringLength(2000)]
        public virtual string Dynamic3 {
            get {
                return _dynamic3;
            }
            set {
                _dynamic3 = value;
            }
        }
        
        /// <summary>
        /// Dynamic3 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic3Def {
            get {
                return APDBDef.DeclareActive.Dynamic3;
            }
        }
        
        /// <summary>
        /// Dynamic4
        /// </summary>
        [Display(Name="动态内容4")]
        [StringLength(2000)]
        public virtual string Dynamic4 {
            get {
                return _dynamic4;
            }
            set {
                _dynamic4 = value;
            }
        }
        
        /// <summary>
        /// Dynamic4 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic4Def {
            get {
                return APDBDef.DeclareActive.Dynamic4;
            }
        }
        
        /// <summary>
        /// Dynamic5
        /// </summary>
        [Display(Name="动态内容5")]
        [StringLength(2000)]
        public virtual string Dynamic5 {
            get {
                return _dynamic5;
            }
            set {
                _dynamic5 = value;
            }
        }
        
        /// <summary>
        /// Dynamic5 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic5Def {
            get {
                return APDBDef.DeclareActive.Dynamic5;
            }
        }
        
        /// <summary>
        /// Dynamic6
        /// </summary>
        [Display(Name="动态内容6")]
        [StringLength(2000)]
        public virtual string Dynamic6 {
            get {
                return _dynamic6;
            }
            set {
                _dynamic6 = value;
            }
        }
        
        /// <summary>
        /// Dynamic6 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic6Def {
            get {
                return APDBDef.DeclareActive.Dynamic6;
            }
        }
        
        /// <summary>
        /// Dynamic7
        /// </summary>
        [Display(Name="动态内容7")]
        [StringLength(2000)]
        public virtual string Dynamic7 {
            get {
                return _dynamic7;
            }
            set {
                _dynamic7 = value;
            }
        }
        
        /// <summary>
        /// Dynamic7 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic7Def {
            get {
                return APDBDef.DeclareActive.Dynamic7;
            }
        }
        
        /// <summary>
        /// Dynamic8
        /// </summary>
        [Display(Name="动态内容8")]
        [StringLength(2000)]
        public virtual string Dynamic8 {
            get {
                return _dynamic8;
            }
            set {
                _dynamic8 = value;
            }
        }
        
        /// <summary>
        /// Dynamic8 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic8Def {
            get {
                return APDBDef.DeclareActive.Dynamic8;
            }
        }
        
        /// <summary>
        /// DeclareActiveTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclareActiveTableDef TableDef {
            get {
                return APDBDef.DeclareActive;
            }
        }
        
        /// <summary>
        /// DeclareActiveTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.DeclareActive.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(DeclareActive data) {
            DeclareActiveId = data.DeclareActiveId;
            TeacherId = data.TeacherId;
            ActiveKey = data.ActiveKey;
            Date = data.Date;
            Location = data.Location;
            Level = data.Level;
            ContentValue = data.ContentValue;
            AttachmentUrl = data.AttachmentUrl;
            AttachmentName = data.AttachmentName;
            Dynamic1 = data.Dynamic1;
            Dynamic2 = data.Dynamic2;
            Dynamic3 = data.Dynamic3;
            Dynamic4 = data.Dynamic4;
            Dynamic5 = data.Dynamic5;
            Dynamic6 = data.Dynamic6;
            Dynamic7 = data.Dynamic7;
            Dynamic8 = data.Dynamic8;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(DeclareActive data) {
            if ((DeclareActiveId != data.DeclareActiveId)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((ActiveKey != data.ActiveKey)) {
                return false;
            }
            if ((Date != data.Date)) {
                return false;
            }
            if ((Location != data.Location)) {
                return false;
            }
            if ((Level != data.Level)) {
                return false;
            }
            if ((ContentValue != data.ContentValue)) {
                return false;
            }
            if ((AttachmentUrl != data.AttachmentUrl)) {
                return false;
            }
            if ((AttachmentName != data.AttachmentName)) {
                return false;
            }
            if ((Dynamic1 != data.Dynamic1)) {
                return false;
            }
            if ((Dynamic2 != data.Dynamic2)) {
                return false;
            }
            if ((Dynamic3 != data.Dynamic3)) {
                return false;
            }
            if ((Dynamic4 != data.Dynamic4)) {
                return false;
            }
            if ((Dynamic5 != data.Dynamic5)) {
                return false;
            }
            if ((Dynamic6 != data.Dynamic6)) {
                return false;
            }
            if ((Dynamic7 != data.Dynamic7)) {
                return false;
            }
            if ((Dynamic8 != data.Dynamic8)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclareActiveBpl.Insert(((DeclareActive)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclareActiveBpl.Update(((DeclareActive)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long declareActiveId, Object metadata) {
            APBplDef.DeclareActiveBpl.UpdatePartial(declareActiveId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long declareActiveId) {
            APBplDef.DeclareActiveBpl.PrimaryDelete(declareActiveId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclareActiveBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclareActiveBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static DeclareActive PrimaryGet(long declareActiveId) {
            return APBplDef.DeclareActiveBpl.PrimaryGet(declareActiveId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclareActiveBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclareActiveBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclareActiveBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<DeclareActive> GetAll() {
            return APBplDef.DeclareActiveBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报-活动
    /// </summary>
    [Serializable()]
    public partial class DeclareActive : DeclareActiveBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareActive() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareActive(
                    long declareActiveId, 
                    long teacherId, 
                    string activeKey, 
                    System.DateTime date, 
                    string location, 
                    string level, 
                    string contentValue, 
                    string attachmentUrl, 
                    string attachmentName, 
                    string dynamic1, 
                    string dynamic2, 
                    string dynamic3, 
                    string dynamic4, 
                    string dynamic5, 
                    string dynamic6, 
                    string dynamic7, 
                    string dynamic8) : 
                base(declareActiveId, teacherId, activeKey, date, location, level, contentValue, attachmentUrl, attachmentName, dynamic1, dynamic2, dynamic3, dynamic4, dynamic5, dynamic6, dynamic7, dynamic8) {
        }
    }
    
    /// <summary>
    /// 申报-科研成果 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclareAchievementBase {
        
        /// <summary>
        /// DeclareAchievementId
        /// </summary>
        private long _declareAchievementId;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        private string _achievementKey = string.Empty;
        
        /// <summary>
        /// Date
        /// </summary>
        private string _date = string.Empty;
        
        /// <summary>
        /// DateRegion
        /// </summary>
        private string _dateRegion = string.Empty;
        
        /// <summary>
        /// Location
        /// </summary>
        private string _location = string.Empty;
        
        /// <summary>
        /// Level
        /// </summary>
        private string _level = string.Empty;
        
        /// <summary>
        /// NameOrTitle
        /// </summary>
        private string _nameOrTitle = string.Empty;
        
        /// <summary>
        /// Dynamic1
        /// </summary>
        private string _dynamic1 = string.Empty;
        
        /// <summary>
        /// Dynamic2
        /// </summary>
        private string _dynamic2 = string.Empty;
        
        /// <summary>
        /// Dynamic3
        /// </summary>
        private string _dynamic3 = string.Empty;
        
        /// <summary>
        /// Dynamic4
        /// </summary>
        private string _dynamic4 = string.Empty;
        
        /// <summary>
        /// Dynamic5
        /// </summary>
        private string _dynamic5 = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareAchievementBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareAchievementBase(long declareAchievementId, long teacherId, string achievementKey, string date, string dateRegion, string location, string level, string nameOrTitle, string dynamic1, string dynamic2, string dynamic3, string dynamic4, string dynamic5) {
            _declareAchievementId = declareAchievementId;
            _teacherId = teacherId;
            _achievementKey = achievementKey;
            _date = date;
            _dateRegion = dateRegion;
            _location = location;
            _level = level;
            _nameOrTitle = nameOrTitle;
            _dynamic1 = dynamic1;
            _dynamic2 = dynamic2;
            _dynamic3 = dynamic3;
            _dynamic4 = dynamic4;
            _dynamic5 = dynamic5;
        }
        
        /// <summary>
        /// DeclareAchievementId
        /// </summary>
        [Display(Name="成果ID")]
        public virtual long DeclareAchievementId {
            get {
                return _declareAchievementId;
            }
            set {
                _declareAchievementId = value;
            }
        }
        
        /// <summary>
        /// DeclareAchievementId APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareAchievementIdDef {
            get {
                return APDBDef.DeclareAchievement.DeclareAchievementId;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.DeclareAchievement.TeacherId;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        [Display(Name="内容类别")]
        [StringLength(200)]
        public virtual string AchievementKey {
            get {
                return _achievementKey;
            }
            set {
                _achievementKey = value;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割 APColumnDef
        /// </summary>
        public static StringAPColumnDef AchievementKeyDef {
            get {
                return APDBDef.DeclareAchievement.AchievementKey;
            }
        }
        
        /// <summary>
        /// Date
        /// </summary>
        [Display(Name="时间")]
        [StringLength(100)]
        public virtual string Date {
            get {
                return _date;
            }
            set {
                _date = value;
            }
        }
        
        /// <summary>
        /// Date APColumnDef
        /// </summary>
        public static StringAPColumnDef DateDef {
            get {
                return APDBDef.DeclareAchievement.Date;
            }
        }
        
        /// <summary>
        /// DateRegion
        /// </summary>
        [Display(Name="时间区间")]
        [StringLength(100)]
        public virtual string DateRegion {
            get {
                return _dateRegion;
            }
            set {
                _dateRegion = value;
            }
        }
        
        /// <summary>
        /// DateRegion APColumnDef
        /// </summary>
        public static StringAPColumnDef DateRegionDef {
            get {
                return APDBDef.DeclareAchievement.DateRegion;
            }
        }
        
        /// <summary>
        /// Location
        /// </summary>
        [Display(Name="地点")]
        [StringLength(100)]
        public virtual string Location {
            get {
                return _location;
            }
            set {
                _location = value;
            }
        }
        
        /// <summary>
        /// Location APColumnDef
        /// </summary>
        public static StringAPColumnDef LocationDef {
            get {
                return APDBDef.DeclareAchievement.Location;
            }
        }
        
        /// <summary>
        /// Level
        /// </summary>
        [Display(Name="等级")]
        [StringLength(100)]
        public virtual string Level {
            get {
                return _level;
            }
            set {
                _level = value;
            }
        }
        
        /// <summary>
        /// Level APColumnDef
        /// </summary>
        public static StringAPColumnDef LevelDef {
            get {
                return APDBDef.DeclareAchievement.Level;
            }
        }
        
        /// <summary>
        /// NameOrTitle
        /// </summary>
        [Display(Name="名称或标题")]
        [StringLength(100)]
        public virtual string NameOrTitle {
            get {
                return _nameOrTitle;
            }
            set {
                _nameOrTitle = value;
            }
        }
        
        /// <summary>
        /// NameOrTitle APColumnDef
        /// </summary>
        public static StringAPColumnDef NameOrTitleDef {
            get {
                return APDBDef.DeclareAchievement.NameOrTitle;
            }
        }
        
        /// <summary>
        /// Dynamic1
        /// </summary>
        [Display(Name="动态内容1")]
        [StringLength(2000)]
        public virtual string Dynamic1 {
            get {
                return _dynamic1;
            }
            set {
                _dynamic1 = value;
            }
        }
        
        /// <summary>
        /// Dynamic1 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic1Def {
            get {
                return APDBDef.DeclareAchievement.Dynamic1;
            }
        }
        
        /// <summary>
        /// Dynamic2
        /// </summary>
        [Display(Name="动态内容2")]
        [StringLength(2000)]
        public virtual string Dynamic2 {
            get {
                return _dynamic2;
            }
            set {
                _dynamic2 = value;
            }
        }
        
        /// <summary>
        /// Dynamic2 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic2Def {
            get {
                return APDBDef.DeclareAchievement.Dynamic2;
            }
        }
        
        /// <summary>
        /// Dynamic3
        /// </summary>
        [Display(Name="动态内容3")]
        [StringLength(2000)]
        public virtual string Dynamic3 {
            get {
                return _dynamic3;
            }
            set {
                _dynamic3 = value;
            }
        }
        
        /// <summary>
        /// Dynamic3 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic3Def {
            get {
                return APDBDef.DeclareAchievement.Dynamic3;
            }
        }
        
        /// <summary>
        /// Dynamic4
        /// </summary>
        [Display(Name="动态内容4")]
        [StringLength(2000)]
        public virtual string Dynamic4 {
            get {
                return _dynamic4;
            }
            set {
                _dynamic4 = value;
            }
        }
        
        /// <summary>
        /// Dynamic4 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic4Def {
            get {
                return APDBDef.DeclareAchievement.Dynamic4;
            }
        }
        
        /// <summary>
        /// Dynamic5
        /// </summary>
        [Display(Name="动态内容5")]
        [StringLength(2000)]
        public virtual string Dynamic5 {
            get {
                return _dynamic5;
            }
            set {
                _dynamic5 = value;
            }
        }
        
        /// <summary>
        /// Dynamic5 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic5Def {
            get {
                return APDBDef.DeclareAchievement.Dynamic5;
            }
        }
        
        /// <summary>
        /// DeclareAchievementTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclareAchievementTableDef TableDef {
            get {
                return APDBDef.DeclareAchievement;
            }
        }
        
        /// <summary>
        /// DeclareAchievementTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.DeclareAchievement.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(DeclareAchievement data) {
            DeclareAchievementId = data.DeclareAchievementId;
            TeacherId = data.TeacherId;
            AchievementKey = data.AchievementKey;
            Date = data.Date;
            DateRegion = data.DateRegion;
            Location = data.Location;
            Level = data.Level;
            NameOrTitle = data.NameOrTitle;
            Dynamic1 = data.Dynamic1;
            Dynamic2 = data.Dynamic2;
            Dynamic3 = data.Dynamic3;
            Dynamic4 = data.Dynamic4;
            Dynamic5 = data.Dynamic5;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(DeclareAchievement data) {
            if ((DeclareAchievementId != data.DeclareAchievementId)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((AchievementKey != data.AchievementKey)) {
                return false;
            }
            if ((Date != data.Date)) {
                return false;
            }
            if ((DateRegion != data.DateRegion)) {
                return false;
            }
            if ((Location != data.Location)) {
                return false;
            }
            if ((Level != data.Level)) {
                return false;
            }
            if ((NameOrTitle != data.NameOrTitle)) {
                return false;
            }
            if ((Dynamic1 != data.Dynamic1)) {
                return false;
            }
            if ((Dynamic2 != data.Dynamic2)) {
                return false;
            }
            if ((Dynamic3 != data.Dynamic3)) {
                return false;
            }
            if ((Dynamic4 != data.Dynamic4)) {
                return false;
            }
            if ((Dynamic5 != data.Dynamic5)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclareAchievementBpl.Insert(((DeclareAchievement)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclareAchievementBpl.Update(((DeclareAchievement)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long declareAchievementId, Object metadata) {
            APBplDef.DeclareAchievementBpl.UpdatePartial(declareAchievementId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long declareAchievementId) {
            APBplDef.DeclareAchievementBpl.PrimaryDelete(declareAchievementId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclareAchievementBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclareAchievementBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static DeclareAchievement PrimaryGet(long declareAchievementId) {
            return APBplDef.DeclareAchievementBpl.PrimaryGet(declareAchievementId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareAchievement> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclareAchievementBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareAchievement> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclareAchievementBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareAchievement> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclareAchievementBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<DeclareAchievement> GetAll() {
            return APBplDef.DeclareAchievementBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报-科研成果
    /// </summary>
    [Serializable()]
    public partial class DeclareAchievement : DeclareAchievementBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareAchievement() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareAchievement(long declareAchievementId, long teacherId, string achievementKey, string date, string dateRegion, string location, string level, string nameOrTitle, string dynamic1, string dynamic2, string dynamic3, string dynamic4, string dynamic5) : 
                base(declareAchievementId, teacherId, achievementKey, date, dateRegion, location, level, nameOrTitle, dynamic1, dynamic2, dynamic3, dynamic4, dynamic5) {
        }
    }
    
    /// <summary>
    /// 申报-制度建设 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclareOrgConstBase {
        
        /// <summary>
        /// DeclareOrgConstId
        /// </summary>
        private long _declareOrgConstId;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// Content
        /// </summary>
        private string _content = string.Empty;
        
        /// <summary>
        /// Work
        /// </summary>
        private string _work = string.Empty;
        
        /// <summary>
        /// Remark
        /// </summary>
        private string _remark = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareOrgConstBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareOrgConstBase(long declareOrgConstId, long teacherId, string content, string work, string remark) {
            _declareOrgConstId = declareOrgConstId;
            _teacherId = teacherId;
            _content = content;
            _work = work;
            _remark = remark;
        }
        
        /// <summary>
        /// DeclareOrgConstId
        /// </summary>
        [Display(Name="建设ID")]
        public virtual long DeclareOrgConstId {
            get {
                return _declareOrgConstId;
            }
            set {
                _declareOrgConstId = value;
            }
        }
        
        /// <summary>
        /// DeclareOrgConstId APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareOrgConstIdDef {
            get {
                return APDBDef.DeclareOrgConst.DeclareOrgConstId;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.DeclareOrgConst.TeacherId;
            }
        }
        
        /// <summary>
        /// Content
        /// </summary>
        [Display(Name="内容")]
        [StringLength(2000)]
        public virtual string Content {
            get {
                return _content;
            }
            set {
                _content = value;
            }
        }
        
        /// <summary>
        /// Content APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentDef {
            get {
                return APDBDef.DeclareOrgConst.Content;
            }
        }
        
        /// <summary>
        /// Work
        /// </summary>
        [Display(Name="开展情况")]
        [StringLength(2000)]
        public virtual string Work {
            get {
                return _work;
            }
            set {
                _work = value;
            }
        }
        
        /// <summary>
        /// Work APColumnDef
        /// </summary>
        public static StringAPColumnDef WorkDef {
            get {
                return APDBDef.DeclareOrgConst.Work;
            }
        }
        
        /// <summary>
        /// Remark
        /// </summary>
        [Display(Name="备注")]
        [StringLength(2000)]
        public virtual string Remark {
            get {
                return _remark;
            }
            set {
                _remark = value;
            }
        }
        
        /// <summary>
        /// Remark APColumnDef
        /// </summary>
        public static StringAPColumnDef RemarkDef {
            get {
                return APDBDef.DeclareOrgConst.Remark;
            }
        }
        
        /// <summary>
        /// DeclareOrgConstTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclareOrgConstTableDef TableDef {
            get {
                return APDBDef.DeclareOrgConst;
            }
        }
        
        /// <summary>
        /// DeclareOrgConstTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.DeclareOrgConst.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(DeclareOrgConst data) {
            DeclareOrgConstId = data.DeclareOrgConstId;
            TeacherId = data.TeacherId;
            Content = data.Content;
            Work = data.Work;
            Remark = data.Remark;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(DeclareOrgConst data) {
            if ((DeclareOrgConstId != data.DeclareOrgConstId)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((Content != data.Content)) {
                return false;
            }
            if ((Work != data.Work)) {
                return false;
            }
            if ((Remark != data.Remark)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclareOrgConstBpl.Insert(((DeclareOrgConst)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclareOrgConstBpl.Update(((DeclareOrgConst)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long declareOrgConstId, Object metadata) {
            APBplDef.DeclareOrgConstBpl.UpdatePartial(declareOrgConstId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long declareOrgConstId) {
            APBplDef.DeclareOrgConstBpl.PrimaryDelete(declareOrgConstId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclareOrgConstBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclareOrgConstBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static DeclareOrgConst PrimaryGet(long declareOrgConstId) {
            return APBplDef.DeclareOrgConstBpl.PrimaryGet(declareOrgConstId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareOrgConst> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclareOrgConstBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareOrgConst> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclareOrgConstBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareOrgConst> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclareOrgConstBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<DeclareOrgConst> GetAll() {
            return APBplDef.DeclareOrgConstBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报-制度建设
    /// </summary>
    [Serializable()]
    public partial class DeclareOrgConst : DeclareOrgConstBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareOrgConst() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareOrgConst(long declareOrgConstId, long teacherId, string content, string work, string remark) : 
                base(declareOrgConstId, teacherId, content, work, remark) {
        }
    }
}
