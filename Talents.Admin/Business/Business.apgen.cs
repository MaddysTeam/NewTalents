//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Business {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Data;
    using System.ComponentModel.DataAnnotations;
    using Symber.Web.Data;
    using Symber.Web.Identity;
    
    
    /// <summary>
    /// APDBDef 是一个自动生成的具有 Partial 修饰的类，用于定义 APTableDef 和 APRelationDef。你可以添加同名的 Partial 类来扩充功能。
    /// </summary>
    public partial class APDBDef : APDatabase {
        
        private static PicklistTableDef _picklist;
        
        private static PicklistItemTableDef _picklistItem;
        
        private static School_InfoTableDef _school_Info;
        
        private static Staff_InfoTableDef _staff_Info;
        
        private static BzUserTableDef _bzUser;
        
        private static BzUserClaimTableDef _bzUserClaim;
        
        private static BzUserProfileTableDef _bzUserProfile;
        
        private static BzRoleTableDef _bzRole;
        
        private static BzUserRoleTableDef _bzUserRole;
        
        private static ProfileModifyPeriodTableDef _profileModifyPeriod;
        
        private static BzUserProfileHistoryTableDef _bzUserProfileHistory;
        
        private static DeclareBaseHistoryTableDef _declareBaseHistory;
        
        private static CompanyTableDef _company;
        
        private static CompanyAccesserTableDef _companyAccesser;
        
        private static CompanyDeclareTableDef _companyDeclare;
        
        private static BzPermissionTableDef _bzPermission;
        
        private static BzRolePermissionTableDef _bzRolePermission;
        
        private static DeclareBaseTableDef _declareBase;
        
        private static DeclareResumeTableDef _declareResume;
        
        private static DeclareContentTableDef _declareContent;
        
        private static DeclareActiveTableDef _declareActive;
        
        private static DeclareAchievementTableDef _declareAchievement;
        
        private static DeclareOrgConstTableDef _declareOrgConst;
        
        private static DeclareReviewTableDef _declareReview;
        
        private static DeclareMaterialTableDef _declareMaterial;
        
        private static DeclareProfileTableDef _declareProfile;
        
        private static DeclarePeriodTableDef _declarePeriod;
        
        private static TeamMemberTableDef _teamMember;
        
        private static TeamContentTableDef _teamContent;
        
        private static TeamActiveTableDef _teamActive;
        
        private static TeamActiveResultTableDef _teamActiveResult;
        
        private static TeamActiveItemTableDef _teamActiveItem;
        
        private static TeamSpecialCourseTableDef _teamSpecialCourse;
        
        private static TeamSpecialCourseItemTableDef _teamSpecialCourseItem;
        
        private static ExpGroupTableDef _expGroup;
        
        private static ExpGroupMemberTableDef _expGroupMember;
        
        private static ExpectTableDef _expect;
        
        private static ExpGroupTargetTableDef _expGroupTarget;
        
        private static EvalPeriodTableDef _evalPeriod;
        
        private static EvalSchoolResultTableDef _evalSchoolResult;
        
        private static EvalSchoolResultItemTableDef _evalSchoolResultItem;
        
        private static EvalVolumnResultTableDef _evalVolumnResult;
        
        private static EvalVolumnResultItemTableDef _evalVolumnResultItem;
        
        private static EvalQualitySubmitResultTableDef _evalQualitySubmitResult;
        
        private static EvalQualityResultTableDef _evalQualityResult;
        
        private static EvalQualityResultItemTableDef _evalQualityResultItem;
        
        private static NewsTableDef _news;
        
        private static HomePageImageTableDef _homePageImage;
        
        private static AttachmentsTableDef _attachments;
        
        private static NoticeTableDef _notice;
        
        private static ReadNoticeTableDef _readNotice;
        
        private static ShareTableDef _share;
        
        private static APDalProvider staticProvider = Provider;
        
        private APDalDef.PicklistDal _picklistDal;
        
        private APDalDef.PicklistItemDal _picklistItemDal;
        
        private APDalDef.School_InfoDal _school_InfoDal;
        
        private APDalDef.Staff_InfoDal _staff_InfoDal;
        
        private APDalDef.BzUserDal _bzUserDal;
        
        private APDalDef.BzUserClaimDal _bzUserClaimDal;
        
        private APDalDef.BzUserProfileDal _bzUserProfileDal;
        
        private APDalDef.BzRoleDal _bzRoleDal;
        
        private APDalDef.BzUserRoleDal _bzUserRoleDal;
        
        private APDalDef.ProfileModifyPeriodDal _profileModifyPeriodDal;
        
        private APDalDef.BzUserProfileHistoryDal _bzUserProfileHistoryDal;
        
        private APDalDef.DeclareBaseHistoryDal _declareBaseHistoryDal;
        
        private APDalDef.CompanyDal _companyDal;
        
        private APDalDef.CompanyAccesserDal _companyAccesserDal;
        
        private APDalDef.CompanyDeclareDal _companyDeclareDal;
        
        private APDalDef.BzPermissionDal _bzPermissionDal;
        
        private APDalDef.BzRolePermissionDal _bzRolePermissionDal;
        
        private APDalDef.DeclareBaseDal _declareBaseDal;
        
        private APDalDef.DeclareResumeDal _declareResumeDal;
        
        private APDalDef.DeclareContentDal _declareContentDal;
        
        private APDalDef.DeclareActiveDal _declareActiveDal;
        
        private APDalDef.DeclareAchievementDal _declareAchievementDal;
        
        private APDalDef.DeclareOrgConstDal _declareOrgConstDal;
        
        private APDalDef.DeclareReviewDal _declareReviewDal;
        
        private APDalDef.DeclareMaterialDal _declareMaterialDal;
        
        private APDalDef.DeclareProfileDal _declareProfileDal;
        
        private APDalDef.DeclarePeriodDal _declarePeriodDal;
        
        private APDalDef.TeamMemberDal _teamMemberDal;
        
        private APDalDef.TeamContentDal _teamContentDal;
        
        private APDalDef.TeamActiveDal _teamActiveDal;
        
        private APDalDef.TeamActiveResultDal _teamActiveResultDal;
        
        private APDalDef.TeamActiveItemDal _teamActiveItemDal;
        
        private APDalDef.TeamSpecialCourseDal _teamSpecialCourseDal;
        
        private APDalDef.TeamSpecialCourseItemDal _teamSpecialCourseItemDal;
        
        private APDalDef.ExpGroupDal _expGroupDal;
        
        private APDalDef.ExpGroupMemberDal _expGroupMemberDal;
        
        private APDalDef.ExpectDal _expectDal;
        
        private APDalDef.ExpGroupTargetDal _expGroupTargetDal;
        
        private APDalDef.EvalPeriodDal _evalPeriodDal;
        
        private APDalDef.EvalSchoolResultDal _evalSchoolResultDal;
        
        private APDalDef.EvalSchoolResultItemDal _evalSchoolResultItemDal;
        
        private APDalDef.EvalVolumnResultDal _evalVolumnResultDal;
        
        private APDalDef.EvalVolumnResultItemDal _evalVolumnResultItemDal;
        
        private APDalDef.EvalQualitySubmitResultDal _evalQualitySubmitResultDal;
        
        private APDalDef.EvalQualityResultDal _evalQualityResultDal;
        
        private APDalDef.EvalQualityResultItemDal _evalQualityResultItemDal;
        
        private APDalDef.NewsDal _newsDal;
        
        private APDalDef.HomePageImageDal _homePageImageDal;
        
        private APDalDef.AttachmentsDal _attachmentsDal;
        
        private APDalDef.NoticeDal _noticeDal;
        
        private APDalDef.ReadNoticeDal _readNoticeDal;
        
        private APDalDef.ShareDal _shareDal;
        
        public APDBDef() : 
                base(staticProvider) {
        }
        
        public APDBDef(string providerName) : 
                base(providerName) {
        }
        
        /// <summary>
        /// 选项列表 TableDef
        /// </summary>
        public static PicklistTableDef Picklist {
            get {
                if ((_picklist == null)) {
                    _picklist = new PicklistTableDef("Picklist");
                }
                return _picklist;
            }
        }
        
        /// <summary>
        /// 选项列表项 TableDef
        /// </summary>
        public static PicklistItemTableDef PicklistItem {
            get {
                if ((_picklistItem == null)) {
                    _picklistItem = new PicklistItemTableDef("PicklistItem");
                }
                return _picklistItem;
            }
        }
        
        /// <summary>
        /// 学校基础数据表 TableDef
        /// </summary>
        public static School_InfoTableDef School_Info {
            get {
                if ((_school_Info == null)) {
                    _school_Info = new School_InfoTableDef("School_Info");
                }
                return _school_Info;
            }
        }
        
        /// <summary>
        /// 教职工基础数据表 TableDef
        /// </summary>
        public static Staff_InfoTableDef Staff_Info {
            get {
                if ((_staff_Info == null)) {
                    _staff_Info = new Staff_InfoTableDef("Staff_Info");
                }
                return _staff_Info;
            }
        }
        
        /// <summary>
        /// 用户 TableDef
        /// </summary>
        public static BzUserTableDef BzUser {
            get {
                if ((_bzUser == null)) {
                    _bzUser = new BzUserTableDef("BzUser");
                }
                return _bzUser;
            }
        }
        
        /// <summary>
        /// UserClaim TableDef
        /// </summary>
        public static BzUserClaimTableDef BzUserClaim {
            get {
                if ((_bzUserClaim == null)) {
                    _bzUserClaim = new BzUserClaimTableDef("BzUserClaim");
                }
                return _bzUserClaim;
            }
        }
        
        /// <summary>
        /// 用户简档 TableDef
        /// </summary>
        public static BzUserProfileTableDef BzUserProfile {
            get {
                if ((_bzUserProfile == null)) {
                    _bzUserProfile = new BzUserProfileTableDef("BzUserProfile");
                }
                return _bzUserProfile;
            }
        }
        
        /// <summary>
        /// 角色 TableDef
        /// </summary>
        public static BzRoleTableDef BzRole {
            get {
                if ((_bzRole == null)) {
                    _bzRole = new BzRoleTableDef("BzRole");
                }
                return _bzRole;
            }
        }
        
        /// <summary>
        /// 用户角色 TableDef
        /// </summary>
        public static BzUserRoleTableDef BzUserRole {
            get {
                if ((_bzUserRole == null)) {
                    _bzUserRole = new BzUserRoleTableDef("BzUserRole");
                }
                return _bzUserRole;
            }
        }
        
        /// <summary>
        /// 用户信息修改周期表 TableDef
        /// </summary>
        public static ProfileModifyPeriodTableDef ProfileModifyPeriod {
            get {
                if ((_profileModifyPeriod == null)) {
                    _profileModifyPeriod = new ProfileModifyPeriodTableDef("ProfileModifyPeriod");
                }
                return _profileModifyPeriod;
            }
        }
        
        /// <summary>
        /// 用户简档历史表 TableDef
        /// </summary>
        public static BzUserProfileHistoryTableDef BzUserProfileHistory {
            get {
                if ((_bzUserProfileHistory == null)) {
                    _bzUserProfileHistory = new BzUserProfileHistoryTableDef("BzUserProfileHistory");
                }
                return _bzUserProfileHistory;
            }
        }
        
        /// <summary>
        /// 申报历史表 TableDef
        /// </summary>
        public static DeclareBaseHistoryTableDef DeclareBaseHistory {
            get {
                if ((_declareBaseHistory == null)) {
                    _declareBaseHistory = new DeclareBaseHistoryTableDef("DeclareBaseHistory");
                }
                return _declareBaseHistory;
            }
        }
        
        /// <summary>
        /// 单位 TableDef
        /// </summary>
        public static CompanyTableDef Company {
            get {
                if ((_company == null)) {
                    _company = new CompanyTableDef("Company");
                }
                return _company;
            }
        }
        
        /// <summary>
        /// 单位-管理员 TableDef
        /// </summary>
        public static CompanyAccesserTableDef CompanyAccesser {
            get {
                if ((_companyAccesser == null)) {
                    _companyAccesser = new CompanyAccesserTableDef("CompanyAccesser");
                }
                return _companyAccesser;
            }
        }
        
        /// <summary>
        /// 单位-申报教师 TableDef
        /// </summary>
        public static CompanyDeclareTableDef CompanyDeclare {
            get {
                if ((_companyDeclare == null)) {
                    _companyDeclare = new CompanyDeclareTableDef("CompanyDeclare");
                }
                return _companyDeclare;
            }
        }
        
        /// <summary>
        /// 权限 TableDef
        /// </summary>
        public static BzPermissionTableDef BzPermission {
            get {
                if ((_bzPermission == null)) {
                    _bzPermission = new BzPermissionTableDef("BzPermission");
                }
                return _bzPermission;
            }
        }
        
        /// <summary>
        /// 角色权限 TableDef
        /// </summary>
        public static BzRolePermissionTableDef BzRolePermission {
            get {
                if ((_bzRolePermission == null)) {
                    _bzRolePermission = new BzRolePermissionTableDef("BzRolePermission");
                }
                return _bzRolePermission;
            }
        }
        
        /// <summary>
        /// 申报 TableDef
        /// </summary>
        public static DeclareBaseTableDef DeclareBase {
            get {
                if ((_declareBase == null)) {
                    _declareBase = new DeclareBaseTableDef("DeclareBase");
                }
                return _declareBase;
            }
        }
        
        /// <summary>
        /// 申报-简历 TableDef
        /// </summary>
        public static DeclareResumeTableDef DeclareResume {
            get {
                if ((_declareResume == null)) {
                    _declareResume = new DeclareResumeTableDef("DeclareResume");
                }
                return _declareResume;
            }
        }
        
        /// <summary>
        /// 申报-内容 TableDef
        /// </summary>
        public static DeclareContentTableDef DeclareContent {
            get {
                if ((_declareContent == null)) {
                    _declareContent = new DeclareContentTableDef("DeclareContent");
                }
                return _declareContent;
            }
        }
        
        /// <summary>
        /// 申报-活动 TableDef
        /// </summary>
        public static DeclareActiveTableDef DeclareActive {
            get {
                if ((_declareActive == null)) {
                    _declareActive = new DeclareActiveTableDef("DeclareActive");
                }
                return _declareActive;
            }
        }
        
        /// <summary>
        /// 申报-科研成果 TableDef
        /// </summary>
        public static DeclareAchievementTableDef DeclareAchievement {
            get {
                if ((_declareAchievement == null)) {
                    _declareAchievement = new DeclareAchievementTableDef("DeclareAchievement");
                }
                return _declareAchievement;
            }
        }
        
        /// <summary>
        /// 申报-制度建设 TableDef
        /// </summary>
        public static DeclareOrgConstTableDef DeclareOrgConst {
            get {
                if ((_declareOrgConst == null)) {
                    _declareOrgConst = new DeclareOrgConstTableDef("DeclareOrgConst");
                }
                return _declareOrgConst;
            }
        }
        
        /// <summary>
        /// 申报审核 TableDef
        /// </summary>
        public static DeclareReviewTableDef DeclareReview {
            get {
                if ((_declareReview == null)) {
                    _declareReview = new DeclareReviewTableDef("DeclareReview");
                }
                return _declareReview;
            }
        }
        
        /// <summary>
        /// 申报材料，用于申报流程 TableDef
        /// </summary>
        public static DeclareMaterialTableDef DeclareMaterial {
            get {
                if ((_declareMaterial == null)) {
                    _declareMaterial = new DeclareMaterialTableDef("DeclareMaterial");
                }
                return _declareMaterial;
            }
        }
        
        /// <summary>
        /// 申报材料，基本信息 TableDef
        /// </summary>
        public static DeclareProfileTableDef DeclareProfile {
            get {
                if ((_declareProfile == null)) {
                    _declareProfile = new DeclareProfileTableDef("DeclareProfile");
                }
                return _declareProfile;
            }
        }
        
        /// <summary>
        /// 申报周期 TableDef
        /// </summary>
        public static DeclarePeriodTableDef DeclarePeriod {
            get {
                if ((_declarePeriod == null)) {
                    _declarePeriod = new DeclarePeriodTableDef("DeclarePeriod");
                }
                return _declarePeriod;
            }
        }
        
        /// <summary>
        /// 梯队-学员 TableDef
        /// </summary>
        public static TeamMemberTableDef TeamMember {
            get {
                if ((_teamMember == null)) {
                    _teamMember = new TeamMemberTableDef("TeamMember");
                }
                return _teamMember;
            }
        }
        
        /// <summary>
        /// 梯队-内容 TableDef
        /// </summary>
        public static TeamContentTableDef TeamContent {
            get {
                if ((_teamContent == null)) {
                    _teamContent = new TeamContentTableDef("TeamContent");
                }
                return _teamContent;
            }
        }
        
        /// <summary>
        /// 梯队-活动 TableDef
        /// </summary>
        public static TeamActiveTableDef TeamActive {
            get {
                if ((_teamActive == null)) {
                    _teamActive = new TeamActiveTableDef("TeamActive");
                }
                return _teamActive;
            }
        }
        
        /// <summary>
        /// 梯队-活动成果 TableDef
        /// </summary>
        public static TeamActiveResultTableDef TeamActiveResult {
            get {
                if ((_teamActiveResult == null)) {
                    _teamActiveResult = new TeamActiveResultTableDef("TeamActiveResult");
                }
                return _teamActiveResult;
            }
        }
        
        /// <summary>
        /// 梯队-活动内容 TableDef
        /// </summary>
        public static TeamActiveItemTableDef TeamActiveItem {
            get {
                if ((_teamActiveItem == null)) {
                    _teamActiveItem = new TeamActiveItemTableDef("TeamActiveItem");
                }
                return _teamActiveItem;
            }
        }
        
        /// <summary>
        /// 梯队-定向性课程开设登记表 TableDef
        /// </summary>
        public static TeamSpecialCourseTableDef TeamSpecialCourse {
            get {
                if ((_teamSpecialCourse == null)) {
                    _teamSpecialCourse = new TeamSpecialCourseTableDef("TeamSpecialCourse");
                }
                return _teamSpecialCourse;
            }
        }
        
        /// <summary>
        /// 梯队-定向性课程实施安排表 TableDef
        /// </summary>
        public static TeamSpecialCourseItemTableDef TeamSpecialCourseItem {
            get {
                if ((_teamSpecialCourseItem == null)) {
                    _teamSpecialCourseItem = new TeamSpecialCourseItemTableDef("TeamSpecialCourseItem");
                }
                return _teamSpecialCourseItem;
            }
        }
        
        /// <summary>
        /// 专家组 TableDef
        /// </summary>
        public static ExpGroupTableDef ExpGroup {
            get {
                if ((_expGroup == null)) {
                    _expGroup = new ExpGroupTableDef("ExpGroup");
                }
                return _expGroup;
            }
        }
        
        /// <summary>
        /// 专家组成员 TableDef
        /// </summary>
        public static ExpGroupMemberTableDef ExpGroupMember {
            get {
                if ((_expGroupMember == null)) {
                    _expGroupMember = new ExpGroupMemberTableDef("ExpGroupMember");
                }
                return _expGroupMember;
            }
        }
        
        /// <summary>
        /// 专家 TableDef
        /// </summary>
        public static ExpectTableDef Expect {
            get {
                if ((_expect == null)) {
                    _expect = new ExpectTableDef("Expect");
                }
                return _expect;
            }
        }
        
        /// <summary>
        /// 专家组-学员 TableDef
        /// </summary>
        public static ExpGroupTargetTableDef ExpGroupTarget {
            get {
                if ((_expGroupTarget == null)) {
                    _expGroupTarget = new ExpGroupTargetTableDef("ExpGroupTarget");
                }
                return _expGroupTarget;
            }
        }
        
        /// <summary>
        /// 评价-周期 TableDef
        /// </summary>
        public static EvalPeriodTableDef EvalPeriod {
            get {
                if ((_evalPeriod == null)) {
                    _evalPeriod = new EvalPeriodTableDef("EvalPeriod");
                }
                return _evalPeriod;
            }
        }
        
        /// <summary>
        /// 评价-校评-结果 TableDef
        /// </summary>
        public static EvalSchoolResultTableDef EvalSchoolResult {
            get {
                if ((_evalSchoolResult == null)) {
                    _evalSchoolResult = new EvalSchoolResultTableDef("EvalSchoolResult");
                }
                return _evalSchoolResult;
            }
        }
        
        /// <summary>
        /// 评价-校评-结果项 TableDef
        /// </summary>
        public static EvalSchoolResultItemTableDef EvalSchoolResultItem {
            get {
                if ((_evalSchoolResultItem == null)) {
                    _evalSchoolResultItem = new EvalSchoolResultItemTableDef("EvalSchoolResultItem");
                }
                return _evalSchoolResultItem;
            }
        }
        
        /// <summary>
        /// 评价-量评-结果 TableDef
        /// </summary>
        public static EvalVolumnResultTableDef EvalVolumnResult {
            get {
                if ((_evalVolumnResult == null)) {
                    _evalVolumnResult = new EvalVolumnResultTableDef("EvalVolumnResult");
                }
                return _evalVolumnResult;
            }
        }
        
        /// <summary>
        /// 评价-量评-结果项 TableDef
        /// </summary>
        public static EvalVolumnResultItemTableDef EvalVolumnResultItem {
            get {
                if ((_evalVolumnResultItem == null)) {
                    _evalVolumnResultItem = new EvalVolumnResultItemTableDef("EvalVolumnResultItem");
                }
                return _evalVolumnResultItem;
            }
        }
        
        /// <summary>
        /// 评价-质评-提交结果 TableDef
        /// </summary>
        public static EvalQualitySubmitResultTableDef EvalQualitySubmitResult {
            get {
                if ((_evalQualitySubmitResult == null)) {
                    _evalQualitySubmitResult = new EvalQualitySubmitResultTableDef("EvalQualitySubmitResult");
                }
                return _evalQualitySubmitResult;
            }
        }
        
        /// <summary>
        /// 评价-质评-结果 TableDef
        /// </summary>
        public static EvalQualityResultTableDef EvalQualityResult {
            get {
                if ((_evalQualityResult == null)) {
                    _evalQualityResult = new EvalQualityResultTableDef("EvalQualityResult");
                }
                return _evalQualityResult;
            }
        }
        
        /// <summary>
        /// 评价-质评-结果项 TableDef
        /// </summary>
        public static EvalQualityResultItemTableDef EvalQualityResultItem {
            get {
                if ((_evalQualityResultItem == null)) {
                    _evalQualityResultItem = new EvalQualityResultItemTableDef("EvalQualityResultItem");
                }
                return _evalQualityResultItem;
            }
        }
        
        /// <summary>
        /// 新闻 TableDef
        /// </summary>
        public static NewsTableDef News {
            get {
                if ((_news == null)) {
                    _news = new NewsTableDef("News");
                }
                return _news;
            }
        }
        
        /// <summary>
        /// 首页图片 TableDef
        /// </summary>
        public static HomePageImageTableDef HomePageImage {
            get {
                if ((_homePageImage == null)) {
                    _homePageImage = new HomePageImageTableDef("HomePageImage");
                }
                return _homePageImage;
            }
        }
        
        /// <summary>
        /// 附件 TableDef
        /// </summary>
        public static AttachmentsTableDef Attachments {
            get {
                if ((_attachments == null)) {
                    _attachments = new AttachmentsTableDef("Attachments");
                }
                return _attachments;
            }
        }
        
        /// <summary>
        /// 通知 TableDef
        /// </summary>
        public static NoticeTableDef Notice {
            get {
                if ((_notice == null)) {
                    _notice = new NoticeTableDef("Notice");
                }
                return _notice;
            }
        }
        
        /// <summary>
        /// 阅读通知 TableDef
        /// </summary>
        public static ReadNoticeTableDef ReadNotice {
            get {
                if ((_readNotice == null)) {
                    _readNotice = new ReadNoticeTableDef("ReadNotice");
                }
                return _readNotice;
            }
        }
        
        /// <summary>
        /// 共享 TableDef
        /// </summary>
        public static ShareTableDef Share {
            get {
                if ((_share == null)) {
                    _share = new ShareTableDef("Share");
                }
                return _share;
            }
        }
        
        /// <summary>
        /// 选项列表 Dal
        /// </summary>
        public virtual APDalDef.PicklistDal PicklistDal {
            get {
                if ((_picklistDal == null)) {
                    _picklistDal = new APDalDef.PicklistDal(this);
                }
                return _picklistDal;
            }
        }
        
        /// <summary>
        /// 选项列表项 Dal
        /// </summary>
        public virtual APDalDef.PicklistItemDal PicklistItemDal {
            get {
                if ((_picklistItemDal == null)) {
                    _picklistItemDal = new APDalDef.PicklistItemDal(this);
                }
                return _picklistItemDal;
            }
        }
        
        /// <summary>
        /// 学校基础数据表 Dal
        /// </summary>
        public virtual APDalDef.School_InfoDal School_InfoDal {
            get {
                if ((_school_InfoDal == null)) {
                    _school_InfoDal = new APDalDef.School_InfoDal(this);
                }
                return _school_InfoDal;
            }
        }
        
        /// <summary>
        /// 教职工基础数据表 Dal
        /// </summary>
        public virtual APDalDef.Staff_InfoDal Staff_InfoDal {
            get {
                if ((_staff_InfoDal == null)) {
                    _staff_InfoDal = new APDalDef.Staff_InfoDal(this);
                }
                return _staff_InfoDal;
            }
        }
        
        /// <summary>
        /// 用户 Dal
        /// </summary>
        public virtual APDalDef.BzUserDal BzUserDal {
            get {
                if ((_bzUserDal == null)) {
                    _bzUserDal = new APDalDef.BzUserDal(this);
                }
                return _bzUserDal;
            }
        }
        
        /// <summary>
        /// UserClaim Dal
        /// </summary>
        public virtual APDalDef.BzUserClaimDal BzUserClaimDal {
            get {
                if ((_bzUserClaimDal == null)) {
                    _bzUserClaimDal = new APDalDef.BzUserClaimDal(this);
                }
                return _bzUserClaimDal;
            }
        }
        
        /// <summary>
        /// 用户简档 Dal
        /// </summary>
        public virtual APDalDef.BzUserProfileDal BzUserProfileDal {
            get {
                if ((_bzUserProfileDal == null)) {
                    _bzUserProfileDal = new APDalDef.BzUserProfileDal(this);
                }
                return _bzUserProfileDal;
            }
        }
        
        /// <summary>
        /// 角色 Dal
        /// </summary>
        public virtual APDalDef.BzRoleDal BzRoleDal {
            get {
                if ((_bzRoleDal == null)) {
                    _bzRoleDal = new APDalDef.BzRoleDal(this);
                }
                return _bzRoleDal;
            }
        }
        
        /// <summary>
        /// 用户角色 Dal
        /// </summary>
        public virtual APDalDef.BzUserRoleDal BzUserRoleDal {
            get {
                if ((_bzUserRoleDal == null)) {
                    _bzUserRoleDal = new APDalDef.BzUserRoleDal(this);
                }
                return _bzUserRoleDal;
            }
        }
        
        /// <summary>
        /// 用户信息修改周期表 Dal
        /// </summary>
        public virtual APDalDef.ProfileModifyPeriodDal ProfileModifyPeriodDal {
            get {
                if ((_profileModifyPeriodDal == null)) {
                    _profileModifyPeriodDal = new APDalDef.ProfileModifyPeriodDal(this);
                }
                return _profileModifyPeriodDal;
            }
        }
        
        /// <summary>
        /// 用户简档历史表 Dal
        /// </summary>
        public virtual APDalDef.BzUserProfileHistoryDal BzUserProfileHistoryDal {
            get {
                if ((_bzUserProfileHistoryDal == null)) {
                    _bzUserProfileHistoryDal = new APDalDef.BzUserProfileHistoryDal(this);
                }
                return _bzUserProfileHistoryDal;
            }
        }
        
        /// <summary>
        /// 申报历史表 Dal
        /// </summary>
        public virtual APDalDef.DeclareBaseHistoryDal DeclareBaseHistoryDal {
            get {
                if ((_declareBaseHistoryDal == null)) {
                    _declareBaseHistoryDal = new APDalDef.DeclareBaseHistoryDal(this);
                }
                return _declareBaseHistoryDal;
            }
        }
        
        /// <summary>
        /// 单位 Dal
        /// </summary>
        public virtual APDalDef.CompanyDal CompanyDal {
            get {
                if ((_companyDal == null)) {
                    _companyDal = new APDalDef.CompanyDal(this);
                }
                return _companyDal;
            }
        }
        
        /// <summary>
        /// 单位-管理员 Dal
        /// </summary>
        public virtual APDalDef.CompanyAccesserDal CompanyAccesserDal {
            get {
                if ((_companyAccesserDal == null)) {
                    _companyAccesserDal = new APDalDef.CompanyAccesserDal(this);
                }
                return _companyAccesserDal;
            }
        }
        
        /// <summary>
        /// 单位-申报教师 Dal
        /// </summary>
        public virtual APDalDef.CompanyDeclareDal CompanyDeclareDal {
            get {
                if ((_companyDeclareDal == null)) {
                    _companyDeclareDal = new APDalDef.CompanyDeclareDal(this);
                }
                return _companyDeclareDal;
            }
        }
        
        /// <summary>
        /// 权限 Dal
        /// </summary>
        public virtual APDalDef.BzPermissionDal BzPermissionDal {
            get {
                if ((_bzPermissionDal == null)) {
                    _bzPermissionDal = new APDalDef.BzPermissionDal(this);
                }
                return _bzPermissionDal;
            }
        }
        
        /// <summary>
        /// 角色权限 Dal
        /// </summary>
        public virtual APDalDef.BzRolePermissionDal BzRolePermissionDal {
            get {
                if ((_bzRolePermissionDal == null)) {
                    _bzRolePermissionDal = new APDalDef.BzRolePermissionDal(this);
                }
                return _bzRolePermissionDal;
            }
        }
        
        /// <summary>
        /// 申报 Dal
        /// </summary>
        public virtual APDalDef.DeclareBaseDal DeclareBaseDal {
            get {
                if ((_declareBaseDal == null)) {
                    _declareBaseDal = new APDalDef.DeclareBaseDal(this);
                }
                return _declareBaseDal;
            }
        }
        
        /// <summary>
        /// 申报-简历 Dal
        /// </summary>
        public virtual APDalDef.DeclareResumeDal DeclareResumeDal {
            get {
                if ((_declareResumeDal == null)) {
                    _declareResumeDal = new APDalDef.DeclareResumeDal(this);
                }
                return _declareResumeDal;
            }
        }
        
        /// <summary>
        /// 申报-内容 Dal
        /// </summary>
        public virtual APDalDef.DeclareContentDal DeclareContentDal {
            get {
                if ((_declareContentDal == null)) {
                    _declareContentDal = new APDalDef.DeclareContentDal(this);
                }
                return _declareContentDal;
            }
        }
        
        /// <summary>
        /// 申报-活动 Dal
        /// </summary>
        public virtual APDalDef.DeclareActiveDal DeclareActiveDal {
            get {
                if ((_declareActiveDal == null)) {
                    _declareActiveDal = new APDalDef.DeclareActiveDal(this);
                }
                return _declareActiveDal;
            }
        }
        
        /// <summary>
        /// 申报-科研成果 Dal
        /// </summary>
        public virtual APDalDef.DeclareAchievementDal DeclareAchievementDal {
            get {
                if ((_declareAchievementDal == null)) {
                    _declareAchievementDal = new APDalDef.DeclareAchievementDal(this);
                }
                return _declareAchievementDal;
            }
        }
        
        /// <summary>
        /// 申报-制度建设 Dal
        /// </summary>
        public virtual APDalDef.DeclareOrgConstDal DeclareOrgConstDal {
            get {
                if ((_declareOrgConstDal == null)) {
                    _declareOrgConstDal = new APDalDef.DeclareOrgConstDal(this);
                }
                return _declareOrgConstDal;
            }
        }
        
        /// <summary>
        /// 申报审核 Dal
        /// </summary>
        public virtual APDalDef.DeclareReviewDal DeclareReviewDal {
            get {
                if ((_declareReviewDal == null)) {
                    _declareReviewDal = new APDalDef.DeclareReviewDal(this);
                }
                return _declareReviewDal;
            }
        }
        
        /// <summary>
        /// 申报材料，用于申报流程 Dal
        /// </summary>
        public virtual APDalDef.DeclareMaterialDal DeclareMaterialDal {
            get {
                if ((_declareMaterialDal == null)) {
                    _declareMaterialDal = new APDalDef.DeclareMaterialDal(this);
                }
                return _declareMaterialDal;
            }
        }
        
        /// <summary>
        /// 申报材料，基本信息 Dal
        /// </summary>
        public virtual APDalDef.DeclareProfileDal DeclareProfileDal {
            get {
                if ((_declareProfileDal == null)) {
                    _declareProfileDal = new APDalDef.DeclareProfileDal(this);
                }
                return _declareProfileDal;
            }
        }
        
        /// <summary>
        /// 申报周期 Dal
        /// </summary>
        public virtual APDalDef.DeclarePeriodDal DeclarePeriodDal {
            get {
                if ((_declarePeriodDal == null)) {
                    _declarePeriodDal = new APDalDef.DeclarePeriodDal(this);
                }
                return _declarePeriodDal;
            }
        }
        
        /// <summary>
        /// 梯队-学员 Dal
        /// </summary>
        public virtual APDalDef.TeamMemberDal TeamMemberDal {
            get {
                if ((_teamMemberDal == null)) {
                    _teamMemberDal = new APDalDef.TeamMemberDal(this);
                }
                return _teamMemberDal;
            }
        }
        
        /// <summary>
        /// 梯队-内容 Dal
        /// </summary>
        public virtual APDalDef.TeamContentDal TeamContentDal {
            get {
                if ((_teamContentDal == null)) {
                    _teamContentDal = new APDalDef.TeamContentDal(this);
                }
                return _teamContentDal;
            }
        }
        
        /// <summary>
        /// 梯队-活动 Dal
        /// </summary>
        public virtual APDalDef.TeamActiveDal TeamActiveDal {
            get {
                if ((_teamActiveDal == null)) {
                    _teamActiveDal = new APDalDef.TeamActiveDal(this);
                }
                return _teamActiveDal;
            }
        }
        
        /// <summary>
        /// 梯队-活动成果 Dal
        /// </summary>
        public virtual APDalDef.TeamActiveResultDal TeamActiveResultDal {
            get {
                if ((_teamActiveResultDal == null)) {
                    _teamActiveResultDal = new APDalDef.TeamActiveResultDal(this);
                }
                return _teamActiveResultDal;
            }
        }
        
        /// <summary>
        /// 梯队-活动内容 Dal
        /// </summary>
        public virtual APDalDef.TeamActiveItemDal TeamActiveItemDal {
            get {
                if ((_teamActiveItemDal == null)) {
                    _teamActiveItemDal = new APDalDef.TeamActiveItemDal(this);
                }
                return _teamActiveItemDal;
            }
        }
        
        /// <summary>
        /// 梯队-定向性课程开设登记表 Dal
        /// </summary>
        public virtual APDalDef.TeamSpecialCourseDal TeamSpecialCourseDal {
            get {
                if ((_teamSpecialCourseDal == null)) {
                    _teamSpecialCourseDal = new APDalDef.TeamSpecialCourseDal(this);
                }
                return _teamSpecialCourseDal;
            }
        }
        
        /// <summary>
        /// 梯队-定向性课程实施安排表 Dal
        /// </summary>
        public virtual APDalDef.TeamSpecialCourseItemDal TeamSpecialCourseItemDal {
            get {
                if ((_teamSpecialCourseItemDal == null)) {
                    _teamSpecialCourseItemDal = new APDalDef.TeamSpecialCourseItemDal(this);
                }
                return _teamSpecialCourseItemDal;
            }
        }
        
        /// <summary>
        /// 专家组 Dal
        /// </summary>
        public virtual APDalDef.ExpGroupDal ExpGroupDal {
            get {
                if ((_expGroupDal == null)) {
                    _expGroupDal = new APDalDef.ExpGroupDal(this);
                }
                return _expGroupDal;
            }
        }
        
        /// <summary>
        /// 专家组成员 Dal
        /// </summary>
        public virtual APDalDef.ExpGroupMemberDal ExpGroupMemberDal {
            get {
                if ((_expGroupMemberDal == null)) {
                    _expGroupMemberDal = new APDalDef.ExpGroupMemberDal(this);
                }
                return _expGroupMemberDal;
            }
        }
        
        /// <summary>
        /// 专家 Dal
        /// </summary>
        public virtual APDalDef.ExpectDal ExpectDal {
            get {
                if ((_expectDal == null)) {
                    _expectDal = new APDalDef.ExpectDal(this);
                }
                return _expectDal;
            }
        }
        
        /// <summary>
        /// 专家组-学员 Dal
        /// </summary>
        public virtual APDalDef.ExpGroupTargetDal ExpGroupTargetDal {
            get {
                if ((_expGroupTargetDal == null)) {
                    _expGroupTargetDal = new APDalDef.ExpGroupTargetDal(this);
                }
                return _expGroupTargetDal;
            }
        }
        
        /// <summary>
        /// 评价-周期 Dal
        /// </summary>
        public virtual APDalDef.EvalPeriodDal EvalPeriodDal {
            get {
                if ((_evalPeriodDal == null)) {
                    _evalPeriodDal = new APDalDef.EvalPeriodDal(this);
                }
                return _evalPeriodDal;
            }
        }
        
        /// <summary>
        /// 评价-校评-结果 Dal
        /// </summary>
        public virtual APDalDef.EvalSchoolResultDal EvalSchoolResultDal {
            get {
                if ((_evalSchoolResultDal == null)) {
                    _evalSchoolResultDal = new APDalDef.EvalSchoolResultDal(this);
                }
                return _evalSchoolResultDal;
            }
        }
        
        /// <summary>
        /// 评价-校评-结果项 Dal
        /// </summary>
        public virtual APDalDef.EvalSchoolResultItemDal EvalSchoolResultItemDal {
            get {
                if ((_evalSchoolResultItemDal == null)) {
                    _evalSchoolResultItemDal = new APDalDef.EvalSchoolResultItemDal(this);
                }
                return _evalSchoolResultItemDal;
            }
        }
        
        /// <summary>
        /// 评价-量评-结果 Dal
        /// </summary>
        public virtual APDalDef.EvalVolumnResultDal EvalVolumnResultDal {
            get {
                if ((_evalVolumnResultDal == null)) {
                    _evalVolumnResultDal = new APDalDef.EvalVolumnResultDal(this);
                }
                return _evalVolumnResultDal;
            }
        }
        
        /// <summary>
        /// 评价-量评-结果项 Dal
        /// </summary>
        public virtual APDalDef.EvalVolumnResultItemDal EvalVolumnResultItemDal {
            get {
                if ((_evalVolumnResultItemDal == null)) {
                    _evalVolumnResultItemDal = new APDalDef.EvalVolumnResultItemDal(this);
                }
                return _evalVolumnResultItemDal;
            }
        }
        
        /// <summary>
        /// 评价-质评-提交结果 Dal
        /// </summary>
        public virtual APDalDef.EvalQualitySubmitResultDal EvalQualitySubmitResultDal {
            get {
                if ((_evalQualitySubmitResultDal == null)) {
                    _evalQualitySubmitResultDal = new APDalDef.EvalQualitySubmitResultDal(this);
                }
                return _evalQualitySubmitResultDal;
            }
        }
        
        /// <summary>
        /// 评价-质评-结果 Dal
        /// </summary>
        public virtual APDalDef.EvalQualityResultDal EvalQualityResultDal {
            get {
                if ((_evalQualityResultDal == null)) {
                    _evalQualityResultDal = new APDalDef.EvalQualityResultDal(this);
                }
                return _evalQualityResultDal;
            }
        }
        
        /// <summary>
        /// 评价-质评-结果项 Dal
        /// </summary>
        public virtual APDalDef.EvalQualityResultItemDal EvalQualityResultItemDal {
            get {
                if ((_evalQualityResultItemDal == null)) {
                    _evalQualityResultItemDal = new APDalDef.EvalQualityResultItemDal(this);
                }
                return _evalQualityResultItemDal;
            }
        }
        
        /// <summary>
        /// 新闻 Dal
        /// </summary>
        public virtual APDalDef.NewsDal NewsDal {
            get {
                if ((_newsDal == null)) {
                    _newsDal = new APDalDef.NewsDal(this);
                }
                return _newsDal;
            }
        }
        
        /// <summary>
        /// 首页图片 Dal
        /// </summary>
        public virtual APDalDef.HomePageImageDal HomePageImageDal {
            get {
                if ((_homePageImageDal == null)) {
                    _homePageImageDal = new APDalDef.HomePageImageDal(this);
                }
                return _homePageImageDal;
            }
        }
        
        /// <summary>
        /// 附件 Dal
        /// </summary>
        public virtual APDalDef.AttachmentsDal AttachmentsDal {
            get {
                if ((_attachmentsDal == null)) {
                    _attachmentsDal = new APDalDef.AttachmentsDal(this);
                }
                return _attachmentsDal;
            }
        }
        
        /// <summary>
        /// 通知 Dal
        /// </summary>
        public virtual APDalDef.NoticeDal NoticeDal {
            get {
                if ((_noticeDal == null)) {
                    _noticeDal = new APDalDef.NoticeDal(this);
                }
                return _noticeDal;
            }
        }
        
        /// <summary>
        /// 阅读通知 Dal
        /// </summary>
        public virtual APDalDef.ReadNoticeDal ReadNoticeDal {
            get {
                if ((_readNoticeDal == null)) {
                    _readNoticeDal = new APDalDef.ReadNoticeDal(this);
                }
                return _readNoticeDal;
            }
        }
        
        /// <summary>
        /// 共享 Dal
        /// </summary>
        public virtual APDalDef.ShareDal ShareDal {
            get {
                if ((_shareDal == null)) {
                    _shareDal = new APDalDef.ShareDal(this);
                }
                return _shareDal;
            }
        }
        
        public override void Rollback() {
            base.Rollback();
        }
        
        public override void Close() {
            base.Close();
        }
        
        /// <summary>
        /// 初始化数据。
        /// </summary>
        public static void InitData() {
            APDBDef db = new APDBDef();
            db.BeginTrans();
            try {
                db.PicklistDal.InitData(db);
                db.PicklistItemDal.InitData(db);
                db.School_InfoDal.InitData(db);
                db.Staff_InfoDal.InitData(db);
                db.BzUserDal.InitData(db);
                db.BzUserClaimDal.InitData(db);
                db.BzUserProfileDal.InitData(db);
                db.BzRoleDal.InitData(db);
                db.BzUserRoleDal.InitData(db);
                db.ProfileModifyPeriodDal.InitData(db);
                db.BzUserProfileHistoryDal.InitData(db);
                db.DeclareBaseHistoryDal.InitData(db);
                db.CompanyDal.InitData(db);
                db.CompanyAccesserDal.InitData(db);
                db.CompanyDeclareDal.InitData(db);
                db.BzPermissionDal.InitData(db);
                db.BzRolePermissionDal.InitData(db);
                db.DeclareBaseDal.InitData(db);
                db.DeclareResumeDal.InitData(db);
                db.DeclareContentDal.InitData(db);
                db.DeclareActiveDal.InitData(db);
                db.DeclareAchievementDal.InitData(db);
                db.DeclareOrgConstDal.InitData(db);
                db.DeclareReviewDal.InitData(db);
                db.DeclareMaterialDal.InitData(db);
                db.DeclareProfileDal.InitData(db);
                db.DeclarePeriodDal.InitData(db);
                db.TeamMemberDal.InitData(db);
                db.TeamContentDal.InitData(db);
                db.TeamActiveDal.InitData(db);
                db.TeamActiveResultDal.InitData(db);
                db.TeamActiveItemDal.InitData(db);
                db.TeamSpecialCourseDal.InitData(db);
                db.TeamSpecialCourseItemDal.InitData(db);
                db.ExpGroupDal.InitData(db);
                db.ExpGroupMemberDal.InitData(db);
                db.ExpectDal.InitData(db);
                db.ExpGroupTargetDal.InitData(db);
                db.EvalPeriodDal.InitData(db);
                db.EvalSchoolResultDal.InitData(db);
                db.EvalSchoolResultItemDal.InitData(db);
                db.EvalVolumnResultDal.InitData(db);
                db.EvalVolumnResultItemDal.InitData(db);
                db.EvalQualitySubmitResultDal.InitData(db);
                db.EvalQualityResultDal.InitData(db);
                db.EvalQualityResultItemDal.InitData(db);
                db.NewsDal.InitData(db);
                db.HomePageImageDal.InitData(db);
                db.AttachmentsDal.InitData(db);
                db.NoticeDal.InitData(db);
                db.ReadNoticeDal.InitData(db);
                db.ShareDal.InitData(db);
                db.Commit();
            }
            catch (System.Exception ) {
                db.Rollback();
                throw;
            }
            finally {
                db.Close();
            }
        }
        
        [Serializable()]
        public partial class PicklistTableDef : APTableDef {
            
            private Int64APColumnDef _picklistId;
            
            private StringAPColumnDef _innerKey;
            
            private StringAPColumnDef _name;
            
            private BooleanAPColumnDef _adjustable;
            
            private BooleanAPColumnDef _strengthen;
            
            private StringAPColumnDef _description;
            
            public PicklistTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected PicklistTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// PicklistId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PicklistId {
                get {
                    if (Object.ReferenceEquals(_picklistId, null)) {
                        _picklistId = new Int64APColumnDef(this, "PicklistId", false);
                        _picklistId.Display = "PicklistId";
                    }
                    return _picklistId;
                }
            }
            
            /// <summary>
            /// InnerKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef InnerKey {
                get {
                    if (Object.ReferenceEquals(_innerKey, null)) {
                        _innerKey = new StringAPColumnDef(this, "InnerKey", false, 40);
                        _innerKey.Display = "InnerKey";
                    }
                    return _innerKey;
                }
            }
            
            /// <summary>
            /// Name ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Name {
                get {
                    if (Object.ReferenceEquals(_name, null)) {
                        _name = new StringAPColumnDef(this, "Name", false, 255);
                        _name.Display = "Name";
                    }
                    return _name;
                }
            }
            
            /// <summary>
            /// Adjustable ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef Adjustable {
                get {
                    if (Object.ReferenceEquals(_adjustable, null)) {
                        _adjustable = new BooleanAPColumnDef(this, "Adjustable", false);
                        _adjustable.Display = "Adjustable";
                    }
                    return _adjustable;
                }
            }
            
            /// <summary>
            /// Strengthen ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef Strengthen {
                get {
                    if (Object.ReferenceEquals(_strengthen, null)) {
                        _strengthen = new BooleanAPColumnDef(this, "Strengthen", false);
                        _strengthen.Display = "Strengthen";
                    }
                    return _strengthen;
                }
            }
            
            /// <summary>
            /// Description ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Description {
                get {
                    if (Object.ReferenceEquals(_description, null)) {
                        _description = new StringAPColumnDef(this, "Description", false, 1000);
                        _description.Display = "Description";
                    }
                    return _description;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual PicklistTableDef As(string name) {
                return new PicklistTableDef("Picklist", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Picklist data, bool throwIfValidColumnName) {
                data.PicklistId = PicklistId.GetValue<long>(reader, throwIfValidColumnName);
                data.InnerKey = InnerKey.GetValue<string>(reader, throwIfValidColumnName);
                data.Name = Name.GetValue<string>(reader, throwIfValidColumnName);
                data.Adjustable = Adjustable.GetValue<bool>(reader, throwIfValidColumnName);
                data.Strengthen = Strengthen.GetValue<bool>(reader, throwIfValidColumnName);
                data.Description = Description.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Picklist Map(IDataReader reader) {
                Picklist data = new Picklist();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Picklist TolerantMap(IDataReader reader) {
                Picklist data = new Picklist();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Picklist> MapList(IDataReader reader) {
                List<Picklist> list = new List<Picklist>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Picklist> TolerantMapList(IDataReader reader) {
                List<Picklist> list = new List<Picklist>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class PicklistItemTableDef : APTableDef {
            
            private Int64APColumnDef _picklistItemId;
            
            private Int64APColumnDef _picklistId;
            
            private StringAPColumnDef _name;
            
            private Int64APColumnDef _strengthenValue;
            
            private StringAPColumnDef _code;
            
            private BooleanAPColumnDef _isDefault;
            
            public PicklistItemTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected PicklistItemTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// PicklistItemId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PicklistItemId {
                get {
                    if (Object.ReferenceEquals(_picklistItemId, null)) {
                        _picklistItemId = new Int64APColumnDef(this, "PicklistItemId", false);
                        _picklistItemId.Display = "PicklistItemId";
                    }
                    return _picklistItemId;
                }
            }
            
            /// <summary>
            /// PicklistId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PicklistId {
                get {
                    if (Object.ReferenceEquals(_picklistId, null)) {
                        _picklistId = new Int64APColumnDef(this, "PicklistId", false);
                        _picklistId.Display = "PicklistId";
                    }
                    return _picklistId;
                }
            }
            
            /// <summary>
            /// Name ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Name {
                get {
                    if (Object.ReferenceEquals(_name, null)) {
                        _name = new StringAPColumnDef(this, "Name", false, 255);
                        _name.Display = "Name";
                    }
                    return _name;
                }
            }
            
            /// <summary>
            /// StrengthenValue ColumnDef
            /// </summary>
            public virtual Int64APColumnDef StrengthenValue {
                get {
                    if (Object.ReferenceEquals(_strengthenValue, null)) {
                        _strengthenValue = new Int64APColumnDef(this, "StrengthenValue", false);
                        _strengthenValue.Display = "StrengthenValue";
                    }
                    return _strengthenValue;
                }
            }
            
            /// <summary>
            /// Code ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Code {
                get {
                    if (Object.ReferenceEquals(_code, null)) {
                        _code = new StringAPColumnDef(this, "Code", false, 100);
                        _code.Display = "Code";
                    }
                    return _code;
                }
            }
            
            /// <summary>
            /// IsDefault ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsDefault {
                get {
                    if (Object.ReferenceEquals(_isDefault, null)) {
                        _isDefault = new BooleanAPColumnDef(this, "IsDefault", false);
                        _isDefault.Display = "IsDefault";
                    }
                    return _isDefault;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual PicklistItemTableDef As(string name) {
                return new PicklistItemTableDef("PicklistItem", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, PicklistItem data, bool throwIfValidColumnName) {
                data.PicklistItemId = PicklistItemId.GetValue<long>(reader, throwIfValidColumnName);
                data.PicklistId = PicklistId.GetValue<long>(reader, throwIfValidColumnName);
                data.Name = Name.GetValue<string>(reader, throwIfValidColumnName);
                data.StrengthenValue = StrengthenValue.GetValue<long>(reader, throwIfValidColumnName);
                data.Code = Code.GetValue<string>(reader, throwIfValidColumnName);
                data.IsDefault = IsDefault.GetValue<bool>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual PicklistItem Map(IDataReader reader) {
                PicklistItem data = new PicklistItem();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual PicklistItem TolerantMap(IDataReader reader) {
                PicklistItem data = new PicklistItem();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<PicklistItem> MapList(IDataReader reader) {
                List<PicklistItem> list = new List<PicklistItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<PicklistItem> TolerantMapList(IDataReader reader) {
                List<PicklistItem> list = new List<PicklistItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class School_InfoTableDef : APTableDef {
            
            private StringAPColumnDef _id;
            
            private StringAPColumnDef _xxmc;
            
            private StringAPColumnDef _xxdm;
            
            public School_InfoTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected School_InfoTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// id ColumnDef
            /// </summary>
            public virtual StringAPColumnDef id {
                get {
                    if (Object.ReferenceEquals(_id, null)) {
                        _id = new StringAPColumnDef(this, "id", false, 36);
                        _id.Display = "学校ID";
                    }
                    return _id;
                }
            }
            
            /// <summary>
            /// xxmc ColumnDef
            /// </summary>
            public virtual StringAPColumnDef xxmc {
                get {
                    if (Object.ReferenceEquals(_xxmc, null)) {
                        _xxmc = new StringAPColumnDef(this, "xxmc", false, 60);
                        _xxmc.Display = "学校名称";
                    }
                    return _xxmc;
                }
            }
            
            /// <summary>
            /// xxdm ColumnDef
            /// </summary>
            public virtual StringAPColumnDef xxdm {
                get {
                    if (Object.ReferenceEquals(_xxdm, null)) {
                        _xxdm = new StringAPColumnDef(this, "xxdm", false, 10);
                        _xxdm.Display = "学校代码";
                    }
                    return _xxdm;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual School_InfoTableDef As(string name) {
                return new School_InfoTableDef("School_Info", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, School_Info data, bool throwIfValidColumnName) {
                data.id = id.GetValue<string>(reader, throwIfValidColumnName);
                data.xxmc = xxmc.GetValue<string>(reader, throwIfValidColumnName);
                data.xxdm = xxdm.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual School_Info Map(IDataReader reader) {
                School_Info data = new School_Info();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual School_Info TolerantMap(IDataReader reader) {
                School_Info data = new School_Info();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<School_Info> MapList(IDataReader reader) {
                List<School_Info> list = new List<School_Info>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<School_Info> TolerantMapList(IDataReader reader) {
                List<School_Info> list = new List<School_Info>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class Staff_InfoTableDef : APTableDef {
            
            private StringAPColumnDef _id;
            
            private StringAPColumnDef _yhm;
            
            private StringAPColumnDef _xxdm;
            
            private StringAPColumnDef _xm;
            
            private StringAPColumnDef _sfzjh;
            
            private StringAPColumnDef _sxh;
            
            private StringAPColumnDef _csrq;
            
            private StringAPColumnDef _xb;
            
            private StringAPColumnDef _xl;
            
            private StringAPColumnDef _xw;
            
            private StringAPColumnDef _byxx;
            
            private StringAPColumnDef _zy;
            
            private StringAPColumnDef _zw;
            
            private StringAPColumnDef _zc;
            
            private StringAPColumnDef _rjxk;
            
            private StringAPColumnDef _dw;
            
            public Staff_InfoTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected Staff_InfoTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// id ColumnDef
            /// </summary>
            public virtual StringAPColumnDef id {
                get {
                    if (Object.ReferenceEquals(_id, null)) {
                        _id = new StringAPColumnDef(this, "id", false, 36);
                        _id.Display = "教职工ID";
                    }
                    return _id;
                }
            }
            
            /// <summary>
            /// yhm ColumnDef
            /// </summary>
            public virtual StringAPColumnDef yhm {
                get {
                    if (Object.ReferenceEquals(_yhm, null)) {
                        _yhm = new StringAPColumnDef(this, "yhm", true, 36);
                        _yhm.Display = "用户登录名";
                    }
                    return _yhm;
                }
            }
            
            /// <summary>
            /// xxdm ColumnDef
            /// </summary>
            public virtual StringAPColumnDef xxdm {
                get {
                    if (Object.ReferenceEquals(_xxdm, null)) {
                        _xxdm = new StringAPColumnDef(this, "xxdm", true, 10);
                        _xxdm.Display = "学校代码";
                    }
                    return _xxdm;
                }
            }
            
            /// <summary>
            /// xm ColumnDef
            /// </summary>
            public virtual StringAPColumnDef xm {
                get {
                    if (Object.ReferenceEquals(_xm, null)) {
                        _xm = new StringAPColumnDef(this, "xm", true, 50);
                        _xm.Display = "真实姓名";
                    }
                    return _xm;
                }
            }
            
            /// <summary>
            /// sfzjh ColumnDef
            /// </summary>
            public virtual StringAPColumnDef sfzjh {
                get {
                    if (Object.ReferenceEquals(_sfzjh, null)) {
                        _sfzjh = new StringAPColumnDef(this, "sfzjh", true, 50);
                        _sfzjh.Display = "身份证件号";
                    }
                    return _sfzjh;
                }
            }
            
            /// <summary>
            /// sxh ColumnDef
            /// </summary>
            public virtual StringAPColumnDef sxh {
                get {
                    if (Object.ReferenceEquals(_sxh, null)) {
                        _sxh = new StringAPColumnDef(this, "sxh", true, 20);
                        _sxh.Display = "师训号";
                    }
                    return _sxh;
                }
            }
            
            /// <summary>
            /// csrq ColumnDef
            /// </summary>
            public virtual StringAPColumnDef csrq {
                get {
                    if (Object.ReferenceEquals(_csrq, null)) {
                        _csrq = new StringAPColumnDef(this, "csrq", true, 8);
                        _csrq.Display = "出生日期";
                    }
                    return _csrq;
                }
            }
            
            /// <summary>
            /// xb ColumnDef
            /// </summary>
            public virtual StringAPColumnDef xb {
                get {
                    if (Object.ReferenceEquals(_xb, null)) {
                        _xb = new StringAPColumnDef(this, "xb", true, 1);
                        _xb.Display = "性别ID";
                    }
                    return _xb;
                }
            }
            
            /// <summary>
            /// xl ColumnDef
            /// </summary>
            public virtual StringAPColumnDef xl {
                get {
                    if (Object.ReferenceEquals(_xl, null)) {
                        _xl = new StringAPColumnDef(this, "xl", true, 2);
                        _xl.Display = "学历ID";
                    }
                    return _xl;
                }
            }
            
            /// <summary>
            /// xw ColumnDef
            /// </summary>
            public virtual StringAPColumnDef xw {
                get {
                    if (Object.ReferenceEquals(_xw, null)) {
                        _xw = new StringAPColumnDef(this, "xw", true, 3);
                        _xw.Display = "学位ID";
                    }
                    return _xw;
                }
            }
            
            /// <summary>
            /// byxx ColumnDef
            /// </summary>
            public virtual StringAPColumnDef byxx {
                get {
                    if (Object.ReferenceEquals(_byxx, null)) {
                        _byxx = new StringAPColumnDef(this, "byxx", true, 100);
                        _byxx.Display = "毕业学校";
                    }
                    return _byxx;
                }
            }
            
            /// <summary>
            /// zy ColumnDef
            /// </summary>
            public virtual StringAPColumnDef zy {
                get {
                    if (Object.ReferenceEquals(_zy, null)) {
                        _zy = new StringAPColumnDef(this, "zy", true, 50);
                        _zy.Display = "专业";
                    }
                    return _zy;
                }
            }
            
            /// <summary>
            /// zw ColumnDef
            /// </summary>
            public virtual StringAPColumnDef zw {
                get {
                    if (Object.ReferenceEquals(_zw, null)) {
                        _zw = new StringAPColumnDef(this, "zw", true, 3);
                        _zw.Display = "职务ID";
                    }
                    return _zw;
                }
            }
            
            /// <summary>
            /// zc ColumnDef
            /// </summary>
            public virtual StringAPColumnDef zc {
                get {
                    if (Object.ReferenceEquals(_zc, null)) {
                        _zc = new StringAPColumnDef(this, "zc", true, 1);
                        _zc.Display = "职称ID";
                    }
                    return _zc;
                }
            }
            
            /// <summary>
            /// rjxk ColumnDef
            /// </summary>
            public virtual StringAPColumnDef rjxk {
                get {
                    if (Object.ReferenceEquals(_rjxk, null)) {
                        _rjxk = new StringAPColumnDef(this, "rjxk", true, 2);
                        _rjxk.Display = "任教学科ID";
                    }
                    return _rjxk;
                }
            }
            
            /// <summary>
            /// dw ColumnDef
            /// </summary>
            public virtual StringAPColumnDef dw {
                get {
                    if (Object.ReferenceEquals(_dw, null)) {
                        _dw = new StringAPColumnDef(this, "dw", true, 800);
                        _dw.Display = "单位";
                    }
                    return _dw;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual Staff_InfoTableDef As(string name) {
                return new Staff_InfoTableDef("Staff_Info", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Staff_Info data, bool throwIfValidColumnName) {
                data.id = id.GetValue<string>(reader, throwIfValidColumnName);
                data.yhm = yhm.GetValue<string>(reader, throwIfValidColumnName);
                data.xxdm = xxdm.GetValue<string>(reader, throwIfValidColumnName);
                data.xm = xm.GetValue<string>(reader, throwIfValidColumnName);
                data.sfzjh = sfzjh.GetValue<string>(reader, throwIfValidColumnName);
                data.sxh = sxh.GetValue<string>(reader, throwIfValidColumnName);
                data.csrq = csrq.GetValue<string>(reader, throwIfValidColumnName);
                data.xb = xb.GetValue<string>(reader, throwIfValidColumnName);
                data.xl = xl.GetValue<string>(reader, throwIfValidColumnName);
                data.xw = xw.GetValue<string>(reader, throwIfValidColumnName);
                data.byxx = byxx.GetValue<string>(reader, throwIfValidColumnName);
                data.zy = zy.GetValue<string>(reader, throwIfValidColumnName);
                data.zw = zw.GetValue<string>(reader, throwIfValidColumnName);
                data.zc = zc.GetValue<string>(reader, throwIfValidColumnName);
                data.rjxk = rjxk.GetValue<string>(reader, throwIfValidColumnName);
                data.dw = dw.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Staff_Info Map(IDataReader reader) {
                Staff_Info data = new Staff_Info();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Staff_Info TolerantMap(IDataReader reader) {
                Staff_Info data = new Staff_Info();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Staff_Info> MapList(IDataReader reader) {
                List<Staff_Info> list = new List<Staff_Info>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Staff_Info> TolerantMapList(IDataReader reader) {
                List<Staff_Info> list = new List<Staff_Info>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class BzUserTableDef : APTableDef {
            
            private Int64APColumnDef _id;
            
            private StringAPColumnDef _userName;
            
            private StringAPColumnDef _passwordHash;
            
            private StringAPColumnDef _securityStamp;
            
            private StringAPColumnDef _email;
            
            private BooleanAPColumnDef _emailConfirmed;
            
            private StringAPColumnDef _phoneNumber;
            
            private BooleanAPColumnDef _phoneNumberConfirmed;
            
            private BooleanAPColumnDef _twoFactorEnabled;
            
            private DateTimeAPColumnDef _lockoutEndDtc;
            
            private BooleanAPColumnDef _lockoutEnabled;
            
            private Int32APColumnDef _accessFailedCount;
            
            private BooleanAPColumnDef _actived;
            
            public BzUserTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected BzUserTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Id {
                get {
                    if (Object.ReferenceEquals(_id, null)) {
                        _id = new Int64APColumnDef(this, "UserId", false);
                        _id.Display = "用户ID";
                    }
                    return _id;
                }
            }
            
            /// <summary>
            /// UserName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef UserName {
                get {
                    if (Object.ReferenceEquals(_userName, null)) {
                        _userName = new StringAPColumnDef(this, "UserName", false, 255);
                        _userName.Display = "用户名";
                        _userName.Required = true;
                    }
                    return _userName;
                }
            }
            
            /// <summary>
            /// PasswordHash ColumnDef
            /// </summary>
            public virtual StringAPColumnDef PasswordHash {
                get {
                    if (Object.ReferenceEquals(_passwordHash, null)) {
                        _passwordHash = new StringAPColumnDef(this, "PasswordHash", false, 255);
                        _passwordHash.Display = "密码哈希";
                    }
                    return _passwordHash;
                }
            }
            
            /// <summary>
            /// SecurityStamp ColumnDef
            /// </summary>
            public virtual StringAPColumnDef SecurityStamp {
                get {
                    if (Object.ReferenceEquals(_securityStamp, null)) {
                        _securityStamp = new StringAPColumnDef(this, "SecurityStamp", false, 255);
                        _securityStamp.Display = "Salt";
                    }
                    return _securityStamp;
                }
            }
            
            /// <summary>
            /// Email ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Email {
                get {
                    if (Object.ReferenceEquals(_email, null)) {
                        _email = new StringAPColumnDef(this, "Email", false, 255);
                        _email.Display = "电子邮箱";
                    }
                    return _email;
                }
            }
            
            /// <summary>
            /// EmailConfirmed ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef EmailConfirmed {
                get {
                    if (Object.ReferenceEquals(_emailConfirmed, null)) {
                        _emailConfirmed = new BooleanAPColumnDef(this, "EmailConfirmed", false);
                        _emailConfirmed.Display = "电子邮箱确认";
                    }
                    return _emailConfirmed;
                }
            }
            
            /// <summary>
            /// PhoneNumber ColumnDef
            /// </summary>
            public virtual StringAPColumnDef PhoneNumber {
                get {
                    if (Object.ReferenceEquals(_phoneNumber, null)) {
                        _phoneNumber = new StringAPColumnDef(this, "PhoneNumber", false, 255);
                        _phoneNumber.Display = "电话";
                    }
                    return _phoneNumber;
                }
            }
            
            /// <summary>
            /// PhoneNumberConfirmed ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef PhoneNumberConfirmed {
                get {
                    if (Object.ReferenceEquals(_phoneNumberConfirmed, null)) {
                        _phoneNumberConfirmed = new BooleanAPColumnDef(this, "PhoneNumberConfirmed", false);
                        _phoneNumberConfirmed.Display = "电话确认";
                    }
                    return _phoneNumberConfirmed;
                }
            }
            
            /// <summary>
            /// TwoFactorEnabled ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef TwoFactorEnabled {
                get {
                    if (Object.ReferenceEquals(_twoFactorEnabled, null)) {
                        _twoFactorEnabled = new BooleanAPColumnDef(this, "TwoFactorEnabled", false);
                        _twoFactorEnabled.Display = "双模式";
                    }
                    return _twoFactorEnabled;
                }
            }
            
            /// <summary>
            /// LockoutEndDtc ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef LockoutEndDtc {
                get {
                    if (Object.ReferenceEquals(_lockoutEndDtc, null)) {
                        _lockoutEndDtc = new DateTimeAPColumnDef(this, "LockoutEndDtc", true);
                        _lockoutEndDtc.Display = "锁定时间";
                    }
                    return _lockoutEndDtc;
                }
            }
            
            /// <summary>
            /// LockoutEnabled ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef LockoutEnabled {
                get {
                    if (Object.ReferenceEquals(_lockoutEnabled, null)) {
                        _lockoutEnabled = new BooleanAPColumnDef(this, "LockoutEnabled", false);
                        _lockoutEnabled.Display = "锁定";
                    }
                    return _lockoutEnabled;
                }
            }
            
            /// <summary>
            /// AccessFailedCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef AccessFailedCount {
                get {
                    if (Object.ReferenceEquals(_accessFailedCount, null)) {
                        _accessFailedCount = new Int32APColumnDef(this, "AccessFailedCount", false);
                        _accessFailedCount.Display = "错误次数";
                    }
                    return _accessFailedCount;
                }
            }
            
            /// <summary>
            /// Actived ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef Actived {
                get {
                    if (Object.ReferenceEquals(_actived, null)) {
                        _actived = new BooleanAPColumnDef(this, "Actived", false);
                        _actived.Display = "有效";
                    }
                    return _actived;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual BzUserTableDef As(string name) {
                return new BzUserTableDef("BzUser", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, BzUser data, bool throwIfValidColumnName) {
                data.Id = Id.GetValue<long>(reader, throwIfValidColumnName);
                data.UserName = UserName.GetValue<string>(reader, throwIfValidColumnName);
                data.PasswordHash = PasswordHash.GetValue<string>(reader, throwIfValidColumnName);
                data.SecurityStamp = SecurityStamp.GetValue<string>(reader, throwIfValidColumnName);
                data.Email = Email.GetValue<string>(reader, throwIfValidColumnName);
                data.EmailConfirmed = EmailConfirmed.GetValue<bool>(reader, throwIfValidColumnName);
                data.PhoneNumber = PhoneNumber.GetValue<string>(reader, throwIfValidColumnName);
                data.PhoneNumberConfirmed = PhoneNumberConfirmed.GetValue<bool>(reader, throwIfValidColumnName);
                data.TwoFactorEnabled = TwoFactorEnabled.GetValue<bool>(reader, throwIfValidColumnName);
                data.LockoutEndDtc = LockoutEndDtc.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.LockoutEnabled = LockoutEnabled.GetValue<bool>(reader, throwIfValidColumnName);
                data.AccessFailedCount = AccessFailedCount.GetValue<int>(reader, throwIfValidColumnName);
                data.Actived = Actived.GetValue<bool>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUser Map(IDataReader reader) {
                BzUser data = new BzUser();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUser TolerantMap(IDataReader reader) {
                BzUser data = new BzUser();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUser> MapList(IDataReader reader) {
                List<BzUser> list = new List<BzUser>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUser> TolerantMapList(IDataReader reader) {
                List<BzUser> list = new List<BzUser>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class BzUserClaimTableDef : APTableDef {
            
            private Int32APColumnDef _id;
            
            private Int64APColumnDef _userId;
            
            private StringAPColumnDef _claimType;
            
            private StringAPColumnDef _claimValue;
            
            public BzUserClaimTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected BzUserClaimTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// Id ColumnDef
            /// </summary>
            public virtual Int32APColumnDef Id {
                get {
                    if (Object.ReferenceEquals(_id, null)) {
                        _id = new Int32APColumnDef(this, "Id", false);
                        _id.Display = "ID";
                    }
                    return _id;
                }
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new Int64APColumnDef(this, "UserId", false);
                        _userId.Display = "UserId";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// ClaimType ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ClaimType {
                get {
                    if (Object.ReferenceEquals(_claimType, null)) {
                        _claimType = new StringAPColumnDef(this, "ClaimType", false, 100);
                        _claimType.Display = "ClaimType";
                    }
                    return _claimType;
                }
            }
            
            /// <summary>
            /// ClaimValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ClaimValue {
                get {
                    if (Object.ReferenceEquals(_claimValue, null)) {
                        _claimValue = new StringAPColumnDef(this, "ClaimValue", false, 100);
                        _claimValue.Display = "ClaimValue";
                    }
                    return _claimValue;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual BzUserClaimTableDef As(string name) {
                return new BzUserClaimTableDef("BzUserClaim", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, BzUserClaim data, bool throwIfValidColumnName) {
                data.Id = Id.GetValue<int>(reader, throwIfValidColumnName);
                data.UserId = UserId.GetValue<long>(reader, throwIfValidColumnName);
                data.ClaimType = ClaimType.GetValue<string>(reader, throwIfValidColumnName);
                data.ClaimValue = ClaimValue.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUserClaim Map(IDataReader reader) {
                BzUserClaim data = new BzUserClaim();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUserClaim TolerantMap(IDataReader reader) {
                BzUserClaim data = new BzUserClaim();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUserClaim> MapList(IDataReader reader) {
                List<BzUserClaim> list = new List<BzUserClaim>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUserClaim> TolerantMapList(IDataReader reader) {
                List<BzUserClaim> list = new List<BzUserClaim>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class BzUserProfileTableDef : APTableDef {
            
            private Int64APColumnDef _userId;
            
            private StringAPColumnDef _uUID;
            
            private Int64APColumnDef _companyId;
            
            private StringAPColumnDef _userName;
            
            private StringAPColumnDef _userType;
            
            private StringAPColumnDef _realName;
            
            private StringAPColumnDef _iDCard;
            
            private StringAPColumnDef _trainNo;
            
            private Int64APColumnDef _genderPKID;
            
            private DateTimeAPColumnDef _birthday;
            
            private Int64APColumnDef _politicalStatusPKID;
            
            private Int64APColumnDef _nationalityPKID;
            
            private Int64APColumnDef _eduSubjectPKID;
            
            private Int64APColumnDef _declareSubjectPKID;
            
            private Int64APColumnDef _eduStagePKID;
            
            private DateTimeAPColumnDef _jobDate;
            
            private Int64APColumnDef _skillTitlePKID;
            
            private DateTimeAPColumnDef _skillDate;
            
            private StringAPColumnDef _companyName;
            
            private StringAPColumnDef _companyNameOuter;
            
            private StringAPColumnDef _companyaddress;
            
            private Int64APColumnDef _rankTitlePKID;
            
            private StringAPColumnDef _courseCountPerWeek;
            
            private DateTimeAPColumnDef _hiredate;
            
            private Int64APColumnDef _eduBgPKID;
            
            private Int64APColumnDef _eduDegreePKID;
            
            private StringAPColumnDef _graduateSchool;
            
            private DateTimeAPColumnDef _graduateDate;
            
            private StringAPColumnDef _phonemobile;
            
            private StringAPColumnDef _email;
            
            private StringAPColumnDef _phone;
            
            private StringAPColumnDef _dynamic1;
            
            private StringAPColumnDef _dynamic2;
            
            private StringAPColumnDef _dynamic3;
            
            private StringAPColumnDef _dynamic4;
            
            private StringAPColumnDef _dynamic5;
            
            private Int64APColumnDef _periodId;
            
            public BzUserProfileTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected BzUserProfileTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new Int64APColumnDef(this, "UserId", false);
                        _userId.Display = "用户ID";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// UUID ColumnDef
            /// </summary>
            public virtual StringAPColumnDef UUID {
                get {
                    if (Object.ReferenceEquals(_uUID, null)) {
                        _uUID = new StringAPColumnDef(this, "UUID", false, 100);
                        _uUID.Display = "UUID";
                    }
                    return _uUID;
                }
            }
            
            /// <summary>
            /// CompanyId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CompanyId {
                get {
                    if (Object.ReferenceEquals(_companyId, null)) {
                        _companyId = new Int64APColumnDef(this, "CompanyId", false);
                        _companyId.Display = "单位ID";
                    }
                    return _companyId;
                }
            }
            
            /// <summary>
            /// UserName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef UserName {
                get {
                    if (Object.ReferenceEquals(_userName, null)) {
                        _userName = new StringAPColumnDef(this, "UserName", false, 255);
                        _userName.Display = "用户名";
                        _userName.Required = true;
                    }
                    return _userName;
                }
            }
            
            /// <summary>
            /// UserType ColumnDef
            /// </summary>
            public virtual StringAPColumnDef UserType {
                get {
                    if (Object.ReferenceEquals(_userType, null)) {
                        _userType = new StringAPColumnDef(this, "UserType", false, 255);
                        _userType.Display = "用户类型";
                    }
                    return _userType;
                }
            }
            
            /// <summary>
            /// RealName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef RealName {
                get {
                    if (Object.ReferenceEquals(_realName, null)) {
                        _realName = new StringAPColumnDef(this, "RealName", false, 40);
                        _realName.Display = "真实姓名";
                        _realName.Required = true;
                    }
                    return _realName;
                }
            }
            
            /// <summary>
            /// IDCard ColumnDef
            /// </summary>
            public virtual StringAPColumnDef IDCard {
                get {
                    if (Object.ReferenceEquals(_iDCard, null)) {
                        _iDCard = new StringAPColumnDef(this, "IDCard", false, 18);
                        _iDCard.Display = "身份证件号";
                        _iDCard.Required = true;
                    }
                    return _iDCard;
                }
            }
            
            /// <summary>
            /// TrainNo ColumnDef
            /// </summary>
            public virtual StringAPColumnDef TrainNo {
                get {
                    if (Object.ReferenceEquals(_trainNo, null)) {
                        _trainNo = new StringAPColumnDef(this, "TrainNo", false, 20);
                        _trainNo.Display = "师训编号";
                    }
                    return _trainNo;
                }
            }
            
            /// <summary>
            /// GenderPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef GenderPKID {
                get {
                    if (Object.ReferenceEquals(_genderPKID, null)) {
                        _genderPKID = new Int64APColumnDef(this, "GenderPKID", false);
                        _genderPKID.Display = "性别";
                        _genderPKID.Required = true;
                    }
                    return _genderPKID;
                }
            }
            
            /// <summary>
            /// Birthday ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef Birthday {
                get {
                    if (Object.ReferenceEquals(_birthday, null)) {
                        _birthday = new DateTimeAPColumnDef(this, "Birthday", false);
                        _birthday.Display = "出生年月";
                        _birthday.Required = true;
                    }
                    return _birthday;
                }
            }
            
            /// <summary>
            /// PoliticalStatusPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PoliticalStatusPKID {
                get {
                    if (Object.ReferenceEquals(_politicalStatusPKID, null)) {
                        _politicalStatusPKID = new Int64APColumnDef(this, "PoliticalStatusPKID", false);
                        _politicalStatusPKID.Display = "政治面貌";
                        _politicalStatusPKID.Required = true;
                    }
                    return _politicalStatusPKID;
                }
            }
            
            /// <summary>
            /// NationalityPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef NationalityPKID {
                get {
                    if (Object.ReferenceEquals(_nationalityPKID, null)) {
                        _nationalityPKID = new Int64APColumnDef(this, "NationalityPKID", false);
                        _nationalityPKID.Display = "民族";
                        _nationalityPKID.Required = true;
                    }
                    return _nationalityPKID;
                }
            }
            
            /// <summary>
            /// EduSubjectPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef EduSubjectPKID {
                get {
                    if (Object.ReferenceEquals(_eduSubjectPKID, null)) {
                        _eduSubjectPKID = new Int64APColumnDef(this, "EduSubjectPKID", false);
                        _eduSubjectPKID.Display = "任教学科";
                    }
                    return _eduSubjectPKID;
                }
            }
            
            /// <summary>
            /// DeclareSubjectPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareSubjectPKID {
                get {
                    if (Object.ReferenceEquals(_declareSubjectPKID, null)) {
                        _declareSubjectPKID = new Int64APColumnDef(this, "DeclareSubjectPKID", false);
                        _declareSubjectPKID.Display = "申报学科";
                    }
                    return _declareSubjectPKID;
                }
            }
            
            /// <summary>
            /// EduStagePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef EduStagePKID {
                get {
                    if (Object.ReferenceEquals(_eduStagePKID, null)) {
                        _eduStagePKID = new Int64APColumnDef(this, "EduStagePKID", false);
                        _eduStagePKID.Display = "任教学段";
                    }
                    return _eduStagePKID;
                }
            }
            
            /// <summary>
            /// JobDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef JobDate {
                get {
                    if (Object.ReferenceEquals(_jobDate, null)) {
                        _jobDate = new DateTimeAPColumnDef(this, "JobDate", true);
                        _jobDate.Display = "参加教育工作年月";
                        _jobDate.Required = true;
                    }
                    return _jobDate;
                }
            }
            
            /// <summary>
            /// SkillTitlePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef SkillTitlePKID {
                get {
                    if (Object.ReferenceEquals(_skillTitlePKID, null)) {
                        _skillTitlePKID = new Int64APColumnDef(this, "SkillTitlePKID", false);
                        _skillTitlePKID.Display = "现任专技职称";
                    }
                    return _skillTitlePKID;
                }
            }
            
            /// <summary>
            /// SkillDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef SkillDate {
                get {
                    if (Object.ReferenceEquals(_skillDate, null)) {
                        _skillDate = new DateTimeAPColumnDef(this, "SkillDate", true);
                        _skillDate.Display = "职称通过年月";
                        _skillDate.Required = true;
                    }
                    return _skillDate;
                }
            }
            
            /// <summary>
            /// CompanyName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CompanyName {
                get {
                    if (Object.ReferenceEquals(_companyName, null)) {
                        _companyName = new StringAPColumnDef(this, "CompanyName", false, 100);
                        _companyName.Display = "单位";
                        _companyName.Required = true;
                    }
                    return _companyName;
                }
            }
            
            /// <summary>
            /// CompanyNameOuter ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CompanyNameOuter {
                get {
                    if (Object.ReferenceEquals(_companyNameOuter, null)) {
                        _companyNameOuter = new StringAPColumnDef(this, "CompanyNameOuter", false, 800);
                        _companyNameOuter.Display = "单位(数据同步)";
                    }
                    return _companyNameOuter;
                }
            }
            
            /// <summary>
            /// Companyaddress ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Companyaddress {
                get {
                    if (Object.ReferenceEquals(_companyaddress, null)) {
                        _companyaddress = new StringAPColumnDef(this, "Companyaddress", false, 255);
                        _companyaddress.Display = "单位地址";
                        _companyaddress.Required = true;
                    }
                    return _companyaddress;
                }
            }
            
            /// <summary>
            /// RankTitlePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef RankTitlePKID {
                get {
                    if (Object.ReferenceEquals(_rankTitlePKID, null)) {
                        _rankTitlePKID = new Int64APColumnDef(this, "RankTitlePKID", false);
                        _rankTitlePKID.Display = "行政职务";
                    }
                    return _rankTitlePKID;
                }
            }
            
            /// <summary>
            /// CourseCountPerWeek ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CourseCountPerWeek {
                get {
                    if (Object.ReferenceEquals(_courseCountPerWeek, null)) {
                        _courseCountPerWeek = new StringAPColumnDef(this, "CourseCountPerWeek", true, 20);
                        _courseCountPerWeek.Display = "周课时数";
                    }
                    return _courseCountPerWeek;
                }
            }
            
            /// <summary>
            /// Hiredate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef Hiredate {
                get {
                    if (Object.ReferenceEquals(_hiredate, null)) {
                        _hiredate = new DateTimeAPColumnDef(this, "Hiredate", true);
                        _hiredate.Display = "评聘日期";
                    }
                    return _hiredate;
                }
            }
            
            /// <summary>
            /// EduBgPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef EduBgPKID {
                get {
                    if (Object.ReferenceEquals(_eduBgPKID, null)) {
                        _eduBgPKID = new Int64APColumnDef(this, "EduBgPKID", false);
                        _eduBgPKID.Display = "学历";
                    }
                    return _eduBgPKID;
                }
            }
            
            /// <summary>
            /// EduDegreePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef EduDegreePKID {
                get {
                    if (Object.ReferenceEquals(_eduDegreePKID, null)) {
                        _eduDegreePKID = new Int64APColumnDef(this, "EduDegreePKID", false);
                        _eduDegreePKID.Display = "学位";
                    }
                    return _eduDegreePKID;
                }
            }
            
            /// <summary>
            /// GraduateSchool ColumnDef
            /// </summary>
            public virtual StringAPColumnDef GraduateSchool {
                get {
                    if (Object.ReferenceEquals(_graduateSchool, null)) {
                        _graduateSchool = new StringAPColumnDef(this, "GraduateSchool", true, 100);
                        _graduateSchool.Display = "毕业院校与专业";
                    }
                    return _graduateSchool;
                }
            }
            
            /// <summary>
            /// GraduateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef GraduateDate {
                get {
                    if (Object.ReferenceEquals(_graduateDate, null)) {
                        _graduateDate = new DateTimeAPColumnDef(this, "GraduateDate", true);
                        _graduateDate.Display = "毕业年月";
                    }
                    return _graduateDate;
                }
            }
            
            /// <summary>
            /// Phonemobile ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Phonemobile {
                get {
                    if (Object.ReferenceEquals(_phonemobile, null)) {
                        _phonemobile = new StringAPColumnDef(this, "Phonemobile", true, 20);
                        _phonemobile.Display = "手机号码";
                    }
                    return _phonemobile;
                }
            }
            
            /// <summary>
            /// Email ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Email {
                get {
                    if (Object.ReferenceEquals(_email, null)) {
                        _email = new StringAPColumnDef(this, "Email", true, 255);
                        _email.Display = "电子邮箱";
                    }
                    return _email;
                }
            }
            
            /// <summary>
            /// Phone ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Phone {
                get {
                    if (Object.ReferenceEquals(_phone, null)) {
                        _phone = new StringAPColumnDef(this, "Phone", true, 20);
                        _phone.Display = "办公室电话";
                    }
                    return _phone;
                }
            }
            
            /// <summary>
            /// Dynamic1 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic1 {
                get {
                    if (Object.ReferenceEquals(_dynamic1, null)) {
                        _dynamic1 = new StringAPColumnDef(this, "Dynamic1", true, 255);
                        _dynamic1.Display = "2016学年";
                    }
                    return _dynamic1;
                }
            }
            
            /// <summary>
            /// Dynamic2 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic2 {
                get {
                    if (Object.ReferenceEquals(_dynamic2, null)) {
                        _dynamic2 = new StringAPColumnDef(this, "Dynamic2", true, 255);
                        _dynamic2.Display = "2017学年";
                    }
                    return _dynamic2;
                }
            }
            
            /// <summary>
            /// Dynamic3 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic3 {
                get {
                    if (Object.ReferenceEquals(_dynamic3, null)) {
                        _dynamic3 = new StringAPColumnDef(this, "Dynamic3", true, 255);
                        _dynamic3.Display = "2018学年";
                    }
                    return _dynamic3;
                }
            }
            
            /// <summary>
            /// Dynamic4 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic4 {
                get {
                    if (Object.ReferenceEquals(_dynamic4, null)) {
                        _dynamic4 = new StringAPColumnDef(this, "Dynamic4", true, 255);
                        _dynamic4.Display = "Dynamic4";
                    }
                    return _dynamic4;
                }
            }
            
            /// <summary>
            /// Dynamic5 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic5 {
                get {
                    if (Object.ReferenceEquals(_dynamic5, null)) {
                        _dynamic5 = new StringAPColumnDef(this, "Dynamic5", true, 300);
                        _dynamic5.Display = "Dynamic5";
                    }
                    return _dynamic5;
                }
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new Int64APColumnDef(this, "PeriodId", true);
                        _periodId.Display = "修改周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual BzUserProfileTableDef As(string name) {
                return new BzUserProfileTableDef("BzUserProfile", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, BzUserProfile data, bool throwIfValidColumnName) {
                data.UserId = UserId.GetValue<long>(reader, throwIfValidColumnName);
                data.UUID = UUID.GetValue<string>(reader, throwIfValidColumnName);
                data.CompanyId = CompanyId.GetValue<long>(reader, throwIfValidColumnName);
                data.UserName = UserName.GetValue<string>(reader, throwIfValidColumnName);
                data.UserType = UserType.GetValue<string>(reader, throwIfValidColumnName);
                data.RealName = RealName.GetValue<string>(reader, throwIfValidColumnName);
                data.IDCard = IDCard.GetValue<string>(reader, throwIfValidColumnName);
                data.TrainNo = TrainNo.GetValue<string>(reader, throwIfValidColumnName);
                data.GenderPKID = GenderPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.Birthday = Birthday.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.PoliticalStatusPKID = PoliticalStatusPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.NationalityPKID = NationalityPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.EduSubjectPKID = EduSubjectPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareSubjectPKID = DeclareSubjectPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.EduStagePKID = EduStagePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.JobDate = JobDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.SkillTitlePKID = SkillTitlePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.SkillDate = SkillDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.CompanyName = CompanyName.GetValue<string>(reader, throwIfValidColumnName);
                data.CompanyNameOuter = CompanyNameOuter.GetValue<string>(reader, throwIfValidColumnName);
                data.Companyaddress = Companyaddress.GetValue<string>(reader, throwIfValidColumnName);
                data.RankTitlePKID = RankTitlePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.CourseCountPerWeek = CourseCountPerWeek.GetValue<string>(reader, throwIfValidColumnName);
                data.Hiredate = Hiredate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.EduBgPKID = EduBgPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.EduDegreePKID = EduDegreePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.GraduateSchool = GraduateSchool.GetValue<string>(reader, throwIfValidColumnName);
                data.GraduateDate = GraduateDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Phonemobile = Phonemobile.GetValue<string>(reader, throwIfValidColumnName);
                data.Email = Email.GetValue<string>(reader, throwIfValidColumnName);
                data.Phone = Phone.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic1 = Dynamic1.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic2 = Dynamic2.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic3 = Dynamic3.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic4 = Dynamic4.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic5 = Dynamic5.GetValue<string>(reader, throwIfValidColumnName);
                data.PeriodId = PeriodId.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUserProfile Map(IDataReader reader) {
                BzUserProfile data = new BzUserProfile();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUserProfile TolerantMap(IDataReader reader) {
                BzUserProfile data = new BzUserProfile();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUserProfile> MapList(IDataReader reader) {
                List<BzUserProfile> list = new List<BzUserProfile>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUserProfile> TolerantMapList(IDataReader reader) {
                List<BzUserProfile> list = new List<BzUserProfile>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class BzRoleTableDef : APTableDef {
            
            private Int64APColumnDef _id;
            
            private StringAPColumnDef _name;
            
            private StringAPColumnDef _normalizedName;
            
            public BzRoleTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected BzRoleTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// RoleId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Id {
                get {
                    if (Object.ReferenceEquals(_id, null)) {
                        _id = new Int64APColumnDef(this, "RoleId", false);
                        _id.Display = "角色ID";
                    }
                    return _id;
                }
            }
            
            /// <summary>
            /// Name ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Name {
                get {
                    if (Object.ReferenceEquals(_name, null)) {
                        _name = new StringAPColumnDef(this, "Name", false, 255);
                        _name.Display = "角色名";
                        _name.Required = true;
                    }
                    return _name;
                }
            }
            
            /// <summary>
            /// NormalizedName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef NormalizedName {
                get {
                    if (Object.ReferenceEquals(_normalizedName, null)) {
                        _normalizedName = new StringAPColumnDef(this, "NormalizedName", false, 255);
                        _normalizedName.Display = "常名";
                    }
                    return _normalizedName;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual BzRoleTableDef As(string name) {
                return new BzRoleTableDef("BzRole", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, BzRole data, bool throwIfValidColumnName) {
                data.Id = Id.GetValue<long>(reader, throwIfValidColumnName);
                data.Name = Name.GetValue<string>(reader, throwIfValidColumnName);
                data.NormalizedName = NormalizedName.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzRole Map(IDataReader reader) {
                BzRole data = new BzRole();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzRole TolerantMap(IDataReader reader) {
                BzRole data = new BzRole();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzRole> MapList(IDataReader reader) {
                List<BzRole> list = new List<BzRole>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzRole> TolerantMapList(IDataReader reader) {
                List<BzRole> list = new List<BzRole>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class BzUserRoleTableDef : APTableDef {
            
            private Int64APColumnDef _userRoleId;
            
            private Int64APColumnDef _userId;
            
            private Int64APColumnDef _roleId;
            
            private StringAPColumnDef _scopeType;
            
            private Int64APColumnDef _scopeId;
            
            public BzUserRoleTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected BzUserRoleTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// UserRoleId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserRoleId {
                get {
                    if (Object.ReferenceEquals(_userRoleId, null)) {
                        _userRoleId = new Int64APColumnDef(this, "UserRoleId", false);
                        _userRoleId.Display = "ID";
                    }
                    return _userRoleId;
                }
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new Int64APColumnDef(this, "UserId", false);
                        _userId.Display = "用户ID";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// RoleId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef RoleId {
                get {
                    if (Object.ReferenceEquals(_roleId, null)) {
                        _roleId = new Int64APColumnDef(this, "RoleId", false);
                        _roleId.Display = "角色ID";
                    }
                    return _roleId;
                }
            }
            
            /// <summary>
            /// ScopeType ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ScopeType {
                get {
                    if (Object.ReferenceEquals(_scopeType, null)) {
                        _scopeType = new StringAPColumnDef(this, "ScopeType", false, 30);
                        _scopeType.Display = "作用域类型";
                    }
                    return _scopeType;
                }
            }
            
            /// <summary>
            /// ScopeId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ScopeId {
                get {
                    if (Object.ReferenceEquals(_scopeId, null)) {
                        _scopeId = new Int64APColumnDef(this, "ScopeId", false);
                        _scopeId.Display = "作用域ID";
                    }
                    return _scopeId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual BzUserRoleTableDef As(string name) {
                return new BzUserRoleTableDef("BzUserRole", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, BzUserRole data, bool throwIfValidColumnName) {
                data.UserRoleId = UserRoleId.GetValue<long>(reader, throwIfValidColumnName);
                data.UserId = UserId.GetValue<long>(reader, throwIfValidColumnName);
                data.RoleId = RoleId.GetValue<long>(reader, throwIfValidColumnName);
                data.ScopeType = ScopeType.GetValue<string>(reader, throwIfValidColumnName);
                data.ScopeId = ScopeId.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUserRole Map(IDataReader reader) {
                BzUserRole data = new BzUserRole();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUserRole TolerantMap(IDataReader reader) {
                BzUserRole data = new BzUserRole();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUserRole> MapList(IDataReader reader) {
                List<BzUserRole> list = new List<BzUserRole>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUserRole> TolerantMapList(IDataReader reader) {
                List<BzUserRole> list = new List<BzUserRole>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ProfileModifyPeriodTableDef : APTableDef {
            
            private Int64APColumnDef _periodId;
            
            private StringAPColumnDef _name;
            
            private DateTimeAPColumnDef _beginDate;
            
            private DateTimeAPColumnDef _endDate;
            
            private BooleanAPColumnDef _isCurrent;
            
            public ProfileModifyPeriodTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ProfileModifyPeriodTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new Int64APColumnDef(this, "PeriodId", false);
                        _periodId.Display = "周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// Name ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Name {
                get {
                    if (Object.ReferenceEquals(_name, null)) {
                        _name = new StringAPColumnDef(this, "Name", false, 100);
                        _name.Display = "周期名称";
                    }
                    return _name;
                }
            }
            
            /// <summary>
            /// BeginDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef BeginDate {
                get {
                    if (Object.ReferenceEquals(_beginDate, null)) {
                        _beginDate = new DateTimeAPColumnDef(this, "BeginDate", false);
                        _beginDate.Display = "开始时间（修改区间）";
                    }
                    return _beginDate;
                }
            }
            
            /// <summary>
            /// EndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef EndDate {
                get {
                    if (Object.ReferenceEquals(_endDate, null)) {
                        _endDate = new DateTimeAPColumnDef(this, "EndDate", false);
                        _endDate.Display = "结束时间（修改区间）";
                    }
                    return _endDate;
                }
            }
            
            /// <summary>
            /// IsCurrent ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsCurrent {
                get {
                    if (Object.ReferenceEquals(_isCurrent, null)) {
                        _isCurrent = new BooleanAPColumnDef(this, "IsCurrent", false);
                        _isCurrent.Display = "是否当前修改期";
                    }
                    return _isCurrent;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ProfileModifyPeriodTableDef As(string name) {
                return new ProfileModifyPeriodTableDef("ProfileModifyPeriod", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, ProfileModifyPeriod data, bool throwIfValidColumnName) {
                data.PeriodId = PeriodId.GetValue<long>(reader, throwIfValidColumnName);
                data.Name = Name.GetValue<string>(reader, throwIfValidColumnName);
                data.BeginDate = BeginDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.EndDate = EndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.IsCurrent = IsCurrent.GetValue<bool>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ProfileModifyPeriod Map(IDataReader reader) {
                ProfileModifyPeriod data = new ProfileModifyPeriod();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ProfileModifyPeriod TolerantMap(IDataReader reader) {
                ProfileModifyPeriod data = new ProfileModifyPeriod();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ProfileModifyPeriod> MapList(IDataReader reader) {
                List<ProfileModifyPeriod> list = new List<ProfileModifyPeriod>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ProfileModifyPeriod> TolerantMapList(IDataReader reader) {
                List<ProfileModifyPeriod> list = new List<ProfileModifyPeriod>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class BzUserProfileHistoryTableDef : APTableDef {
            
            private Int64APColumnDef _id;
            
            private Int64APColumnDef _userId;
            
            private Int64APColumnDef _companyId;
            
            private StringAPColumnDef _userName;
            
            private StringAPColumnDef _userType;
            
            private StringAPColumnDef _realName;
            
            private StringAPColumnDef _iDCard;
            
            private StringAPColumnDef _trainNo;
            
            private Int64APColumnDef _genderPKID;
            
            private DateTimeAPColumnDef _birthday;
            
            private Int64APColumnDef _politicalStatusPKID;
            
            private Int64APColumnDef _nationalityPKID;
            
            private Int64APColumnDef _eduSubjectPKID;
            
            private Int64APColumnDef _eduStagePKID;
            
            private DateTimeAPColumnDef _jobDate;
            
            private Int64APColumnDef _skillTitlePKID;
            
            private DateTimeAPColumnDef _skillDate;
            
            private StringAPColumnDef _companyName;
            
            private StringAPColumnDef _companyNameOuter;
            
            private StringAPColumnDef _companyaddress;
            
            private Int64APColumnDef _rankTitlePKID;
            
            private Int64APColumnDef _eduBgPKID;
            
            private Int64APColumnDef _eduDegreePKID;
            
            private StringAPColumnDef _graduateSchool;
            
            private DateTimeAPColumnDef _graduateDate;
            
            private StringAPColumnDef _phonemobile;
            
            private StringAPColumnDef _email;
            
            private Int64APColumnDef _periodId;
            
            public BzUserProfileHistoryTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected BzUserProfileHistoryTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// Id ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Id {
                get {
                    if (Object.ReferenceEquals(_id, null)) {
                        _id = new Int64APColumnDef(this, "Id", false);
                        _id.Display = "ID";
                    }
                    return _id;
                }
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new Int64APColumnDef(this, "UserId", false);
                        _userId.Display = "用户ID";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// CompanyId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CompanyId {
                get {
                    if (Object.ReferenceEquals(_companyId, null)) {
                        _companyId = new Int64APColumnDef(this, "CompanyId", false);
                        _companyId.Display = "单位ID";
                    }
                    return _companyId;
                }
            }
            
            /// <summary>
            /// UserName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef UserName {
                get {
                    if (Object.ReferenceEquals(_userName, null)) {
                        _userName = new StringAPColumnDef(this, "UserName", false, 255);
                        _userName.Display = "用户名";
                        _userName.Required = true;
                    }
                    return _userName;
                }
            }
            
            /// <summary>
            /// UserType ColumnDef
            /// </summary>
            public virtual StringAPColumnDef UserType {
                get {
                    if (Object.ReferenceEquals(_userType, null)) {
                        _userType = new StringAPColumnDef(this, "UserType", false, 255);
                        _userType.Display = "用户类型";
                    }
                    return _userType;
                }
            }
            
            /// <summary>
            /// RealName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef RealName {
                get {
                    if (Object.ReferenceEquals(_realName, null)) {
                        _realName = new StringAPColumnDef(this, "RealName", false, 40);
                        _realName.Display = "真实姓名";
                        _realName.Required = true;
                    }
                    return _realName;
                }
            }
            
            /// <summary>
            /// IDCard ColumnDef
            /// </summary>
            public virtual StringAPColumnDef IDCard {
                get {
                    if (Object.ReferenceEquals(_iDCard, null)) {
                        _iDCard = new StringAPColumnDef(this, "IDCard", false, 18);
                        _iDCard.Display = "身份证件号";
                        _iDCard.Required = true;
                    }
                    return _iDCard;
                }
            }
            
            /// <summary>
            /// TrainNo ColumnDef
            /// </summary>
            public virtual StringAPColumnDef TrainNo {
                get {
                    if (Object.ReferenceEquals(_trainNo, null)) {
                        _trainNo = new StringAPColumnDef(this, "TrainNo", false, 20);
                        _trainNo.Display = "师训编号";
                    }
                    return _trainNo;
                }
            }
            
            /// <summary>
            /// GenderPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef GenderPKID {
                get {
                    if (Object.ReferenceEquals(_genderPKID, null)) {
                        _genderPKID = new Int64APColumnDef(this, "GenderPKID", false);
                        _genderPKID.Display = "性别";
                    }
                    return _genderPKID;
                }
            }
            
            /// <summary>
            /// Birthday ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef Birthday {
                get {
                    if (Object.ReferenceEquals(_birthday, null)) {
                        _birthday = new DateTimeAPColumnDef(this, "Birthday", false);
                        _birthday.Display = "出生年月";
                        _birthday.Required = true;
                    }
                    return _birthday;
                }
            }
            
            /// <summary>
            /// PoliticalStatusPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PoliticalStatusPKID {
                get {
                    if (Object.ReferenceEquals(_politicalStatusPKID, null)) {
                        _politicalStatusPKID = new Int64APColumnDef(this, "PoliticalStatusPKID", false);
                        _politicalStatusPKID.Display = "政治面貌";
                    }
                    return _politicalStatusPKID;
                }
            }
            
            /// <summary>
            /// NationalityPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef NationalityPKID {
                get {
                    if (Object.ReferenceEquals(_nationalityPKID, null)) {
                        _nationalityPKID = new Int64APColumnDef(this, "NationalityPKID", false);
                        _nationalityPKID.Display = "民族";
                    }
                    return _nationalityPKID;
                }
            }
            
            /// <summary>
            /// EduSubjectPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef EduSubjectPKID {
                get {
                    if (Object.ReferenceEquals(_eduSubjectPKID, null)) {
                        _eduSubjectPKID = new Int64APColumnDef(this, "EduSubjectPKID", false);
                        _eduSubjectPKID.Display = "任教学科";
                    }
                    return _eduSubjectPKID;
                }
            }
            
            /// <summary>
            /// EduStagePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef EduStagePKID {
                get {
                    if (Object.ReferenceEquals(_eduStagePKID, null)) {
                        _eduStagePKID = new Int64APColumnDef(this, "EduStagePKID", false);
                        _eduStagePKID.Display = "任教学段";
                    }
                    return _eduStagePKID;
                }
            }
            
            /// <summary>
            /// JobDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef JobDate {
                get {
                    if (Object.ReferenceEquals(_jobDate, null)) {
                        _jobDate = new DateTimeAPColumnDef(this, "JobDate", true);
                        _jobDate.Display = "参加教育工作年月";
                    }
                    return _jobDate;
                }
            }
            
            /// <summary>
            /// SkillTitlePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef SkillTitlePKID {
                get {
                    if (Object.ReferenceEquals(_skillTitlePKID, null)) {
                        _skillTitlePKID = new Int64APColumnDef(this, "SkillTitlePKID", false);
                        _skillTitlePKID.Display = "现任专技职称";
                    }
                    return _skillTitlePKID;
                }
            }
            
            /// <summary>
            /// SkillDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef SkillDate {
                get {
                    if (Object.ReferenceEquals(_skillDate, null)) {
                        _skillDate = new DateTimeAPColumnDef(this, "SkillDate", true);
                        _skillDate.Display = "职称通过年月";
                    }
                    return _skillDate;
                }
            }
            
            /// <summary>
            /// CompanyName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CompanyName {
                get {
                    if (Object.ReferenceEquals(_companyName, null)) {
                        _companyName = new StringAPColumnDef(this, "CompanyName", false, 100);
                        _companyName.Display = "单位";
                    }
                    return _companyName;
                }
            }
            
            /// <summary>
            /// CompanyNameOuter ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CompanyNameOuter {
                get {
                    if (Object.ReferenceEquals(_companyNameOuter, null)) {
                        _companyNameOuter = new StringAPColumnDef(this, "CompanyNameOuter", false, 800);
                        _companyNameOuter.Display = "单位(数据同步)";
                    }
                    return _companyNameOuter;
                }
            }
            
            /// <summary>
            /// Companyaddress ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Companyaddress {
                get {
                    if (Object.ReferenceEquals(_companyaddress, null)) {
                        _companyaddress = new StringAPColumnDef(this, "Companyaddress", false, 255);
                        _companyaddress.Display = "单位地址";
                    }
                    return _companyaddress;
                }
            }
            
            /// <summary>
            /// RankTitlePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef RankTitlePKID {
                get {
                    if (Object.ReferenceEquals(_rankTitlePKID, null)) {
                        _rankTitlePKID = new Int64APColumnDef(this, "RankTitlePKID", false);
                        _rankTitlePKID.Display = "行政职务";
                    }
                    return _rankTitlePKID;
                }
            }
            
            /// <summary>
            /// EduBgPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef EduBgPKID {
                get {
                    if (Object.ReferenceEquals(_eduBgPKID, null)) {
                        _eduBgPKID = new Int64APColumnDef(this, "EduBgPKID", false);
                        _eduBgPKID.Display = "学历";
                    }
                    return _eduBgPKID;
                }
            }
            
            /// <summary>
            /// EduDegreePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef EduDegreePKID {
                get {
                    if (Object.ReferenceEquals(_eduDegreePKID, null)) {
                        _eduDegreePKID = new Int64APColumnDef(this, "EduDegreePKID", false);
                        _eduDegreePKID.Display = "学位";
                    }
                    return _eduDegreePKID;
                }
            }
            
            /// <summary>
            /// GraduateSchool ColumnDef
            /// </summary>
            public virtual StringAPColumnDef GraduateSchool {
                get {
                    if (Object.ReferenceEquals(_graduateSchool, null)) {
                        _graduateSchool = new StringAPColumnDef(this, "GraduateSchool", false, 100);
                        _graduateSchool.Display = "毕业院校与专业";
                    }
                    return _graduateSchool;
                }
            }
            
            /// <summary>
            /// GraduateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef GraduateDate {
                get {
                    if (Object.ReferenceEquals(_graduateDate, null)) {
                        _graduateDate = new DateTimeAPColumnDef(this, "GraduateDate", true);
                        _graduateDate.Display = "毕业年月";
                    }
                    return _graduateDate;
                }
            }
            
            /// <summary>
            /// Phonemobile ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Phonemobile {
                get {
                    if (Object.ReferenceEquals(_phonemobile, null)) {
                        _phonemobile = new StringAPColumnDef(this, "Phonemobile", false, 20);
                        _phonemobile.Display = "手机号码";
                    }
                    return _phonemobile;
                }
            }
            
            /// <summary>
            /// Email ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Email {
                get {
                    if (Object.ReferenceEquals(_email, null)) {
                        _email = new StringAPColumnDef(this, "Email", false, 255);
                        _email.Display = "电子邮箱";
                    }
                    return _email;
                }
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new Int64APColumnDef(this, "PeriodId", true);
                        _periodId.Display = "修改周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual BzUserProfileHistoryTableDef As(string name) {
                return new BzUserProfileHistoryTableDef("BzUserProfileHistory", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, BzUserProfileHistory data, bool throwIfValidColumnName) {
                data.Id = Id.GetValue<long>(reader, throwIfValidColumnName);
                data.UserId = UserId.GetValue<long>(reader, throwIfValidColumnName);
                data.CompanyId = CompanyId.GetValue<long>(reader, throwIfValidColumnName);
                data.UserName = UserName.GetValue<string>(reader, throwIfValidColumnName);
                data.UserType = UserType.GetValue<string>(reader, throwIfValidColumnName);
                data.RealName = RealName.GetValue<string>(reader, throwIfValidColumnName);
                data.IDCard = IDCard.GetValue<string>(reader, throwIfValidColumnName);
                data.TrainNo = TrainNo.GetValue<string>(reader, throwIfValidColumnName);
                data.GenderPKID = GenderPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.Birthday = Birthday.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.PoliticalStatusPKID = PoliticalStatusPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.NationalityPKID = NationalityPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.EduSubjectPKID = EduSubjectPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.EduStagePKID = EduStagePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.JobDate = JobDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.SkillTitlePKID = SkillTitlePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.SkillDate = SkillDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.CompanyName = CompanyName.GetValue<string>(reader, throwIfValidColumnName);
                data.CompanyNameOuter = CompanyNameOuter.GetValue<string>(reader, throwIfValidColumnName);
                data.Companyaddress = Companyaddress.GetValue<string>(reader, throwIfValidColumnName);
                data.RankTitlePKID = RankTitlePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.EduBgPKID = EduBgPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.EduDegreePKID = EduDegreePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.GraduateSchool = GraduateSchool.GetValue<string>(reader, throwIfValidColumnName);
                data.GraduateDate = GraduateDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Phonemobile = Phonemobile.GetValue<string>(reader, throwIfValidColumnName);
                data.Email = Email.GetValue<string>(reader, throwIfValidColumnName);
                data.PeriodId = PeriodId.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUserProfileHistory Map(IDataReader reader) {
                BzUserProfileHistory data = new BzUserProfileHistory();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzUserProfileHistory TolerantMap(IDataReader reader) {
                BzUserProfileHistory data = new BzUserProfileHistory();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUserProfileHistory> MapList(IDataReader reader) {
                List<BzUserProfileHistory> list = new List<BzUserProfileHistory>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzUserProfileHistory> TolerantMapList(IDataReader reader) {
                List<BzUserProfileHistory> list = new List<BzUserProfileHistory>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclareBaseHistoryTableDef : APTableDef {
            
            private Int64APColumnDef _id;
            
            private Int64APColumnDef _teacherId;
            
            private Int64APColumnDef _declareTargetPKID;
            
            private Int64APColumnDef _declareSubjectPKID;
            
            private Int64APColumnDef _declareStagePKID;
            
            private BooleanAPColumnDef _allowFlowToSchool;
            
            private BooleanAPColumnDef _allowFitResearcher;
            
            private BooleanAPColumnDef _hasTeam;
            
            private StringAPColumnDef _teamName;
            
            private Int32APColumnDef _memberCount;
            
            private Int32APColumnDef _activeCount;
            
            private Int64APColumnDef _periodId;
            
            public DeclareBaseHistoryTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclareBaseHistoryTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// Id ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Id {
                get {
                    if (Object.ReferenceEquals(_id, null)) {
                        _id = new Int64APColumnDef(this, "Id", false);
                        _id.Display = "ID";
                    }
                    return _id;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// DeclareTargetPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareTargetPKID {
                get {
                    if (Object.ReferenceEquals(_declareTargetPKID, null)) {
                        _declareTargetPKID = new Int64APColumnDef(this, "DeclareTargetPKID", false);
                        _declareTargetPKID.Display = "申报（担任）称号";
                    }
                    return _declareTargetPKID;
                }
            }
            
            /// <summary>
            /// DeclareSubjectPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareSubjectPKID {
                get {
                    if (Object.ReferenceEquals(_declareSubjectPKID, null)) {
                        _declareSubjectPKID = new Int64APColumnDef(this, "DeclareSubjectPKID", false);
                        _declareSubjectPKID.Display = "申报学科";
                    }
                    return _declareSubjectPKID;
                }
            }
            
            /// <summary>
            /// DeclareStagePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareStagePKID {
                get {
                    if (Object.ReferenceEquals(_declareStagePKID, null)) {
                        _declareStagePKID = new Int64APColumnDef(this, "DeclareStagePKID", false);
                        _declareStagePKID.Display = "申报学段";
                    }
                    return _declareStagePKID;
                }
            }
            
            /// <summary>
            /// AllowFlowToSchool ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef AllowFlowToSchool {
                get {
                    if (Object.ReferenceEquals(_allowFlowToSchool, null)) {
                        _allowFlowToSchool = new BooleanAPColumnDef(this, "AllowFlowToSchool", false);
                        _allowFlowToSchool.Display = "流入学校开展工作";
                    }
                    return _allowFlowToSchool;
                }
            }
            
            /// <summary>
            /// AllowFitResearcher ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef AllowFitResearcher {
                get {
                    if (Object.ReferenceEquals(_allowFitResearcher, null)) {
                        _allowFitResearcher = new BooleanAPColumnDef(this, "AllowFitResearcher", false);
                        _allowFitResearcher.Display = "配合教研员开展工作";
                    }
                    return _allowFitResearcher;
                }
            }
            
            /// <summary>
            /// HasTeam ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef HasTeam {
                get {
                    if (Object.ReferenceEquals(_hasTeam, null)) {
                        _hasTeam = new BooleanAPColumnDef(this, "HasTeam", false);
                        _hasTeam.Display = "拥有工作室";
                    }
                    return _hasTeam;
                }
            }
            
            /// <summary>
            /// TeamName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef TeamName {
                get {
                    if (Object.ReferenceEquals(_teamName, null)) {
                        _teamName = new StringAPColumnDef(this, "TeamName", false, 100);
                        _teamName.Display = "梯队名称";
                    }
                    return _teamName;
                }
            }
            
            /// <summary>
            /// MemberCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef MemberCount {
                get {
                    if (Object.ReferenceEquals(_memberCount, null)) {
                        _memberCount = new Int32APColumnDef(this, "MemberCount", false);
                        _memberCount.Display = "学员数量";
                    }
                    return _memberCount;
                }
            }
            
            /// <summary>
            /// ActiveCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef ActiveCount {
                get {
                    if (Object.ReferenceEquals(_activeCount, null)) {
                        _activeCount = new Int32APColumnDef(this, "ActiveCount", false);
                        _activeCount.Display = "活动数量";
                    }
                    return _activeCount;
                }
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new Int64APColumnDef(this, "PeriodId", true);
                        _periodId.Display = "修改周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclareBaseHistoryTableDef As(string name) {
                return new DeclareBaseHistoryTableDef("DeclareBaseHistory", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, DeclareBaseHistory data, bool throwIfValidColumnName) {
                data.Id = Id.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareTargetPKID = DeclareTargetPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareSubjectPKID = DeclareSubjectPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareStagePKID = DeclareStagePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.AllowFlowToSchool = AllowFlowToSchool.GetValue<bool>(reader, throwIfValidColumnName);
                data.AllowFitResearcher = AllowFitResearcher.GetValue<bool>(reader, throwIfValidColumnName);
                data.HasTeam = HasTeam.GetValue<bool>(reader, throwIfValidColumnName);
                data.TeamName = TeamName.GetValue<string>(reader, throwIfValidColumnName);
                data.MemberCount = MemberCount.GetValue<int>(reader, throwIfValidColumnName);
                data.ActiveCount = ActiveCount.GetValue<int>(reader, throwIfValidColumnName);
                data.PeriodId = PeriodId.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareBaseHistory Map(IDataReader reader) {
                DeclareBaseHistory data = new DeclareBaseHistory();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareBaseHistory TolerantMap(IDataReader reader) {
                DeclareBaseHistory data = new DeclareBaseHistory();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareBaseHistory> MapList(IDataReader reader) {
                List<DeclareBaseHistory> list = new List<DeclareBaseHistory>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareBaseHistory> TolerantMapList(IDataReader reader) {
                List<DeclareBaseHistory> list = new List<DeclareBaseHistory>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class CompanyTableDef : APTableDef {
            
            private Int64APColumnDef _companyId;
            
            private StringAPColumnDef _companyName;
            
            public CompanyTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected CompanyTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// CompanyId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CompanyId {
                get {
                    if (Object.ReferenceEquals(_companyId, null)) {
                        _companyId = new Int64APColumnDef(this, "CompanyId", false);
                        _companyId.Display = "单位ID";
                    }
                    return _companyId;
                }
            }
            
            /// <summary>
            /// CompanyName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CompanyName {
                get {
                    if (Object.ReferenceEquals(_companyName, null)) {
                        _companyName = new StringAPColumnDef(this, "CompanyName", false, 255);
                        _companyName.Display = "单位名称";
                        _companyName.Required = true;
                    }
                    return _companyName;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual CompanyTableDef As(string name) {
                return new CompanyTableDef("Company", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Company data, bool throwIfValidColumnName) {
                data.CompanyId = CompanyId.GetValue<long>(reader, throwIfValidColumnName);
                data.CompanyName = CompanyName.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Company Map(IDataReader reader) {
                Company data = new Company();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Company TolerantMap(IDataReader reader) {
                Company data = new Company();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Company> MapList(IDataReader reader) {
                List<Company> list = new List<Company>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Company> TolerantMapList(IDataReader reader) {
                List<Company> list = new List<Company>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class CompanyAccesserTableDef : APTableDef {
            
            private Int64APColumnDef _companyId;
            
            private Int64APColumnDef _userId;
            
            public CompanyAccesserTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected CompanyAccesserTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// CompanyId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CompanyId {
                get {
                    if (Object.ReferenceEquals(_companyId, null)) {
                        _companyId = new Int64APColumnDef(this, "CompanyId", false);
                        _companyId.Display = "单位ID";
                    }
                    return _companyId;
                }
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new Int64APColumnDef(this, "UserId", false);
                        _userId.Display = "用户ID";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual CompanyAccesserTableDef As(string name) {
                return new CompanyAccesserTableDef("CompanyAccesser", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, CompanyAccesser data, bool throwIfValidColumnName) {
                data.CompanyId = CompanyId.GetValue<long>(reader, throwIfValidColumnName);
                data.UserId = UserId.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual CompanyAccesser Map(IDataReader reader) {
                CompanyAccesser data = new CompanyAccesser();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual CompanyAccesser TolerantMap(IDataReader reader) {
                CompanyAccesser data = new CompanyAccesser();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<CompanyAccesser> MapList(IDataReader reader) {
                List<CompanyAccesser> list = new List<CompanyAccesser>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<CompanyAccesser> TolerantMapList(IDataReader reader) {
                List<CompanyAccesser> list = new List<CompanyAccesser>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class CompanyDeclareTableDef : APTableDef {
            
            private Int64APColumnDef _companyId;
            
            private Int64APColumnDef _teacherId;
            
            public CompanyDeclareTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected CompanyDeclareTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// CompanyId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CompanyId {
                get {
                    if (Object.ReferenceEquals(_companyId, null)) {
                        _companyId = new Int64APColumnDef(this, "CompanyId", false);
                        _companyId.Display = "单位ID";
                    }
                    return _companyId;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual CompanyDeclareTableDef As(string name) {
                return new CompanyDeclareTableDef("CompanyDeclare", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, CompanyDeclare data, bool throwIfValidColumnName) {
                data.CompanyId = CompanyId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual CompanyDeclare Map(IDataReader reader) {
                CompanyDeclare data = new CompanyDeclare();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual CompanyDeclare TolerantMap(IDataReader reader) {
                CompanyDeclare data = new CompanyDeclare();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<CompanyDeclare> MapList(IDataReader reader) {
                List<CompanyDeclare> list = new List<CompanyDeclare>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<CompanyDeclare> TolerantMapList(IDataReader reader) {
                List<CompanyDeclare> list = new List<CompanyDeclare>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class BzPermissionTableDef : APTableDef {
            
            private Int64APColumnDef _id;
            
            private StringAPColumnDef _name;
            
            private Int32APColumnDef _status;
            
            public BzPermissionTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected BzPermissionTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// PermissionId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Id {
                get {
                    if (Object.ReferenceEquals(_id, null)) {
                        _id = new Int64APColumnDef(this, "PermissionId", false);
                        _id.Display = "权限ID";
                    }
                    return _id;
                }
            }
            
            /// <summary>
            /// Name ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Name {
                get {
                    if (Object.ReferenceEquals(_name, null)) {
                        _name = new StringAPColumnDef(this, "Name", false, 255);
                        _name.Display = "权限名称";
                        _name.Required = true;
                    }
                    return _name;
                }
            }
            
            /// <summary>
            /// Status ColumnDef
            /// </summary>
            public virtual Int32APColumnDef Status {
                get {
                    if (Object.ReferenceEquals(_status, null)) {
                        _status = new Int32APColumnDef(this, "Status", false);
                        _status.Display = "权限状态";
                    }
                    return _status;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual BzPermissionTableDef As(string name) {
                return new BzPermissionTableDef("BzPermission", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, BzPermission data, bool throwIfValidColumnName) {
                data.Id = Id.GetValue<long>(reader, throwIfValidColumnName);
                data.Name = Name.GetValue<string>(reader, throwIfValidColumnName);
                data.Status = Status.GetValue<int>(reader, throwIfValidColumnName, 0);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzPermission Map(IDataReader reader) {
                BzPermission data = new BzPermission();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzPermission TolerantMap(IDataReader reader) {
                BzPermission data = new BzPermission();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzPermission> MapList(IDataReader reader) {
                List<BzPermission> list = new List<BzPermission>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzPermission> TolerantMapList(IDataReader reader) {
                List<BzPermission> list = new List<BzPermission>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class BzRolePermissionTableDef : APTableDef {
            
            private Int64APColumnDef _rolePermissionId;
            
            private Int64APColumnDef _roleId;
            
            private Int64APColumnDef _permissionId;
            
            private BooleanAPColumnDef _isGrant;
            
            public BzRolePermissionTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected BzRolePermissionTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// RolePermissionId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef RolePermissionId {
                get {
                    if (Object.ReferenceEquals(_rolePermissionId, null)) {
                        _rolePermissionId = new Int64APColumnDef(this, "RolePermissionId", false);
                        _rolePermissionId.Display = "ID";
                    }
                    return _rolePermissionId;
                }
            }
            
            /// <summary>
            /// RoleId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef RoleId {
                get {
                    if (Object.ReferenceEquals(_roleId, null)) {
                        _roleId = new Int64APColumnDef(this, "RoleId", false);
                        _roleId.Display = "角色ID";
                    }
                    return _roleId;
                }
            }
            
            /// <summary>
            /// PermissionId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PermissionId {
                get {
                    if (Object.ReferenceEquals(_permissionId, null)) {
                        _permissionId = new Int64APColumnDef(this, "PermissionId", false);
                        _permissionId.Display = "权限ID";
                    }
                    return _permissionId;
                }
            }
            
            /// <summary>
            /// IsGrant ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsGrant {
                get {
                    if (Object.ReferenceEquals(_isGrant, null)) {
                        _isGrant = new BooleanAPColumnDef(this, "IsGrant", false);
                        _isGrant.Display = "是否授权";
                    }
                    return _isGrant;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual BzRolePermissionTableDef As(string name) {
                return new BzRolePermissionTableDef("BzRolePermission", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, BzRolePermission data, bool throwIfValidColumnName) {
                data.RolePermissionId = RolePermissionId.GetValue<long>(reader, throwIfValidColumnName);
                data.RoleId = RoleId.GetValue<long>(reader, throwIfValidColumnName);
                data.PermissionId = PermissionId.GetValue<long>(reader, throwIfValidColumnName);
                data.IsGrant = IsGrant.GetValue<bool>(reader, throwIfValidColumnName, true);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzRolePermission Map(IDataReader reader) {
                BzRolePermission data = new BzRolePermission();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual BzRolePermission TolerantMap(IDataReader reader) {
                BzRolePermission data = new BzRolePermission();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzRolePermission> MapList(IDataReader reader) {
                List<BzRolePermission> list = new List<BzRolePermission>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<BzRolePermission> TolerantMapList(IDataReader reader) {
                List<BzRolePermission> list = new List<BzRolePermission>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclareBaseTableDef : APTableDef {
            
            private Int64APColumnDef _teacherId;
            
            private Int64APColumnDef _declareTargetPKID;
            
            private Int64APColumnDef _declareSubjectPKID;
            
            private Int64APColumnDef _declareStagePKID;
            
            private BooleanAPColumnDef _allowFlowToSchool;
            
            private BooleanAPColumnDef _allowFitResearcher;
            
            private BooleanAPColumnDef _hasTeam;
            
            private StringAPColumnDef _teamName;
            
            private Int32APColumnDef _memberCount;
            
            private Int32APColumnDef _activeCount;
            
            private Int64APColumnDef _periodId;
            
            public DeclareBaseTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclareBaseTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// DeclareTargetPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareTargetPKID {
                get {
                    if (Object.ReferenceEquals(_declareTargetPKID, null)) {
                        _declareTargetPKID = new Int64APColumnDef(this, "DeclareTargetPKID", false);
                        _declareTargetPKID.Display = "申报（担任）称号";
                    }
                    return _declareTargetPKID;
                }
            }
            
            /// <summary>
            /// DeclareSubjectPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareSubjectPKID {
                get {
                    if (Object.ReferenceEquals(_declareSubjectPKID, null)) {
                        _declareSubjectPKID = new Int64APColumnDef(this, "DeclareSubjectPKID", false);
                        _declareSubjectPKID.Display = "申报学科";
                    }
                    return _declareSubjectPKID;
                }
            }
            
            /// <summary>
            /// DeclareStagePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareStagePKID {
                get {
                    if (Object.ReferenceEquals(_declareStagePKID, null)) {
                        _declareStagePKID = new Int64APColumnDef(this, "DeclareStagePKID", false);
                        _declareStagePKID.Display = "申报学段";
                    }
                    return _declareStagePKID;
                }
            }
            
            /// <summary>
            /// AllowFlowToSchool ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef AllowFlowToSchool {
                get {
                    if (Object.ReferenceEquals(_allowFlowToSchool, null)) {
                        _allowFlowToSchool = new BooleanAPColumnDef(this, "AllowFlowToSchool", false);
                        _allowFlowToSchool.Display = "流入学校开展工作";
                    }
                    return _allowFlowToSchool;
                }
            }
            
            /// <summary>
            /// AllowFitResearcher ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef AllowFitResearcher {
                get {
                    if (Object.ReferenceEquals(_allowFitResearcher, null)) {
                        _allowFitResearcher = new BooleanAPColumnDef(this, "AllowFitResearcher", false);
                        _allowFitResearcher.Display = "配合教研员开展工作";
                    }
                    return _allowFitResearcher;
                }
            }
            
            /// <summary>
            /// HasTeam ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef HasTeam {
                get {
                    if (Object.ReferenceEquals(_hasTeam, null)) {
                        _hasTeam = new BooleanAPColumnDef(this, "HasTeam", false);
                        _hasTeam.Display = "拥有工作室";
                    }
                    return _hasTeam;
                }
            }
            
            /// <summary>
            /// TeamName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef TeamName {
                get {
                    if (Object.ReferenceEquals(_teamName, null)) {
                        _teamName = new StringAPColumnDef(this, "TeamName", false, 100);
                        _teamName.Display = "梯队名称";
                    }
                    return _teamName;
                }
            }
            
            /// <summary>
            /// MemberCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef MemberCount {
                get {
                    if (Object.ReferenceEquals(_memberCount, null)) {
                        _memberCount = new Int32APColumnDef(this, "MemberCount", false);
                        _memberCount.Display = "学员数量";
                    }
                    return _memberCount;
                }
            }
            
            /// <summary>
            /// ActiveCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef ActiveCount {
                get {
                    if (Object.ReferenceEquals(_activeCount, null)) {
                        _activeCount = new Int32APColumnDef(this, "ActiveCount", false);
                        _activeCount.Display = "活动数量";
                    }
                    return _activeCount;
                }
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new Int64APColumnDef(this, "PeriodId", true);
                        _periodId.Display = "修改周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclareBaseTableDef As(string name) {
                return new DeclareBaseTableDef("DeclareBase", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, DeclareBase data, bool throwIfValidColumnName) {
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareTargetPKID = DeclareTargetPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareSubjectPKID = DeclareSubjectPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareStagePKID = DeclareStagePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.AllowFlowToSchool = AllowFlowToSchool.GetValue<bool>(reader, throwIfValidColumnName);
                data.AllowFitResearcher = AllowFitResearcher.GetValue<bool>(reader, throwIfValidColumnName);
                data.HasTeam = HasTeam.GetValue<bool>(reader, throwIfValidColumnName);
                data.TeamName = TeamName.GetValue<string>(reader, throwIfValidColumnName);
                data.MemberCount = MemberCount.GetValue<int>(reader, throwIfValidColumnName);
                data.ActiveCount = ActiveCount.GetValue<int>(reader, throwIfValidColumnName);
                data.PeriodId = PeriodId.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareBase Map(IDataReader reader) {
                DeclareBase data = new DeclareBase();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareBase TolerantMap(IDataReader reader) {
                DeclareBase data = new DeclareBase();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareBase> MapList(IDataReader reader) {
                List<DeclareBase> list = new List<DeclareBase>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareBase> TolerantMapList(IDataReader reader) {
                List<DeclareBase> list = new List<DeclareBase>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclareResumeTableDef : APTableDef {
            
            private Int64APColumnDef _declareResumeId;
            
            private Int64APColumnDef _teacherId;
            
            private StringAPColumnDef _dateRegion;
            
            private StringAPColumnDef _company;
            
            private StringAPColumnDef _title;
            
            private BooleanAPColumnDef _isDeclare;
            
            private DateTimeAPColumnDef _createDate;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private Int64APColumnDef _modifier;
            
            public DeclareResumeTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclareResumeTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// DeclareResumeId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareResumeId {
                get {
                    if (Object.ReferenceEquals(_declareResumeId, null)) {
                        _declareResumeId = new Int64APColumnDef(this, "DeclareResumeId", false);
                        _declareResumeId.Display = "简历ID";
                    }
                    return _declareResumeId;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// DateRegion ColumnDef
            /// </summary>
            public virtual StringAPColumnDef DateRegion {
                get {
                    if (Object.ReferenceEquals(_dateRegion, null)) {
                        _dateRegion = new StringAPColumnDef(this, "DateRegion", false, 100);
                        _dateRegion.Display = "时间区间";
                    }
                    return _dateRegion;
                }
            }
            
            /// <summary>
            /// Company ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Company {
                get {
                    if (Object.ReferenceEquals(_company, null)) {
                        _company = new StringAPColumnDef(this, "Company", false, 100);
                        _company.Display = "单位";
                    }
                    return _company;
                }
            }
            
            /// <summary>
            /// Title ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Title {
                get {
                    if (Object.ReferenceEquals(_title, null)) {
                        _title = new StringAPColumnDef(this, "Title", false, 100);
                        _title.Display = "职称、职务";
                    }
                    return _title;
                }
            }
            
            /// <summary>
            /// IsDeclare ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsDeclare {
                get {
                    if (Object.ReferenceEquals(_isDeclare, null)) {
                        _isDeclare = new BooleanAPColumnDef(this, "IsDeclare", false);
                        _isDeclare.Display = "是否申报";
                    }
                    return _isDeclare;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "创建人";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Modifier ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Modifier {
                get {
                    if (Object.ReferenceEquals(_modifier, null)) {
                        _modifier = new Int64APColumnDef(this, "Modifier", false);
                        _modifier.Display = "修改人";
                    }
                    return _modifier;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclareResumeTableDef As(string name) {
                return new DeclareResumeTableDef("DeclareResume", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, DeclareResume data, bool throwIfValidColumnName) {
                data.DeclareResumeId = DeclareResumeId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.DateRegion = DateRegion.GetValue<string>(reader, throwIfValidColumnName);
                data.Company = Company.GetValue<string>(reader, throwIfValidColumnName);
                data.Title = Title.GetValue<string>(reader, throwIfValidColumnName);
                data.IsDeclare = IsDeclare.GetValue<bool>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Modifier = Modifier.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareResume Map(IDataReader reader) {
                DeclareResume data = new DeclareResume();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareResume TolerantMap(IDataReader reader) {
                DeclareResume data = new DeclareResume();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareResume> MapList(IDataReader reader) {
                List<DeclareResume> list = new List<DeclareResume>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareResume> TolerantMapList(IDataReader reader) {
                List<DeclareResume> list = new List<DeclareResume>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclareContentTableDef : APTableDef {
            
            private Int64APColumnDef _declareContentId;
            
            private Int64APColumnDef _teacherId;
            
            private StringAPColumnDef _contentKey;
            
            private StringAPColumnDef _contentValue;
            
            private StringAPColumnDef _contentDataType;
            
            private BooleanAPColumnDef _isDeclare;
            
            private DateTimeAPColumnDef _createDate;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private Int64APColumnDef _modifier;
            
            public DeclareContentTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclareContentTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// DeclareContentId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareContentId {
                get {
                    if (Object.ReferenceEquals(_declareContentId, null)) {
                        _declareContentId = new Int64APColumnDef(this, "DeclareContentId", false);
                        _declareContentId.Display = "内容ID";
                    }
                    return _declareContentId;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// ContentKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ContentKey {
                get {
                    if (Object.ReferenceEquals(_contentKey, null)) {
                        _contentKey = new StringAPColumnDef(this, "ContentKey", false, 200);
                        _contentKey.Display = "内容类别";
                    }
                    return _contentKey;
                }
            }
            
            /// <summary>
            /// ContentValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ContentValue {
                get {
                    if (Object.ReferenceEquals(_contentValue, null)) {
                        _contentValue = new StringAPColumnDef(this, "ContentValue", false, 30000);
                        _contentValue.Display = "内容";
                    }
                    return _contentValue;
                }
            }
            
            /// <summary>
            /// ContentDataType ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ContentDataType {
                get {
                    if (Object.ReferenceEquals(_contentDataType, null)) {
                        _contentDataType = new StringAPColumnDef(this, "ContentDataType", false, 100);
                        _contentDataType.Display = "内容数据类型";
                    }
                    return _contentDataType;
                }
            }
            
            /// <summary>
            /// IsDeclare ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsDeclare {
                get {
                    if (Object.ReferenceEquals(_isDeclare, null)) {
                        _isDeclare = new BooleanAPColumnDef(this, "IsDeclare", false);
                        _isDeclare.Display = "是否申报";
                    }
                    return _isDeclare;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "创建人";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Modifier ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Modifier {
                get {
                    if (Object.ReferenceEquals(_modifier, null)) {
                        _modifier = new Int64APColumnDef(this, "Modifier", false);
                        _modifier.Display = "修改人";
                    }
                    return _modifier;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclareContentTableDef As(string name) {
                return new DeclareContentTableDef("DeclareContent", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, DeclareContent data, bool throwIfValidColumnName) {
                data.DeclareContentId = DeclareContentId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.ContentKey = ContentKey.GetValue<string>(reader, throwIfValidColumnName);
                data.ContentValue = ContentValue.GetValue<string>(reader, throwIfValidColumnName);
                data.ContentDataType = ContentDataType.GetValue<string>(reader, throwIfValidColumnName);
                data.IsDeclare = IsDeclare.GetValue<bool>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Modifier = Modifier.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareContent Map(IDataReader reader) {
                DeclareContent data = new DeclareContent();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareContent TolerantMap(IDataReader reader) {
                DeclareContent data = new DeclareContent();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareContent> MapList(IDataReader reader) {
                List<DeclareContent> list = new List<DeclareContent>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareContent> TolerantMapList(IDataReader reader) {
                List<DeclareContent> list = new List<DeclareContent>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclareActiveTableDef : APTableDef {
            
            private Int64APColumnDef _declareActiveId;
            
            private Int64APColumnDef _teacherId;
            
            private StringAPColumnDef _activeKey;
            
            private DateTimeAPColumnDef _date;
            
            private StringAPColumnDef _location;
            
            private StringAPColumnDef _level;
            
            private StringAPColumnDef _contentValue;
            
            private StringAPColumnDef _dynamic1;
            
            private StringAPColumnDef _dynamic2;
            
            private StringAPColumnDef _dynamic3;
            
            private StringAPColumnDef _dynamic4;
            
            private StringAPColumnDef _dynamic5;
            
            private StringAPColumnDef _dynamic6;
            
            private StringAPColumnDef _dynamic7;
            
            private StringAPColumnDef _dynamic8;
            
            private Int64APColumnDef _dynamic9;
            
            private BooleanAPColumnDef _isShare;
            
            private BooleanAPColumnDef _isDeclare;
            
            private DateTimeAPColumnDef _createDate;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private Int64APColumnDef _modifier;
            
            public DeclareActiveTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclareActiveTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// DeclareActiveId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareActiveId {
                get {
                    if (Object.ReferenceEquals(_declareActiveId, null)) {
                        _declareActiveId = new Int64APColumnDef(this, "DeclareActiveId", false);
                        _declareActiveId.Display = "ID";
                    }
                    return _declareActiveId;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// ActiveKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ActiveKey {
                get {
                    if (Object.ReferenceEquals(_activeKey, null)) {
                        _activeKey = new StringAPColumnDef(this, "ActiveKey", false, 200);
                        _activeKey.Display = "内容类别";
                    }
                    return _activeKey;
                }
            }
            
            /// <summary>
            /// Date ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef Date {
                get {
                    if (Object.ReferenceEquals(_date, null)) {
                        _date = new DateTimeAPColumnDef(this, "Date", false);
                        _date.Display = "时间";
                    }
                    return _date;
                }
            }
            
            /// <summary>
            /// Location ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Location {
                get {
                    if (Object.ReferenceEquals(_location, null)) {
                        _location = new StringAPColumnDef(this, "Location", false, 100);
                        _location.Display = "地点";
                    }
                    return _location;
                }
            }
            
            /// <summary>
            /// Level ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Level {
                get {
                    if (Object.ReferenceEquals(_level, null)) {
                        _level = new StringAPColumnDef(this, "Level", false, 100);
                        _level.Display = "等级";
                    }
                    return _level;
                }
            }
            
            /// <summary>
            /// ContentValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ContentValue {
                get {
                    if (Object.ReferenceEquals(_contentValue, null)) {
                        _contentValue = new StringAPColumnDef(this, "ContentValue", false, 10000);
                        _contentValue.Display = "内容";
                    }
                    return _contentValue;
                }
            }
            
            /// <summary>
            /// Dynamic1 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic1 {
                get {
                    if (Object.ReferenceEquals(_dynamic1, null)) {
                        _dynamic1 = new StringAPColumnDef(this, "Dynamic1", false, 2000);
                        _dynamic1.Display = "动态内容1";
                    }
                    return _dynamic1;
                }
            }
            
            /// <summary>
            /// Dynamic2 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic2 {
                get {
                    if (Object.ReferenceEquals(_dynamic2, null)) {
                        _dynamic2 = new StringAPColumnDef(this, "Dynamic2", false, 2000);
                        _dynamic2.Display = "动态内容2";
                    }
                    return _dynamic2;
                }
            }
            
            /// <summary>
            /// Dynamic3 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic3 {
                get {
                    if (Object.ReferenceEquals(_dynamic3, null)) {
                        _dynamic3 = new StringAPColumnDef(this, "Dynamic3", false, 2000);
                        _dynamic3.Display = "动态内容3";
                    }
                    return _dynamic3;
                }
            }
            
            /// <summary>
            /// Dynamic4 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic4 {
                get {
                    if (Object.ReferenceEquals(_dynamic4, null)) {
                        _dynamic4 = new StringAPColumnDef(this, "Dynamic4", false, 2000);
                        _dynamic4.Display = "动态内容4";
                    }
                    return _dynamic4;
                }
            }
            
            /// <summary>
            /// Dynamic5 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic5 {
                get {
                    if (Object.ReferenceEquals(_dynamic5, null)) {
                        _dynamic5 = new StringAPColumnDef(this, "Dynamic5", false, 2000);
                        _dynamic5.Display = "动态内容5";
                    }
                    return _dynamic5;
                }
            }
            
            /// <summary>
            /// Dynamic6 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic6 {
                get {
                    if (Object.ReferenceEquals(_dynamic6, null)) {
                        _dynamic6 = new StringAPColumnDef(this, "Dynamic6", false, 2000);
                        _dynamic6.Display = "动态内容6";
                    }
                    return _dynamic6;
                }
            }
            
            /// <summary>
            /// Dynamic7 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic7 {
                get {
                    if (Object.ReferenceEquals(_dynamic7, null)) {
                        _dynamic7 = new StringAPColumnDef(this, "Dynamic7", false, 2000);
                        _dynamic7.Display = "动态内容7";
                    }
                    return _dynamic7;
                }
            }
            
            /// <summary>
            /// Dynamic8 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic8 {
                get {
                    if (Object.ReferenceEquals(_dynamic8, null)) {
                        _dynamic8 = new StringAPColumnDef(this, "Dynamic8", false, 2000);
                        _dynamic8.Display = "动态内容8";
                    }
                    return _dynamic8;
                }
            }
            
            /// <summary>
            /// Dynamic9 ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Dynamic9 {
                get {
                    if (Object.ReferenceEquals(_dynamic9, null)) {
                        _dynamic9 = new Int64APColumnDef(this, "Dynamic9", false);
                        _dynamic9.Display = "动态内容9";
                    }
                    return _dynamic9;
                }
            }
            
            /// <summary>
            /// IsShare ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsShare {
                get {
                    if (Object.ReferenceEquals(_isShare, null)) {
                        _isShare = new BooleanAPColumnDef(this, "IsShare", false);
                        _isShare.Display = "是否共享";
                    }
                    return _isShare;
                }
            }
            
            /// <summary>
            /// IsDeclare ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsDeclare {
                get {
                    if (Object.ReferenceEquals(_isDeclare, null)) {
                        _isDeclare = new BooleanAPColumnDef(this, "IsDeclare", false);
                        _isDeclare.Display = "是否申报";
                    }
                    return _isDeclare;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "创建人";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Modifier ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Modifier {
                get {
                    if (Object.ReferenceEquals(_modifier, null)) {
                        _modifier = new Int64APColumnDef(this, "Modifier", false);
                        _modifier.Display = "修改人";
                    }
                    return _modifier;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclareActiveTableDef As(string name) {
                return new DeclareActiveTableDef("DeclareActive", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, DeclareActive data, bool throwIfValidColumnName) {
                data.DeclareActiveId = DeclareActiveId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.ActiveKey = ActiveKey.GetValue<string>(reader, throwIfValidColumnName);
                data.Date = Date.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Location = Location.GetValue<string>(reader, throwIfValidColumnName);
                data.Level = Level.GetValue<string>(reader, throwIfValidColumnName);
                data.ContentValue = ContentValue.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic1 = Dynamic1.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic2 = Dynamic2.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic3 = Dynamic3.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic4 = Dynamic4.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic5 = Dynamic5.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic6 = Dynamic6.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic7 = Dynamic7.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic8 = Dynamic8.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic9 = Dynamic9.GetValue<long>(reader, throwIfValidColumnName);
                data.IsShare = IsShare.GetValue<bool>(reader, throwIfValidColumnName);
                data.IsDeclare = IsDeclare.GetValue<bool>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Modifier = Modifier.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareActive Map(IDataReader reader) {
                DeclareActive data = new DeclareActive();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareActive TolerantMap(IDataReader reader) {
                DeclareActive data = new DeclareActive();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareActive> MapList(IDataReader reader) {
                List<DeclareActive> list = new List<DeclareActive>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareActive> TolerantMapList(IDataReader reader) {
                List<DeclareActive> list = new List<DeclareActive>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclareAchievementTableDef : APTableDef {
            
            private Int64APColumnDef _declareAchievementId;
            
            private Int64APColumnDef _teacherId;
            
            private StringAPColumnDef _achievementKey;
            
            private StringAPColumnDef _date;
            
            private StringAPColumnDef _dateRegion;
            
            private StringAPColumnDef _location;
            
            private StringAPColumnDef _level;
            
            private StringAPColumnDef _nameOrTitle;
            
            private StringAPColumnDef _dynamic1;
            
            private StringAPColumnDef _dynamic2;
            
            private StringAPColumnDef _dynamic3;
            
            private StringAPColumnDef _dynamic4;
            
            private StringAPColumnDef _dynamic5;
            
            private Int64APColumnDef _dynamic6;
            
            private BooleanAPColumnDef _isShare;
            
            private BooleanAPColumnDef _isDeclare;
            
            private DateTimeAPColumnDef _createDate;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private Int64APColumnDef _modifier;
            
            public DeclareAchievementTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclareAchievementTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// DeclareAchievementId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareAchievementId {
                get {
                    if (Object.ReferenceEquals(_declareAchievementId, null)) {
                        _declareAchievementId = new Int64APColumnDef(this, "DeclareAchievementId", false);
                        _declareAchievementId.Display = "成果ID";
                    }
                    return _declareAchievementId;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// AchievementKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AchievementKey {
                get {
                    if (Object.ReferenceEquals(_achievementKey, null)) {
                        _achievementKey = new StringAPColumnDef(this, "AchievementKey", false, 200);
                        _achievementKey.Display = "内容类别";
                    }
                    return _achievementKey;
                }
            }
            
            /// <summary>
            /// Date ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Date {
                get {
                    if (Object.ReferenceEquals(_date, null)) {
                        _date = new StringAPColumnDef(this, "Date", false, 100);
                        _date.Display = "时间";
                    }
                    return _date;
                }
            }
            
            /// <summary>
            /// DateRegion ColumnDef
            /// </summary>
            public virtual StringAPColumnDef DateRegion {
                get {
                    if (Object.ReferenceEquals(_dateRegion, null)) {
                        _dateRegion = new StringAPColumnDef(this, "DateRegion", false, 100);
                        _dateRegion.Display = "时间区间";
                    }
                    return _dateRegion;
                }
            }
            
            /// <summary>
            /// Location ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Location {
                get {
                    if (Object.ReferenceEquals(_location, null)) {
                        _location = new StringAPColumnDef(this, "Location", false, 100);
                        _location.Display = "地点";
                    }
                    return _location;
                }
            }
            
            /// <summary>
            /// Level ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Level {
                get {
                    if (Object.ReferenceEquals(_level, null)) {
                        _level = new StringAPColumnDef(this, "Level", false, 100);
                        _level.Display = "等级";
                    }
                    return _level;
                }
            }
            
            /// <summary>
            /// NameOrTitle ColumnDef
            /// </summary>
            public virtual StringAPColumnDef NameOrTitle {
                get {
                    if (Object.ReferenceEquals(_nameOrTitle, null)) {
                        _nameOrTitle = new StringAPColumnDef(this, "NameOrTitle", false, 100);
                        _nameOrTitle.Display = "名称或标题";
                    }
                    return _nameOrTitle;
                }
            }
            
            /// <summary>
            /// Dynamic1 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic1 {
                get {
                    if (Object.ReferenceEquals(_dynamic1, null)) {
                        _dynamic1 = new StringAPColumnDef(this, "Dynamic1", false, 2000);
                        _dynamic1.Display = "动态内容1";
                    }
                    return _dynamic1;
                }
            }
            
            /// <summary>
            /// Dynamic2 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic2 {
                get {
                    if (Object.ReferenceEquals(_dynamic2, null)) {
                        _dynamic2 = new StringAPColumnDef(this, "Dynamic2", false, 2000);
                        _dynamic2.Display = "动态内容2";
                    }
                    return _dynamic2;
                }
            }
            
            /// <summary>
            /// Dynamic3 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic3 {
                get {
                    if (Object.ReferenceEquals(_dynamic3, null)) {
                        _dynamic3 = new StringAPColumnDef(this, "Dynamic3", false, 2000);
                        _dynamic3.Display = "动态内容3";
                    }
                    return _dynamic3;
                }
            }
            
            /// <summary>
            /// Dynamic4 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic4 {
                get {
                    if (Object.ReferenceEquals(_dynamic4, null)) {
                        _dynamic4 = new StringAPColumnDef(this, "Dynamic4", false, 2000);
                        _dynamic4.Display = "动态内容4";
                    }
                    return _dynamic4;
                }
            }
            
            /// <summary>
            /// Dynamic5 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic5 {
                get {
                    if (Object.ReferenceEquals(_dynamic5, null)) {
                        _dynamic5 = new StringAPColumnDef(this, "Dynamic5", false, 2000);
                        _dynamic5.Display = "动态内容5";
                    }
                    return _dynamic5;
                }
            }
            
            /// <summary>
            /// Dynamic6 ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Dynamic6 {
                get {
                    if (Object.ReferenceEquals(_dynamic6, null)) {
                        _dynamic6 = new Int64APColumnDef(this, "Dynamic6", false);
                        _dynamic6.Display = "动态内容9";
                    }
                    return _dynamic6;
                }
            }
            
            /// <summary>
            /// IsShare ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsShare {
                get {
                    if (Object.ReferenceEquals(_isShare, null)) {
                        _isShare = new BooleanAPColumnDef(this, "IsShare", false);
                        _isShare.Display = "是否共享";
                    }
                    return _isShare;
                }
            }
            
            /// <summary>
            /// IsDeclare ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsDeclare {
                get {
                    if (Object.ReferenceEquals(_isDeclare, null)) {
                        _isDeclare = new BooleanAPColumnDef(this, "IsDeclare", false);
                        _isDeclare.Display = "是否申报";
                    }
                    return _isDeclare;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "创建人";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Modifier ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Modifier {
                get {
                    if (Object.ReferenceEquals(_modifier, null)) {
                        _modifier = new Int64APColumnDef(this, "Modifier", false);
                        _modifier.Display = "修改人";
                    }
                    return _modifier;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclareAchievementTableDef As(string name) {
                return new DeclareAchievementTableDef("DeclareAchievement", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, DeclareAchievement data, bool throwIfValidColumnName) {
                data.DeclareAchievementId = DeclareAchievementId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.AchievementKey = AchievementKey.GetValue<string>(reader, throwIfValidColumnName);
                data.Date = Date.GetValue<string>(reader, throwIfValidColumnName);
                data.DateRegion = DateRegion.GetValue<string>(reader, throwIfValidColumnName);
                data.Location = Location.GetValue<string>(reader, throwIfValidColumnName);
                data.Level = Level.GetValue<string>(reader, throwIfValidColumnName);
                data.NameOrTitle = NameOrTitle.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic1 = Dynamic1.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic2 = Dynamic2.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic3 = Dynamic3.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic4 = Dynamic4.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic5 = Dynamic5.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic6 = Dynamic6.GetValue<long>(reader, throwIfValidColumnName);
                data.IsShare = IsShare.GetValue<bool>(reader, throwIfValidColumnName);
                data.IsDeclare = IsDeclare.GetValue<bool>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Modifier = Modifier.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareAchievement Map(IDataReader reader) {
                DeclareAchievement data = new DeclareAchievement();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareAchievement TolerantMap(IDataReader reader) {
                DeclareAchievement data = new DeclareAchievement();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareAchievement> MapList(IDataReader reader) {
                List<DeclareAchievement> list = new List<DeclareAchievement>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareAchievement> TolerantMapList(IDataReader reader) {
                List<DeclareAchievement> list = new List<DeclareAchievement>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclareOrgConstTableDef : APTableDef {
            
            private Int64APColumnDef _declareOrgConstId;
            
            private Int64APColumnDef _teacherId;
            
            private StringAPColumnDef _content;
            
            private StringAPColumnDef _work;
            
            private StringAPColumnDef _remark;
            
            private BooleanAPColumnDef _isShare;
            
            private BooleanAPColumnDef _isDeclare;
            
            private DateTimeAPColumnDef _createDate;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private Int64APColumnDef _modifier;
            
            public DeclareOrgConstTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclareOrgConstTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// DeclareOrgConstId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareOrgConstId {
                get {
                    if (Object.ReferenceEquals(_declareOrgConstId, null)) {
                        _declareOrgConstId = new Int64APColumnDef(this, "DeclareOrgConstId", false);
                        _declareOrgConstId.Display = "建设ID";
                    }
                    return _declareOrgConstId;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// Content ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Content {
                get {
                    if (Object.ReferenceEquals(_content, null)) {
                        _content = new StringAPColumnDef(this, "Content", false, 2000);
                        _content.Display = "内容";
                    }
                    return _content;
                }
            }
            
            /// <summary>
            /// Work ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Work {
                get {
                    if (Object.ReferenceEquals(_work, null)) {
                        _work = new StringAPColumnDef(this, "Work", false, 2000);
                        _work.Display = "开展情况";
                    }
                    return _work;
                }
            }
            
            /// <summary>
            /// Remark ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Remark {
                get {
                    if (Object.ReferenceEquals(_remark, null)) {
                        _remark = new StringAPColumnDef(this, "Remark", false, 2000);
                        _remark.Display = "备注";
                    }
                    return _remark;
                }
            }
            
            /// <summary>
            /// IsShare ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsShare {
                get {
                    if (Object.ReferenceEquals(_isShare, null)) {
                        _isShare = new BooleanAPColumnDef(this, "IsShare", false);
                        _isShare.Display = "是否共享";
                    }
                    return _isShare;
                }
            }
            
            /// <summary>
            /// IsDeclare ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsDeclare {
                get {
                    if (Object.ReferenceEquals(_isDeclare, null)) {
                        _isDeclare = new BooleanAPColumnDef(this, "IsDeclare", false);
                        _isDeclare.Display = "是否申报";
                    }
                    return _isDeclare;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "创建人";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Modifier ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Modifier {
                get {
                    if (Object.ReferenceEquals(_modifier, null)) {
                        _modifier = new Int64APColumnDef(this, "Modifier", false);
                        _modifier.Display = "修改人";
                    }
                    return _modifier;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclareOrgConstTableDef As(string name) {
                return new DeclareOrgConstTableDef("DeclareOrgConst", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, DeclareOrgConst data, bool throwIfValidColumnName) {
                data.DeclareOrgConstId = DeclareOrgConstId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.Content = Content.GetValue<string>(reader, throwIfValidColumnName);
                data.Work = Work.GetValue<string>(reader, throwIfValidColumnName);
                data.Remark = Remark.GetValue<string>(reader, throwIfValidColumnName);
                data.IsShare = IsShare.GetValue<bool>(reader, throwIfValidColumnName);
                data.IsDeclare = IsDeclare.GetValue<bool>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Modifier = Modifier.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareOrgConst Map(IDataReader reader) {
                DeclareOrgConst data = new DeclareOrgConst();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareOrgConst TolerantMap(IDataReader reader) {
                DeclareOrgConst data = new DeclareOrgConst();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareOrgConst> MapList(IDataReader reader) {
                List<DeclareOrgConst> list = new List<DeclareOrgConst>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareOrgConst> TolerantMapList(IDataReader reader) {
                List<DeclareOrgConst> list = new List<DeclareOrgConst>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclareReviewTableDef : APTableDef {
            
            private Int64APColumnDef _declareReviewId;
            
            private StringAPColumnDef _teacherName;
            
            private Int64APColumnDef _teacherId;
            
            private Int64APColumnDef _companyId;
            
            private Int64APColumnDef _declareTargetPKID;
            
            private Int64APColumnDef _declareSubjectPKID;
            
            private BooleanAPColumnDef _allowFlowToSchool;
            
            private BooleanAPColumnDef _allowFitResearcher;
            
            private BooleanAPColumnDef _isBrokenRoles;
            
            private Int64APColumnDef _periodId;
            
            private StringAPColumnDef _reason;
            
            private BooleanAPColumnDef _allowFlowToDowngrade;
            
            private StringAPColumnDef _typeKey;
            
            private StringAPColumnDef _statusKey;
            
            private StringAPColumnDef _reviewComment;
            
            private Int64APColumnDef _reviewerId;
            
            public DeclareReviewTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclareReviewTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// DeclareReviewId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareReviewId {
                get {
                    if (Object.ReferenceEquals(_declareReviewId, null)) {
                        _declareReviewId = new Int64APColumnDef(this, "DeclareReviewId", false);
                        _declareReviewId.Display = "DeclareReviewId";
                    }
                    return _declareReviewId;
                }
            }
            
            /// <summary>
            /// TeacherName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef TeacherName {
                get {
                    if (Object.ReferenceEquals(_teacherName, null)) {
                        _teacherName = new StringAPColumnDef(this, "TeacherName", false, 100);
                        _teacherName.Display = "姓名";
                        _teacherName.Required = true;
                    }
                    return _teacherName;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// CompanyId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CompanyId {
                get {
                    if (Object.ReferenceEquals(_companyId, null)) {
                        _companyId = new Int64APColumnDef(this, "CompanyId", false);
                        _companyId.Display = "申报单位";
                    }
                    return _companyId;
                }
            }
            
            /// <summary>
            /// DeclareTargetPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareTargetPKID {
                get {
                    if (Object.ReferenceEquals(_declareTargetPKID, null)) {
                        _declareTargetPKID = new Int64APColumnDef(this, "DeclareTargetPKID", false);
                        _declareTargetPKID.Display = "申报称号";
                    }
                    return _declareTargetPKID;
                }
            }
            
            /// <summary>
            /// DeclareSubjectPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareSubjectPKID {
                get {
                    if (Object.ReferenceEquals(_declareSubjectPKID, null)) {
                        _declareSubjectPKID = new Int64APColumnDef(this, "DeclareSubjectPKID", false);
                        _declareSubjectPKID.Display = "申报学科";
                    }
                    return _declareSubjectPKID;
                }
            }
            
            /// <summary>
            /// AllowFlowToSchool ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef AllowFlowToSchool {
                get {
                    if (Object.ReferenceEquals(_allowFlowToSchool, null)) {
                        _allowFlowToSchool = new BooleanAPColumnDef(this, "AllowFlowToSchool", false);
                        _allowFlowToSchool.Display = "是否愿意参与区内流动";
                    }
                    return _allowFlowToSchool;
                }
            }
            
            /// <summary>
            /// AllowFitResearcher ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef AllowFitResearcher {
                get {
                    if (Object.ReferenceEquals(_allowFitResearcher, null)) {
                        _allowFitResearcher = new BooleanAPColumnDef(this, "AllowFitResearcher", false);
                        _allowFitResearcher.Display = "配合教研员开展工作";
                    }
                    return _allowFitResearcher;
                }
            }
            
            /// <summary>
            /// IsBrokenRoles ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsBrokenRoles {
                get {
                    if (Object.ReferenceEquals(_isBrokenRoles, null)) {
                        _isBrokenRoles = new BooleanAPColumnDef(this, "IsBrokenRoles", false);
                        _isBrokenRoles.Display = "是否职称破格";
                    }
                    return _isBrokenRoles;
                }
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new Int64APColumnDef(this, "PeriodId", false);
                        _periodId.Display = "申报周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// Reason ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Reason {
                get {
                    if (Object.ReferenceEquals(_reason, null)) {
                        _reason = new StringAPColumnDef(this, "Reason", false, 2000);
                        _reason.Display = "申报理由";
                    }
                    return _reason;
                }
            }
            
            /// <summary>
            /// AllowFlowToDowngrade ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef AllowFlowToDowngrade {
                get {
                    if (Object.ReferenceEquals(_allowFlowToDowngrade, null)) {
                        _allowFlowToDowngrade = new BooleanAPColumnDef(this, "AllowFlowToDowngrade", false);
                        _allowFlowToDowngrade.Display = "若落选，是否愿意参加低一层级称号的评选";
                    }
                    return _allowFlowToDowngrade;
                }
            }
            
            /// <summary>
            /// TypeKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef TypeKey {
                get {
                    if (Object.ReferenceEquals(_typeKey, null)) {
                        _typeKey = new StringAPColumnDef(this, "TypeKey", false, 100);
                        _typeKey.Display = "表单类型";
                    }
                    return _typeKey;
                }
            }
            
            /// <summary>
            /// StatusKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef StatusKey {
                get {
                    if (Object.ReferenceEquals(_statusKey, null)) {
                        _statusKey = new StringAPColumnDef(this, "StatusKey", false, 100);
                        _statusKey.Display = "审核状态";
                    }
                    return _statusKey;
                }
            }
            
            /// <summary>
            /// ReviewComment ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ReviewComment {
                get {
                    if (Object.ReferenceEquals(_reviewComment, null)) {
                        _reviewComment = new StringAPColumnDef(this, "ReviewComment", false, 2000);
                        _reviewComment.Display = "校管理员审批意见";
                    }
                    return _reviewComment;
                }
            }
            
            /// <summary>
            /// ReviewerId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ReviewerId {
                get {
                    if (Object.ReferenceEquals(_reviewerId, null)) {
                        _reviewerId = new Int64APColumnDef(this, "ReviewerId", false);
                        _reviewerId.Display = "审核人";
                    }
                    return _reviewerId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclareReviewTableDef As(string name) {
                return new DeclareReviewTableDef("DeclareReview", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, DeclareReview data, bool throwIfValidColumnName) {
                data.DeclareReviewId = DeclareReviewId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherName = TeacherName.GetValue<string>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.CompanyId = CompanyId.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareTargetPKID = DeclareTargetPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareSubjectPKID = DeclareSubjectPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.AllowFlowToSchool = AllowFlowToSchool.GetValue<bool>(reader, throwIfValidColumnName);
                data.AllowFitResearcher = AllowFitResearcher.GetValue<bool>(reader, throwIfValidColumnName);
                data.IsBrokenRoles = IsBrokenRoles.GetValue<bool>(reader, throwIfValidColumnName);
                data.PeriodId = PeriodId.GetValue<long>(reader, throwIfValidColumnName);
                data.Reason = Reason.GetValue<string>(reader, throwIfValidColumnName);
                data.AllowFlowToDowngrade = AllowFlowToDowngrade.GetValue<bool>(reader, throwIfValidColumnName);
                data.TypeKey = TypeKey.GetValue<string>(reader, throwIfValidColumnName);
                data.StatusKey = StatusKey.GetValue<string>(reader, throwIfValidColumnName);
                data.ReviewComment = ReviewComment.GetValue<string>(reader, throwIfValidColumnName);
                data.ReviewerId = ReviewerId.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareReview Map(IDataReader reader) {
                DeclareReview data = new DeclareReview();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareReview TolerantMap(IDataReader reader) {
                DeclareReview data = new DeclareReview();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareReview> MapList(IDataReader reader) {
                List<DeclareReview> list = new List<DeclareReview>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareReview> TolerantMapList(IDataReader reader) {
                List<DeclareReview> list = new List<DeclareReview>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclareMaterialTableDef : APTableDef {
            
            private Int64APColumnDef _materialId;
            
            private Int64APColumnDef _declareTargetPKID;
            
            private Int64APColumnDef _periodId;
            
            private Int64APColumnDef _teacherId;
            
            private Int64APColumnDef _itemId;
            
            private StringAPColumnDef _title;
            
            private StringAPColumnDef _parentType;
            
            private StringAPColumnDef _type;
            
            private DateTimeAPColumnDef _createDate;
            
            private DateTimeAPColumnDef _pubishDate;
            
            public DeclareMaterialTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclareMaterialTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// MaterialId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef MaterialId {
                get {
                    if (Object.ReferenceEquals(_materialId, null)) {
                        _materialId = new Int64APColumnDef(this, "MaterialId", false);
                        _materialId.Display = "MaterialId";
                    }
                    return _materialId;
                }
            }
            
            /// <summary>
            /// DeclareTargetPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareTargetPKID {
                get {
                    if (Object.ReferenceEquals(_declareTargetPKID, null)) {
                        _declareTargetPKID = new Int64APColumnDef(this, "DeclareTargetPKID", false);
                        _declareTargetPKID.Display = "申报（担任）称号";
                    }
                    return _declareTargetPKID;
                }
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new Int64APColumnDef(this, "PeriodId", false);
                        _periodId.Display = "申报周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "申报老师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// ItemId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ItemId {
                get {
                    if (Object.ReferenceEquals(_itemId, null)) {
                        _itemId = new Int64APColumnDef(this, "ItemId", false);
                        _itemId.Display = "申报项ID";
                    }
                    return _itemId;
                }
            }
            
            /// <summary>
            /// Title ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Title {
                get {
                    if (Object.ReferenceEquals(_title, null)) {
                        _title = new StringAPColumnDef(this, "Title", false, 20000);
                        _title.Display = "标题/内容";
                    }
                    return _title;
                }
            }
            
            /// <summary>
            /// ParentType ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ParentType {
                get {
                    if (Object.ReferenceEquals(_parentType, null)) {
                        _parentType = new StringAPColumnDef(this, "ParentType", false, 255);
                        _parentType.Display = "ParentType";
                    }
                    return _parentType;
                }
            }
            
            /// <summary>
            /// Type ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Type {
                get {
                    if (Object.ReferenceEquals(_type, null)) {
                        _type = new StringAPColumnDef(this, "Type", false, 255);
                        _type.Display = "申报类型";
                    }
                    return _type;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// PubishDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef PubishDate {
                get {
                    if (Object.ReferenceEquals(_pubishDate, null)) {
                        _pubishDate = new DateTimeAPColumnDef(this, "PubishDate", false);
                        _pubishDate.Display = "发布时间";
                    }
                    return _pubishDate;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclareMaterialTableDef As(string name) {
                return new DeclareMaterialTableDef("DeclareMaterial", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, DeclareMaterial data, bool throwIfValidColumnName) {
                data.MaterialId = MaterialId.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareTargetPKID = DeclareTargetPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.PeriodId = PeriodId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.ItemId = ItemId.GetValue<long>(reader, throwIfValidColumnName);
                data.Title = Title.GetValue<string>(reader, throwIfValidColumnName);
                data.ParentType = ParentType.GetValue<string>(reader, throwIfValidColumnName);
                data.Type = Type.GetValue<string>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.PubishDate = PubishDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareMaterial Map(IDataReader reader) {
                DeclareMaterial data = new DeclareMaterial();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareMaterial TolerantMap(IDataReader reader) {
                DeclareMaterial data = new DeclareMaterial();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareMaterial> MapList(IDataReader reader) {
                List<DeclareMaterial> list = new List<DeclareMaterial>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareMaterial> TolerantMapList(IDataReader reader) {
                List<DeclareMaterial> list = new List<DeclareMaterial>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclareProfileTableDef : APTableDef {
            
            private Int64APColumnDef _declareProfileId;
            
            private Int64APColumnDef _userId;
            
            private Int64APColumnDef _periodId;
            
            private Int64APColumnDef _declareTargetPKID;
            
            private Int64APColumnDef _companyId;
            
            private StringAPColumnDef _realName;
            
            private StringAPColumnDef _trainNo;
            
            private Int64APColumnDef _genderPKID;
            
            private DateTimeAPColumnDef _birthday;
            
            private Int64APColumnDef _politicalStatusPKID;
            
            private Int64APColumnDef _nationalityPKID;
            
            private Int64APColumnDef _eduSubjectPKID;
            
            private Int64APColumnDef _eduStagePKID;
            
            private Int64APColumnDef _skillTitlePKID;
            
            private StringAPColumnDef _companyName;
            
            private Int64APColumnDef _rankTitlePKID;
            
            private StringAPColumnDef _courseCountPerWeek;
            
            private DateTimeAPColumnDef _hiredate;
            
            private Int64APColumnDef _eduBgPKID;
            
            private Int64APColumnDef _eduDegreePKID;
            
            private StringAPColumnDef _phonemobile;
            
            private StringAPColumnDef _email;
            
            private StringAPColumnDef _phone;
            
            private StringAPColumnDef _dynamic1;
            
            private StringAPColumnDef _dynamic2;
            
            private StringAPColumnDef _dynamic3;
            
            private StringAPColumnDef _dynamic4;
            
            private StringAPColumnDef _dynamic5;
            
            private StringAPColumnDef _statusKey;
            
            public DeclareProfileTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclareProfileTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// DeclareProfileId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareProfileId {
                get {
                    if (Object.ReferenceEquals(_declareProfileId, null)) {
                        _declareProfileId = new Int64APColumnDef(this, "DeclareProfileId", false);
                        _declareProfileId.Display = "DeclareProfileId";
                    }
                    return _declareProfileId;
                }
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new Int64APColumnDef(this, "UserId", false);
                        _userId.Display = "用户ID";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new Int64APColumnDef(this, "PeriodId", false);
                        _periodId.Display = "申报周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// DeclareTargetPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareTargetPKID {
                get {
                    if (Object.ReferenceEquals(_declareTargetPKID, null)) {
                        _declareTargetPKID = new Int64APColumnDef(this, "DeclareTargetPKID", false);
                        _declareTargetPKID.Display = "申报（担任）称号";
                    }
                    return _declareTargetPKID;
                }
            }
            
            /// <summary>
            /// CompanyId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CompanyId {
                get {
                    if (Object.ReferenceEquals(_companyId, null)) {
                        _companyId = new Int64APColumnDef(this, "CompanyId", false);
                        _companyId.Display = "单位";
                    }
                    return _companyId;
                }
            }
            
            /// <summary>
            /// RealName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef RealName {
                get {
                    if (Object.ReferenceEquals(_realName, null)) {
                        _realName = new StringAPColumnDef(this, "RealName", false, 40);
                        _realName.Display = "真实姓名";
                        _realName.Required = true;
                    }
                    return _realName;
                }
            }
            
            /// <summary>
            /// TrainNo ColumnDef
            /// </summary>
            public virtual StringAPColumnDef TrainNo {
                get {
                    if (Object.ReferenceEquals(_trainNo, null)) {
                        _trainNo = new StringAPColumnDef(this, "TrainNo", false, 20);
                        _trainNo.Display = "师训编号";
                        _trainNo.Required = true;
                    }
                    return _trainNo;
                }
            }
            
            /// <summary>
            /// GenderPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef GenderPKID {
                get {
                    if (Object.ReferenceEquals(_genderPKID, null)) {
                        _genderPKID = new Int64APColumnDef(this, "GenderPKID", false);
                        _genderPKID.Display = "性别";
                        _genderPKID.Required = true;
                    }
                    return _genderPKID;
                }
            }
            
            /// <summary>
            /// Birthday ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef Birthday {
                get {
                    if (Object.ReferenceEquals(_birthday, null)) {
                        _birthday = new DateTimeAPColumnDef(this, "Birthday", false);
                        _birthday.Display = "出生年月";
                        _birthday.Required = true;
                    }
                    return _birthday;
                }
            }
            
            /// <summary>
            /// PoliticalStatusPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PoliticalStatusPKID {
                get {
                    if (Object.ReferenceEquals(_politicalStatusPKID, null)) {
                        _politicalStatusPKID = new Int64APColumnDef(this, "PoliticalStatusPKID", false);
                        _politicalStatusPKID.Display = "政治面貌";
                        _politicalStatusPKID.Required = true;
                    }
                    return _politicalStatusPKID;
                }
            }
            
            /// <summary>
            /// NationalityPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef NationalityPKID {
                get {
                    if (Object.ReferenceEquals(_nationalityPKID, null)) {
                        _nationalityPKID = new Int64APColumnDef(this, "NationalityPKID", false);
                        _nationalityPKID.Display = "民族";
                        _nationalityPKID.Required = true;
                    }
                    return _nationalityPKID;
                }
            }
            
            /// <summary>
            /// EduSubjectPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef EduSubjectPKID {
                get {
                    if (Object.ReferenceEquals(_eduSubjectPKID, null)) {
                        _eduSubjectPKID = new Int64APColumnDef(this, "EduSubjectPKID", false);
                        _eduSubjectPKID.Display = "任教学科";
                    }
                    return _eduSubjectPKID;
                }
            }
            
            /// <summary>
            /// EduStagePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef EduStagePKID {
                get {
                    if (Object.ReferenceEquals(_eduStagePKID, null)) {
                        _eduStagePKID = new Int64APColumnDef(this, "EduStagePKID", false);
                        _eduStagePKID.Display = "任教学段";
                    }
                    return _eduStagePKID;
                }
            }
            
            /// <summary>
            /// SkillTitlePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef SkillTitlePKID {
                get {
                    if (Object.ReferenceEquals(_skillTitlePKID, null)) {
                        _skillTitlePKID = new Int64APColumnDef(this, "SkillTitlePKID", false);
                        _skillTitlePKID.Display = "现任专技职称";
                    }
                    return _skillTitlePKID;
                }
            }
            
            /// <summary>
            /// CompanyName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CompanyName {
                get {
                    if (Object.ReferenceEquals(_companyName, null)) {
                        _companyName = new StringAPColumnDef(this, "CompanyName", false, 100);
                        _companyName.Display = "单位";
                        _companyName.Required = true;
                    }
                    return _companyName;
                }
            }
            
            /// <summary>
            /// RankTitlePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef RankTitlePKID {
                get {
                    if (Object.ReferenceEquals(_rankTitlePKID, null)) {
                        _rankTitlePKID = new Int64APColumnDef(this, "RankTitlePKID", false);
                        _rankTitlePKID.Display = "职务";
                        _rankTitlePKID.Required = true;
                    }
                    return _rankTitlePKID;
                }
            }
            
            /// <summary>
            /// CourseCountPerWeek ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CourseCountPerWeek {
                get {
                    if (Object.ReferenceEquals(_courseCountPerWeek, null)) {
                        _courseCountPerWeek = new StringAPColumnDef(this, "CourseCountPerWeek", false, 20);
                        _courseCountPerWeek.Display = "周课时数";
                        _courseCountPerWeek.Required = true;
                    }
                    return _courseCountPerWeek;
                }
            }
            
            /// <summary>
            /// Hiredate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef Hiredate {
                get {
                    if (Object.ReferenceEquals(_hiredate, null)) {
                        _hiredate = new DateTimeAPColumnDef(this, "Hiredate", false);
                        _hiredate.Display = "评聘日期";
                        _hiredate.Required = true;
                    }
                    return _hiredate;
                }
            }
            
            /// <summary>
            /// EduBgPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef EduBgPKID {
                get {
                    if (Object.ReferenceEquals(_eduBgPKID, null)) {
                        _eduBgPKID = new Int64APColumnDef(this, "EduBgPKID", false);
                        _eduBgPKID.Display = "学历";
                        _eduBgPKID.Required = true;
                    }
                    return _eduBgPKID;
                }
            }
            
            /// <summary>
            /// EduDegreePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef EduDegreePKID {
                get {
                    if (Object.ReferenceEquals(_eduDegreePKID, null)) {
                        _eduDegreePKID = new Int64APColumnDef(this, "EduDegreePKID", false);
                        _eduDegreePKID.Display = "学位";
                        _eduDegreePKID.Required = true;
                    }
                    return _eduDegreePKID;
                }
            }
            
            /// <summary>
            /// Phonemobile ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Phonemobile {
                get {
                    if (Object.ReferenceEquals(_phonemobile, null)) {
                        _phonemobile = new StringAPColumnDef(this, "Phonemobile", false, 20);
                        _phonemobile.Display = "手机号码";
                        _phonemobile.Required = true;
                    }
                    return _phonemobile;
                }
            }
            
            /// <summary>
            /// Email ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Email {
                get {
                    if (Object.ReferenceEquals(_email, null)) {
                        _email = new StringAPColumnDef(this, "Email", false, 255);
                        _email.Display = "电子邮箱";
                        _email.Required = true;
                    }
                    return _email;
                }
            }
            
            /// <summary>
            /// Phone ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Phone {
                get {
                    if (Object.ReferenceEquals(_phone, null)) {
                        _phone = new StringAPColumnDef(this, "Phone", true, 20);
                        _phone.Display = "办公室电话";
                    }
                    return _phone;
                }
            }
            
            /// <summary>
            /// Dynamic1 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic1 {
                get {
                    if (Object.ReferenceEquals(_dynamic1, null)) {
                        _dynamic1 = new StringAPColumnDef(this, "Dynamic1", true, 255);
                        _dynamic1.Display = "2016学年";
                    }
                    return _dynamic1;
                }
            }
            
            /// <summary>
            /// Dynamic2 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic2 {
                get {
                    if (Object.ReferenceEquals(_dynamic2, null)) {
                        _dynamic2 = new StringAPColumnDef(this, "Dynamic2", true, 255);
                        _dynamic2.Display = "2017学年";
                    }
                    return _dynamic2;
                }
            }
            
            /// <summary>
            /// Dynamic3 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic3 {
                get {
                    if (Object.ReferenceEquals(_dynamic3, null)) {
                        _dynamic3 = new StringAPColumnDef(this, "Dynamic3", true, 255);
                        _dynamic3.Display = "2018学年";
                    }
                    return _dynamic3;
                }
            }
            
            /// <summary>
            /// Dynamic4 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic4 {
                get {
                    if (Object.ReferenceEquals(_dynamic4, null)) {
                        _dynamic4 = new StringAPColumnDef(this, "Dynamic4", true, 255);
                        _dynamic4.Display = "Dynamic4";
                    }
                    return _dynamic4;
                }
            }
            
            /// <summary>
            /// Dynamic5 ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Dynamic5 {
                get {
                    if (Object.ReferenceEquals(_dynamic5, null)) {
                        _dynamic5 = new StringAPColumnDef(this, "Dynamic5", true, 300);
                        _dynamic5.Display = "Dynamic5";
                    }
                    return _dynamic5;
                }
            }
            
            /// <summary>
            /// StatusKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef StatusKey {
                get {
                    if (Object.ReferenceEquals(_statusKey, null)) {
                        _statusKey = new StringAPColumnDef(this, "StatusKey", false, 100);
                        _statusKey.Display = "审核状态";
                    }
                    return _statusKey;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclareProfileTableDef As(string name) {
                return new DeclareProfileTableDef("DeclareProfile", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, DeclareProfile data, bool throwIfValidColumnName) {
                data.DeclareProfileId = DeclareProfileId.GetValue<long>(reader, throwIfValidColumnName);
                data.UserId = UserId.GetValue<long>(reader, throwIfValidColumnName);
                data.PeriodId = PeriodId.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareTargetPKID = DeclareTargetPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.CompanyId = CompanyId.GetValue<long>(reader, throwIfValidColumnName);
                data.RealName = RealName.GetValue<string>(reader, throwIfValidColumnName);
                data.TrainNo = TrainNo.GetValue<string>(reader, throwIfValidColumnName);
                data.GenderPKID = GenderPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.Birthday = Birthday.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.PoliticalStatusPKID = PoliticalStatusPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.NationalityPKID = NationalityPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.EduSubjectPKID = EduSubjectPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.EduStagePKID = EduStagePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.SkillTitlePKID = SkillTitlePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.CompanyName = CompanyName.GetValue<string>(reader, throwIfValidColumnName);
                data.RankTitlePKID = RankTitlePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.CourseCountPerWeek = CourseCountPerWeek.GetValue<string>(reader, throwIfValidColumnName);
                data.Hiredate = Hiredate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.EduBgPKID = EduBgPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.EduDegreePKID = EduDegreePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.Phonemobile = Phonemobile.GetValue<string>(reader, throwIfValidColumnName);
                data.Email = Email.GetValue<string>(reader, throwIfValidColumnName);
                data.Phone = Phone.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic1 = Dynamic1.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic2 = Dynamic2.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic3 = Dynamic3.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic4 = Dynamic4.GetValue<string>(reader, throwIfValidColumnName);
                data.Dynamic5 = Dynamic5.GetValue<string>(reader, throwIfValidColumnName);
                data.StatusKey = StatusKey.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareProfile Map(IDataReader reader) {
                DeclareProfile data = new DeclareProfile();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclareProfile TolerantMap(IDataReader reader) {
                DeclareProfile data = new DeclareProfile();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareProfile> MapList(IDataReader reader) {
                List<DeclareProfile> list = new List<DeclareProfile>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclareProfile> TolerantMapList(IDataReader reader) {
                List<DeclareProfile> list = new List<DeclareProfile>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class DeclarePeriodTableDef : APTableDef {
            
            private Int64APColumnDef _periodId;
            
            private StringAPColumnDef _name;
            
            private DateTimeAPColumnDef _beginDate;
            
            private DateTimeAPColumnDef _endDate;
            
            private DateTimeAPColumnDef _declareStartDate;
            
            private DateTimeAPColumnDef _declareEndDate;
            
            private DateTimeAPColumnDef _reveiwStartDate;
            
            private DateTimeAPColumnDef _reveiwEndDate;
            
            private BooleanAPColumnDef _isCurrent;
            
            public DeclarePeriodTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected DeclarePeriodTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new Int64APColumnDef(this, "PeriodId", false);
                        _periodId.Display = "周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// Name ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Name {
                get {
                    if (Object.ReferenceEquals(_name, null)) {
                        _name = new StringAPColumnDef(this, "Name", false, 100);
                        _name.Display = "周期名称";
                    }
                    return _name;
                }
            }
            
            /// <summary>
            /// BeginDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef BeginDate {
                get {
                    if (Object.ReferenceEquals(_beginDate, null)) {
                        _beginDate = new DateTimeAPColumnDef(this, "BeginDate", false);
                        _beginDate.Display = "开始时间（数据范围区间）";
                    }
                    return _beginDate;
                }
            }
            
            /// <summary>
            /// EndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef EndDate {
                get {
                    if (Object.ReferenceEquals(_endDate, null)) {
                        _endDate = new DateTimeAPColumnDef(this, "EndDate", false);
                        _endDate.Display = "结束时间（数据范围区间）";
                    }
                    return _endDate;
                }
            }
            
            /// <summary>
            /// DeclareStartDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef DeclareStartDate {
                get {
                    if (Object.ReferenceEquals(_declareStartDate, null)) {
                        _declareStartDate = new DateTimeAPColumnDef(this, "DeclareStartDate", false);
                        _declareStartDate.Display = "材料填报开始时间";
                    }
                    return _declareStartDate;
                }
            }
            
            /// <summary>
            /// DeclareEndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef DeclareEndDate {
                get {
                    if (Object.ReferenceEquals(_declareEndDate, null)) {
                        _declareEndDate = new DateTimeAPColumnDef(this, "DeclareEndDate", false);
                        _declareEndDate.Display = "材料填报结束时间";
                    }
                    return _declareEndDate;
                }
            }
            
            /// <summary>
            /// ReveiwStartDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ReveiwStartDate {
                get {
                    if (Object.ReferenceEquals(_reveiwStartDate, null)) {
                        _reveiwStartDate = new DateTimeAPColumnDef(this, "ReveiwStartDate", false);
                        _reveiwStartDate.Display = "审核开始时间";
                    }
                    return _reveiwStartDate;
                }
            }
            
            /// <summary>
            /// ReveiwEndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ReveiwEndDate {
                get {
                    if (Object.ReferenceEquals(_reveiwEndDate, null)) {
                        _reveiwEndDate = new DateTimeAPColumnDef(this, "ReveiwEndDate", false);
                        _reveiwEndDate.Display = "审核结束时间";
                    }
                    return _reveiwEndDate;
                }
            }
            
            /// <summary>
            /// IsCurrent ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsCurrent {
                get {
                    if (Object.ReferenceEquals(_isCurrent, null)) {
                        _isCurrent = new BooleanAPColumnDef(this, "IsCurrent", false);
                        _isCurrent.Display = "是否当前申报期";
                    }
                    return _isCurrent;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual DeclarePeriodTableDef As(string name) {
                return new DeclarePeriodTableDef("DeclarePeriod", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, DeclarePeriod data, bool throwIfValidColumnName) {
                data.PeriodId = PeriodId.GetValue<long>(reader, throwIfValidColumnName);
                data.Name = Name.GetValue<string>(reader, throwIfValidColumnName);
                data.BeginDate = BeginDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.EndDate = EndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.DeclareStartDate = DeclareStartDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.DeclareEndDate = DeclareEndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.ReveiwStartDate = ReveiwStartDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.ReveiwEndDate = ReveiwEndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.IsCurrent = IsCurrent.GetValue<bool>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclarePeriod Map(IDataReader reader) {
                DeclarePeriod data = new DeclarePeriod();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual DeclarePeriod TolerantMap(IDataReader reader) {
                DeclarePeriod data = new DeclarePeriod();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclarePeriod> MapList(IDataReader reader) {
                List<DeclarePeriod> list = new List<DeclarePeriod>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<DeclarePeriod> TolerantMapList(IDataReader reader) {
                List<DeclarePeriod> list = new List<DeclarePeriod>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class TeamMemberTableDef : APTableDef {
            
            private Int64APColumnDef _teamId;
            
            private Int64APColumnDef _memberId;
            
            private StringAPColumnDef _contentValue;
            
            private DateTimeAPColumnDef _createDate;
            
            private Int64APColumnDef _creator;
            
            public TeamMemberTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected TeamMemberTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// TeamId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeamId {
                get {
                    if (Object.ReferenceEquals(_teamId, null)) {
                        _teamId = new Int64APColumnDef(this, "TeamId", false);
                        _teamId.Display = "梯队ID";
                    }
                    return _teamId;
                }
            }
            
            /// <summary>
            /// MemberId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef MemberId {
                get {
                    if (Object.ReferenceEquals(_memberId, null)) {
                        _memberId = new Int64APColumnDef(this, "MemberId", false);
                        _memberId.Display = "学员ID";
                    }
                    return _memberId;
                }
            }
            
            /// <summary>
            /// ContentValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ContentValue {
                get {
                    if (Object.ReferenceEquals(_contentValue, null)) {
                        _contentValue = new StringAPColumnDef(this, "ContentValue", false, 30000);
                        _contentValue.Display = "学员的成长方向";
                    }
                    return _contentValue;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "创建人";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual TeamMemberTableDef As(string name) {
                return new TeamMemberTableDef("TeamMember", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, TeamMember data, bool throwIfValidColumnName) {
                data.TeamId = TeamId.GetValue<long>(reader, throwIfValidColumnName);
                data.MemberId = MemberId.GetValue<long>(reader, throwIfValidColumnName);
                data.ContentValue = ContentValue.GetValue<string>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TeamMember Map(IDataReader reader) {
                TeamMember data = new TeamMember();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TeamMember TolerantMap(IDataReader reader) {
                TeamMember data = new TeamMember();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TeamMember> MapList(IDataReader reader) {
                List<TeamMember> list = new List<TeamMember>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TeamMember> TolerantMapList(IDataReader reader) {
                List<TeamMember> list = new List<TeamMember>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class TeamContentTableDef : APTableDef {
            
            private Int64APColumnDef _teamContentId;
            
            private Int64APColumnDef _teamId;
            
            private StringAPColumnDef _contentKey;
            
            private StringAPColumnDef _contentValue;
            
            private StringAPColumnDef _contentDataType;
            
            private BooleanAPColumnDef _isDeclare;
            
            private DateTimeAPColumnDef _createDate;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private Int64APColumnDef _modifier;
            
            public TeamContentTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected TeamContentTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// TeamContentId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeamContentId {
                get {
                    if (Object.ReferenceEquals(_teamContentId, null)) {
                        _teamContentId = new Int64APColumnDef(this, "TeamContentId", false);
                        _teamContentId.Display = "内容ID";
                    }
                    return _teamContentId;
                }
            }
            
            /// <summary>
            /// TeamId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeamId {
                get {
                    if (Object.ReferenceEquals(_teamId, null)) {
                        _teamId = new Int64APColumnDef(this, "TeamId", false);
                        _teamId.Display = "梯队ID";
                    }
                    return _teamId;
                }
            }
            
            /// <summary>
            /// ContentKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ContentKey {
                get {
                    if (Object.ReferenceEquals(_contentKey, null)) {
                        _contentKey = new StringAPColumnDef(this, "ContentKey", false, 200);
                        _contentKey.Display = "内容类别";
                    }
                    return _contentKey;
                }
            }
            
            /// <summary>
            /// ContentValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ContentValue {
                get {
                    if (Object.ReferenceEquals(_contentValue, null)) {
                        _contentValue = new StringAPColumnDef(this, "ContentValue", false, 30000);
                        _contentValue.Display = "内容";
                    }
                    return _contentValue;
                }
            }
            
            /// <summary>
            /// ContentDataType ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ContentDataType {
                get {
                    if (Object.ReferenceEquals(_contentDataType, null)) {
                        _contentDataType = new StringAPColumnDef(this, "ContentDataType", false, 100);
                        _contentDataType.Display = "内容数据类型";
                    }
                    return _contentDataType;
                }
            }
            
            /// <summary>
            /// IsDeclare ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsDeclare {
                get {
                    if (Object.ReferenceEquals(_isDeclare, null)) {
                        _isDeclare = new BooleanAPColumnDef(this, "IsDeclare", false);
                        _isDeclare.Display = "是否申报";
                    }
                    return _isDeclare;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "创建人";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Modifier ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Modifier {
                get {
                    if (Object.ReferenceEquals(_modifier, null)) {
                        _modifier = new Int64APColumnDef(this, "Modifier", false);
                        _modifier.Display = "修改人";
                    }
                    return _modifier;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual TeamContentTableDef As(string name) {
                return new TeamContentTableDef("TeamContent", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, TeamContent data, bool throwIfValidColumnName) {
                data.TeamContentId = TeamContentId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeamId = TeamId.GetValue<long>(reader, throwIfValidColumnName);
                data.ContentKey = ContentKey.GetValue<string>(reader, throwIfValidColumnName);
                data.ContentValue = ContentValue.GetValue<string>(reader, throwIfValidColumnName);
                data.ContentDataType = ContentDataType.GetValue<string>(reader, throwIfValidColumnName);
                data.IsDeclare = IsDeclare.GetValue<bool>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Modifier = Modifier.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TeamContent Map(IDataReader reader) {
                TeamContent data = new TeamContent();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TeamContent TolerantMap(IDataReader reader) {
                TeamContent data = new TeamContent();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TeamContent> MapList(IDataReader reader) {
                List<TeamContent> list = new List<TeamContent>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TeamContent> TolerantMapList(IDataReader reader) {
                List<TeamContent> list = new List<TeamContent>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class TeamActiveTableDef : APTableDef {
            
            private Int64APColumnDef _teamActiveId;
            
            private Int64APColumnDef _teamId;
            
            private DateTimeAPColumnDef _date;
            
            private StringAPColumnDef _location;
            
            private StringAPColumnDef _title;
            
            private Int64APColumnDef _activeType;
            
            private StringAPColumnDef _contentValue;
            
            private BooleanAPColumnDef _isShow;
            
            private BooleanAPColumnDef _isShare;
            
            private BooleanAPColumnDef _isDeclare;
            
            private DateTimeAPColumnDef _createDate;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private Int64APColumnDef _modifier;
            
            public TeamActiveTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected TeamActiveTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// TeamActiveId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeamActiveId {
                get {
                    if (Object.ReferenceEquals(_teamActiveId, null)) {
                        _teamActiveId = new Int64APColumnDef(this, "TeamActiveId", false);
                        _teamActiveId.Display = "ID";
                    }
                    return _teamActiveId;
                }
            }
            
            /// <summary>
            /// TeamId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeamId {
                get {
                    if (Object.ReferenceEquals(_teamId, null)) {
                        _teamId = new Int64APColumnDef(this, "TeamId", false);
                        _teamId.Display = "梯队ID";
                    }
                    return _teamId;
                }
            }
            
            /// <summary>
            /// Date ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef Date {
                get {
                    if (Object.ReferenceEquals(_date, null)) {
                        _date = new DateTimeAPColumnDef(this, "Date", false);
                        _date.Display = "时间";
                        _date.Required = true;
                    }
                    return _date;
                }
            }
            
            /// <summary>
            /// Location ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Location {
                get {
                    if (Object.ReferenceEquals(_location, null)) {
                        _location = new StringAPColumnDef(this, "Location", false, 100);
                        _location.Display = "地点";
                        _location.Required = true;
                    }
                    return _location;
                }
            }
            
            /// <summary>
            /// Title ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Title {
                get {
                    if (Object.ReferenceEquals(_title, null)) {
                        _title = new StringAPColumnDef(this, "Title", false, 100);
                        _title.Display = "标题";
                        _title.Required = true;
                    }
                    return _title;
                }
            }
            
            /// <summary>
            /// ActiveType ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ActiveType {
                get {
                    if (Object.ReferenceEquals(_activeType, null)) {
                        _activeType = new Int64APColumnDef(this, "ActiveType", false);
                        _activeType.Display = "类型";
                    }
                    return _activeType;
                }
            }
            
            /// <summary>
            /// ContentValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ContentValue {
                get {
                    if (Object.ReferenceEquals(_contentValue, null)) {
                        _contentValue = new StringAPColumnDef(this, "ContentValue", false, 10000);
                        _contentValue.Display = "内容";
                        _contentValue.Required = true;
                    }
                    return _contentValue;
                }
            }
            
            /// <summary>
            /// IsShow ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsShow {
                get {
                    if (Object.ReferenceEquals(_isShow, null)) {
                        _isShow = new BooleanAPColumnDef(this, "IsShow", false);
                        _isShow.Display = "是否显示";
                    }
                    return _isShow;
                }
            }
            
            /// <summary>
            /// IsShare ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsShare {
                get {
                    if (Object.ReferenceEquals(_isShare, null)) {
                        _isShare = new BooleanAPColumnDef(this, "IsShare", false);
                        _isShare.Display = "是否共享";
                    }
                    return _isShare;
                }
            }
            
            /// <summary>
            /// IsDeclare ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsDeclare {
                get {
                    if (Object.ReferenceEquals(_isDeclare, null)) {
                        _isDeclare = new BooleanAPColumnDef(this, "IsDeclare", false);
                        _isDeclare.Display = "是否申报";
                    }
                    return _isDeclare;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "创建人";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Modifier ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Modifier {
                get {
                    if (Object.ReferenceEquals(_modifier, null)) {
                        _modifier = new Int64APColumnDef(this, "Modifier", false);
                        _modifier.Display = "修改人";
                    }
                    return _modifier;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual TeamActiveTableDef As(string name) {
                return new TeamActiveTableDef("TeamActive", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, TeamActive data, bool throwIfValidColumnName) {
                data.TeamActiveId = TeamActiveId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeamId = TeamId.GetValue<long>(reader, throwIfValidColumnName);
                data.Date = Date.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Location = Location.GetValue<string>(reader, throwIfValidColumnName);
                data.Title = Title.GetValue<string>(reader, throwIfValidColumnName);
                data.ActiveType = ActiveType.GetValue<long>(reader, throwIfValidColumnName);
                data.ContentValue = ContentValue.GetValue<string>(reader, throwIfValidColumnName);
                data.IsShow = IsShow.GetValue<bool>(reader, throwIfValidColumnName);
                data.IsShare = IsShare.GetValue<bool>(reader, throwIfValidColumnName);
                data.IsDeclare = IsDeclare.GetValue<bool>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Modifier = Modifier.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TeamActive Map(IDataReader reader) {
                TeamActive data = new TeamActive();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TeamActive TolerantMap(IDataReader reader) {
                TeamActive data = new TeamActive();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TeamActive> MapList(IDataReader reader) {
                List<TeamActive> list = new List<TeamActive>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TeamActive> TolerantMapList(IDataReader reader) {
                List<TeamActive> list = new List<TeamActive>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class TeamActiveResultTableDef : APTableDef {
            
            private Int64APColumnDef _resultId;
            
            private Int64APColumnDef _activeId;
            
            private Int64APColumnDef _memberId;
            
            private StringAPColumnDef _activeResult;
            
            private DateTimeAPColumnDef _createDate;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private Int64APColumnDef _modifier;
            
            public TeamActiveResultTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected TeamActiveResultTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ResultId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResultId {
                get {
                    if (Object.ReferenceEquals(_resultId, null)) {
                        _resultId = new Int64APColumnDef(this, "ResultId", false);
                        _resultId.Display = "成果ID";
                    }
                    return _resultId;
                }
            }
            
            /// <summary>
            /// ActiveId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ActiveId {
                get {
                    if (Object.ReferenceEquals(_activeId, null)) {
                        _activeId = new Int64APColumnDef(this, "ActiveId", false);
                        _activeId.Display = "活动ID";
                    }
                    return _activeId;
                }
            }
            
            /// <summary>
            /// MemberId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef MemberId {
                get {
                    if (Object.ReferenceEquals(_memberId, null)) {
                        _memberId = new Int64APColumnDef(this, "MemberId", false);
                        _memberId.Display = "学员ID";
                    }
                    return _memberId;
                }
            }
            
            /// <summary>
            /// ActiveResult ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ActiveResult {
                get {
                    if (Object.ReferenceEquals(_activeResult, null)) {
                        _activeResult = new StringAPColumnDef(this, "ActiveResult", false, 30000);
                        _activeResult.Display = "学员的成果";
                    }
                    return _activeResult;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "创建人";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Modifier ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Modifier {
                get {
                    if (Object.ReferenceEquals(_modifier, null)) {
                        _modifier = new Int64APColumnDef(this, "Modifier", false);
                        _modifier.Display = "修改人";
                    }
                    return _modifier;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual TeamActiveResultTableDef As(string name) {
                return new TeamActiveResultTableDef("TeamActiveResult", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, TeamActiveResult data, bool throwIfValidColumnName) {
                data.ResultId = ResultId.GetValue<long>(reader, throwIfValidColumnName);
                data.ActiveId = ActiveId.GetValue<long>(reader, throwIfValidColumnName);
                data.MemberId = MemberId.GetValue<long>(reader, throwIfValidColumnName);
                data.ActiveResult = ActiveResult.GetValue<string>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Modifier = Modifier.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TeamActiveResult Map(IDataReader reader) {
                TeamActiveResult data = new TeamActiveResult();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TeamActiveResult TolerantMap(IDataReader reader) {
                TeamActiveResult data = new TeamActiveResult();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TeamActiveResult> MapList(IDataReader reader) {
                List<TeamActiveResult> list = new List<TeamActiveResult>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TeamActiveResult> TolerantMapList(IDataReader reader) {
                List<TeamActiveResult> list = new List<TeamActiveResult>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class TeamActiveItemTableDef : APTableDef {
            
            private Int64APColumnDef _itemId;
            
            private Int64APColumnDef _activeId;
            
            private Int64APColumnDef _memberId;
            
            private DateTimeAPColumnDef _sendDate;
            
            private StringAPColumnDef _itemContent;
            
            private DateTimeAPColumnDef _createDate;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private Int64APColumnDef _modifier;
            
            public TeamActiveItemTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected TeamActiveItemTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ItemId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ItemId {
                get {
                    if (Object.ReferenceEquals(_itemId, null)) {
                        _itemId = new Int64APColumnDef(this, "ItemId", false);
                        _itemId.Display = "内容ID";
                    }
                    return _itemId;
                }
            }
            
            /// <summary>
            /// ActiveId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ActiveId {
                get {
                    if (Object.ReferenceEquals(_activeId, null)) {
                        _activeId = new Int64APColumnDef(this, "ActiveId", false);
                        _activeId.Display = "活动ID";
                    }
                    return _activeId;
                }
            }
            
            /// <summary>
            /// MemberId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef MemberId {
                get {
                    if (Object.ReferenceEquals(_memberId, null)) {
                        _memberId = new Int64APColumnDef(this, "MemberId", false);
                        _memberId.Display = "学员ID";
                    }
                    return _memberId;
                }
            }
            
            /// <summary>
            /// SendDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef SendDate {
                get {
                    if (Object.ReferenceEquals(_sendDate, null)) {
                        _sendDate = new DateTimeAPColumnDef(this, "SendDate", false);
                        _sendDate.Display = "发布时间";
                    }
                    return _sendDate;
                }
            }
            
            /// <summary>
            /// ItemContent ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ItemContent {
                get {
                    if (Object.ReferenceEquals(_itemContent, null)) {
                        _itemContent = new StringAPColumnDef(this, "ItemContent", false, 20000);
                        _itemContent.Display = "活动内容";
                    }
                    return _itemContent;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "创建人";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Modifier ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Modifier {
                get {
                    if (Object.ReferenceEquals(_modifier, null)) {
                        _modifier = new Int64APColumnDef(this, "Modifier", false);
                        _modifier.Display = "修改人";
                    }
                    return _modifier;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual TeamActiveItemTableDef As(string name) {
                return new TeamActiveItemTableDef("TeamActiveItem", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, TeamActiveItem data, bool throwIfValidColumnName) {
                data.ItemId = ItemId.GetValue<long>(reader, throwIfValidColumnName);
                data.ActiveId = ActiveId.GetValue<long>(reader, throwIfValidColumnName);
                data.MemberId = MemberId.GetValue<long>(reader, throwIfValidColumnName);
                data.SendDate = SendDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.ItemContent = ItemContent.GetValue<string>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Modifier = Modifier.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TeamActiveItem Map(IDataReader reader) {
                TeamActiveItem data = new TeamActiveItem();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TeamActiveItem TolerantMap(IDataReader reader) {
                TeamActiveItem data = new TeamActiveItem();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TeamActiveItem> MapList(IDataReader reader) {
                List<TeamActiveItem> list = new List<TeamActiveItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TeamActiveItem> TolerantMapList(IDataReader reader) {
                List<TeamActiveItem> list = new List<TeamActiveItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class TeamSpecialCourseTableDef : APTableDef {
            
            private Int64APColumnDef _courseId;
            
            private Int64APColumnDef _teamId;
            
            private StringAPColumnDef _title;
            
            private DateTimeAPColumnDef _startDate;
            
            private DateTimeAPColumnDef _endDate;
            
            private StringAPColumnDef _courseTarget;
            
            private StringAPColumnDef _coursePlan;
            
            private StringAPColumnDef _courseRecords;
            
            private StringAPColumnDef _courseResults;
            
            private StringAPColumnDef _courseSummary;
            
            private StringAPColumnDef _remark;
            
            private Int32APColumnDef _totalCount;
            
            private Int32APColumnDef _memberCount;
            
            private StringAPColumnDef _memberRecord;
            
            private BooleanAPColumnDef _isDeclare;
            
            private DateTimeAPColumnDef _createDate;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private Int64APColumnDef _modifier;
            
            public TeamSpecialCourseTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected TeamSpecialCourseTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// CourseId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CourseId {
                get {
                    if (Object.ReferenceEquals(_courseId, null)) {
                        _courseId = new Int64APColumnDef(this, "CourseId", false);
                        _courseId.Display = "课程ID";
                    }
                    return _courseId;
                }
            }
            
            /// <summary>
            /// TeamId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeamId {
                get {
                    if (Object.ReferenceEquals(_teamId, null)) {
                        _teamId = new Int64APColumnDef(this, "TeamId", false);
                        _teamId.Display = "梯队ID";
                    }
                    return _teamId;
                }
            }
            
            /// <summary>
            /// Title ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Title {
                get {
                    if (Object.ReferenceEquals(_title, null)) {
                        _title = new StringAPColumnDef(this, "Title", false, 255);
                        _title.Display = "课程主题";
                        _title.Required = true;
                    }
                    return _title;
                }
            }
            
            /// <summary>
            /// StartDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef StartDate {
                get {
                    if (Object.ReferenceEquals(_startDate, null)) {
                        _startDate = new DateTimeAPColumnDef(this, "StartDate", false);
                        _startDate.Display = "课程开设开始时段";
                    }
                    return _startDate;
                }
            }
            
            /// <summary>
            /// EndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef EndDate {
                get {
                    if (Object.ReferenceEquals(_endDate, null)) {
                        _endDate = new DateTimeAPColumnDef(this, "EndDate", false);
                        _endDate.Display = "课程开设结束时段";
                    }
                    return _endDate;
                }
            }
            
            /// <summary>
            /// CourseTarget ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CourseTarget {
                get {
                    if (Object.ReferenceEquals(_courseTarget, null)) {
                        _courseTarget = new StringAPColumnDef(this, "CourseTarget", false, 2000);
                        _courseTarget.Display = "课程目标";
                    }
                    return _courseTarget;
                }
            }
            
            /// <summary>
            /// CoursePlan ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CoursePlan {
                get {
                    if (Object.ReferenceEquals(_coursePlan, null)) {
                        _coursePlan = new StringAPColumnDef(this, "CoursePlan", false, 20000);
                        _coursePlan.Display = "活动方案";
                    }
                    return _coursePlan;
                }
            }
            
            /// <summary>
            /// CourseRecords ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CourseRecords {
                get {
                    if (Object.ReferenceEquals(_courseRecords, null)) {
                        _courseRecords = new StringAPColumnDef(this, "CourseRecords", false, 20000);
                        _courseRecords.Display = "过程记录";
                    }
                    return _courseRecords;
                }
            }
            
            /// <summary>
            /// CourseResults ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CourseResults {
                get {
                    if (Object.ReferenceEquals(_courseResults, null)) {
                        _courseResults = new StringAPColumnDef(this, "CourseResults", false, 30000);
                        _courseResults.Display = "活动效果";
                    }
                    return _courseResults;
                }
            }
            
            /// <summary>
            /// CourseSummary ColumnDef
            /// </summary>
            public virtual StringAPColumnDef CourseSummary {
                get {
                    if (Object.ReferenceEquals(_courseSummary, null)) {
                        _courseSummary = new StringAPColumnDef(this, "CourseSummary", false, 30000);
                        _courseSummary.Display = "活动总结";
                    }
                    return _courseSummary;
                }
            }
            
            /// <summary>
            /// Remark ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Remark {
                get {
                    if (Object.ReferenceEquals(_remark, null)) {
                        _remark = new StringAPColumnDef(this, "Remark", false, 2000);
                        _remark.Display = "备注";
                    }
                    return _remark;
                }
            }
            
            /// <summary>
            /// TotalCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef TotalCount {
                get {
                    if (Object.ReferenceEquals(_totalCount, null)) {
                        _totalCount = new Int32APColumnDef(this, "TotalCount", false);
                        _totalCount.Display = "参加总人数";
                    }
                    return _totalCount;
                }
            }
            
            /// <summary>
            /// MemberCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef MemberCount {
                get {
                    if (Object.ReferenceEquals(_memberCount, null)) {
                        _memberCount = new Int32APColumnDef(this, "MemberCount", false);
                        _memberCount.Display = "团队学员数";
                    }
                    return _memberCount;
                }
            }
            
            /// <summary>
            /// MemberRecord ColumnDef
            /// </summary>
            public virtual StringAPColumnDef MemberRecord {
                get {
                    if (Object.ReferenceEquals(_memberRecord, null)) {
                        _memberRecord = new StringAPColumnDef(this, "MemberRecord", false, 100);
                        _memberRecord.Display = "非团队成员参加对象（若有至少需写出1—5人姓名/单位）";
                    }
                    return _memberRecord;
                }
            }
            
            /// <summary>
            /// IsDeclare ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsDeclare {
                get {
                    if (Object.ReferenceEquals(_isDeclare, null)) {
                        _isDeclare = new BooleanAPColumnDef(this, "IsDeclare", false);
                        _isDeclare.Display = "是否申报";
                    }
                    return _isDeclare;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "创建人";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Modifier ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Modifier {
                get {
                    if (Object.ReferenceEquals(_modifier, null)) {
                        _modifier = new Int64APColumnDef(this, "Modifier", false);
                        _modifier.Display = "修改人";
                    }
                    return _modifier;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual TeamSpecialCourseTableDef As(string name) {
                return new TeamSpecialCourseTableDef("TeamSpecialCourse", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, TeamSpecialCourse data, bool throwIfValidColumnName) {
                data.CourseId = CourseId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeamId = TeamId.GetValue<long>(reader, throwIfValidColumnName);
                data.Title = Title.GetValue<string>(reader, throwIfValidColumnName);
                data.StartDate = StartDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.EndDate = EndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.CourseTarget = CourseTarget.GetValue<string>(reader, throwIfValidColumnName);
                data.CoursePlan = CoursePlan.GetValue<string>(reader, throwIfValidColumnName);
                data.CourseRecords = CourseRecords.GetValue<string>(reader, throwIfValidColumnName);
                data.CourseResults = CourseResults.GetValue<string>(reader, throwIfValidColumnName);
                data.CourseSummary = CourseSummary.GetValue<string>(reader, throwIfValidColumnName);
                data.Remark = Remark.GetValue<string>(reader, throwIfValidColumnName);
                data.TotalCount = TotalCount.GetValue<int>(reader, throwIfValidColumnName);
                data.MemberCount = MemberCount.GetValue<int>(reader, throwIfValidColumnName);
                data.MemberRecord = MemberRecord.GetValue<string>(reader, throwIfValidColumnName);
                data.IsDeclare = IsDeclare.GetValue<bool>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Modifier = Modifier.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TeamSpecialCourse Map(IDataReader reader) {
                TeamSpecialCourse data = new TeamSpecialCourse();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TeamSpecialCourse TolerantMap(IDataReader reader) {
                TeamSpecialCourse data = new TeamSpecialCourse();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TeamSpecialCourse> MapList(IDataReader reader) {
                List<TeamSpecialCourse> list = new List<TeamSpecialCourse>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TeamSpecialCourse> TolerantMapList(IDataReader reader) {
                List<TeamSpecialCourse> list = new List<TeamSpecialCourse>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class TeamSpecialCourseItemTableDef : APTableDef {
            
            private Int64APColumnDef _itemId;
            
            private Int64APColumnDef _courseId;
            
            private Int64APColumnDef _teamId;
            
            private DateTimeAPColumnDef _itemDate;
            
            private StringAPColumnDef _location;
            
            private StringAPColumnDef _title;
            
            private StringAPColumnDef _content;
            
            private StringAPColumnDef _activityType;
            
            private StringAPColumnDef _speaker;
            
            private StringAPColumnDef _remark;
            
            private DateTimeAPColumnDef _createDate;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private Int64APColumnDef _modifier;
            
            public TeamSpecialCourseItemTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected TeamSpecialCourseItemTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ItemId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ItemId {
                get {
                    if (Object.ReferenceEquals(_itemId, null)) {
                        _itemId = new Int64APColumnDef(this, "ItemId", false);
                        _itemId.Display = "项目ID";
                    }
                    return _itemId;
                }
            }
            
            /// <summary>
            /// CourseId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CourseId {
                get {
                    if (Object.ReferenceEquals(_courseId, null)) {
                        _courseId = new Int64APColumnDef(this, "CourseId", false);
                        _courseId.Display = "ID";
                    }
                    return _courseId;
                }
            }
            
            /// <summary>
            /// TeamId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeamId {
                get {
                    if (Object.ReferenceEquals(_teamId, null)) {
                        _teamId = new Int64APColumnDef(this, "TeamId", false);
                        _teamId.Display = "梯队ID";
                    }
                    return _teamId;
                }
            }
            
            /// <summary>
            /// ItemDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ItemDate {
                get {
                    if (Object.ReferenceEquals(_itemDate, null)) {
                        _itemDate = new DateTimeAPColumnDef(this, "ItemDate", false);
                        _itemDate.Display = "具体时间";
                    }
                    return _itemDate;
                }
            }
            
            /// <summary>
            /// Location ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Location {
                get {
                    if (Object.ReferenceEquals(_location, null)) {
                        _location = new StringAPColumnDef(this, "Location", false, 255);
                        _location.Display = "地点";
                    }
                    return _location;
                }
            }
            
            /// <summary>
            /// Title ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Title {
                get {
                    if (Object.ReferenceEquals(_title, null)) {
                        _title = new StringAPColumnDef(this, "Title", false, 255);
                        _title.Display = "专题";
                        _title.Required = true;
                    }
                    return _title;
                }
            }
            
            /// <summary>
            /// Content ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Content {
                get {
                    if (Object.ReferenceEquals(_content, null)) {
                        _content = new StringAPColumnDef(this, "Content", false, 20000);
                        _content.Display = "内容";
                    }
                    return _content;
                }
            }
            
            /// <summary>
            /// ActivityType ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ActivityType {
                get {
                    if (Object.ReferenceEquals(_activityType, null)) {
                        _activityType = new StringAPColumnDef(this, "ActivityType", false, 255);
                        _activityType.Display = "活动形式";
                    }
                    return _activityType;
                }
            }
            
            /// <summary>
            /// Speaker ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Speaker {
                get {
                    if (Object.ReferenceEquals(_speaker, null)) {
                        _speaker = new StringAPColumnDef(this, "Speaker", false, 255);
                        _speaker.Display = "主讲人";
                    }
                    return _speaker;
                }
            }
            
            /// <summary>
            /// Remark ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Remark {
                get {
                    if (Object.ReferenceEquals(_remark, null)) {
                        _remark = new StringAPColumnDef(this, "Remark", false, 255);
                        _remark.Display = "备注";
                    }
                    return _remark;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "创建人";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Modifier ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Modifier {
                get {
                    if (Object.ReferenceEquals(_modifier, null)) {
                        _modifier = new Int64APColumnDef(this, "Modifier", false);
                        _modifier.Display = "修改人";
                    }
                    return _modifier;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual TeamSpecialCourseItemTableDef As(string name) {
                return new TeamSpecialCourseItemTableDef("TeamSpecialCourseItem", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, TeamSpecialCourseItem data, bool throwIfValidColumnName) {
                data.ItemId = ItemId.GetValue<long>(reader, throwIfValidColumnName);
                data.CourseId = CourseId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeamId = TeamId.GetValue<long>(reader, throwIfValidColumnName);
                data.ItemDate = ItemDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Location = Location.GetValue<string>(reader, throwIfValidColumnName);
                data.Title = Title.GetValue<string>(reader, throwIfValidColumnName);
                data.Content = Content.GetValue<string>(reader, throwIfValidColumnName);
                data.ActivityType = ActivityType.GetValue<string>(reader, throwIfValidColumnName);
                data.Speaker = Speaker.GetValue<string>(reader, throwIfValidColumnName);
                data.Remark = Remark.GetValue<string>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Modifier = Modifier.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TeamSpecialCourseItem Map(IDataReader reader) {
                TeamSpecialCourseItem data = new TeamSpecialCourseItem();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual TeamSpecialCourseItem TolerantMap(IDataReader reader) {
                TeamSpecialCourseItem data = new TeamSpecialCourseItem();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TeamSpecialCourseItem> MapList(IDataReader reader) {
                List<TeamSpecialCourseItem> list = new List<TeamSpecialCourseItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<TeamSpecialCourseItem> TolerantMapList(IDataReader reader) {
                List<TeamSpecialCourseItem> list = new List<TeamSpecialCourseItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ExpGroupTableDef : APTableDef {
            
            private Int64APColumnDef _groupId;
            
            private StringAPColumnDef _name;
            
            private Int64APColumnDef _declareTargetPKID;
            
            private Int64APColumnDef _declareSubjectPKID;
            
            private Int64APColumnDef _declareStagePKID;
            
            private Int32APColumnDef _memberCount;
            
            private Int32APColumnDef _teacherCount;
            
            private DateTimeAPColumnDef _createDate;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private Int64APColumnDef _modifier;
            
            public ExpGroupTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ExpGroupTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// GroupId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef GroupId {
                get {
                    if (Object.ReferenceEquals(_groupId, null)) {
                        _groupId = new Int64APColumnDef(this, "GroupId", false);
                        _groupId.Display = "专家组ID";
                    }
                    return _groupId;
                }
            }
            
            /// <summary>
            /// Name ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Name {
                get {
                    if (Object.ReferenceEquals(_name, null)) {
                        _name = new StringAPColumnDef(this, "Name", false, 40);
                        _name.Display = "专家组名称";
                        _name.Required = true;
                    }
                    return _name;
                }
            }
            
            /// <summary>
            /// DeclareTargetPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareTargetPKID {
                get {
                    if (Object.ReferenceEquals(_declareTargetPKID, null)) {
                        _declareTargetPKID = new Int64APColumnDef(this, "DeclareTargetPKID", false);
                        _declareTargetPKID.Display = "申报（担任）称号";
                    }
                    return _declareTargetPKID;
                }
            }
            
            /// <summary>
            /// DeclareSubjectPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareSubjectPKID {
                get {
                    if (Object.ReferenceEquals(_declareSubjectPKID, null)) {
                        _declareSubjectPKID = new Int64APColumnDef(this, "DeclareSubjectPKID", false);
                        _declareSubjectPKID.Display = "申报学科";
                    }
                    return _declareSubjectPKID;
                }
            }
            
            /// <summary>
            /// DeclareStagePKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareStagePKID {
                get {
                    if (Object.ReferenceEquals(_declareStagePKID, null)) {
                        _declareStagePKID = new Int64APColumnDef(this, "DeclareStagePKID", false);
                        _declareStagePKID.Display = "申报学段";
                    }
                    return _declareStagePKID;
                }
            }
            
            /// <summary>
            /// MemberCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef MemberCount {
                get {
                    if (Object.ReferenceEquals(_memberCount, null)) {
                        _memberCount = new Int32APColumnDef(this, "MemberCount", false);
                        _memberCount.Display = "专家数量";
                    }
                    return _memberCount;
                }
            }
            
            /// <summary>
            /// TeacherCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef TeacherCount {
                get {
                    if (Object.ReferenceEquals(_teacherCount, null)) {
                        _teacherCount = new Int32APColumnDef(this, "TeacherCount", false);
                        _teacherCount.Display = "学员数量";
                    }
                    return _teacherCount;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "创建人";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Modifier ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Modifier {
                get {
                    if (Object.ReferenceEquals(_modifier, null)) {
                        _modifier = new Int64APColumnDef(this, "Modifier", false);
                        _modifier.Display = "修改人";
                    }
                    return _modifier;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ExpGroupTableDef As(string name) {
                return new ExpGroupTableDef("ExpGroup", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, ExpGroup data, bool throwIfValidColumnName) {
                data.GroupId = GroupId.GetValue<long>(reader, throwIfValidColumnName);
                data.Name = Name.GetValue<string>(reader, throwIfValidColumnName);
                data.DeclareTargetPKID = DeclareTargetPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareSubjectPKID = DeclareSubjectPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareStagePKID = DeclareStagePKID.GetValue<long>(reader, throwIfValidColumnName);
                data.MemberCount = MemberCount.GetValue<int>(reader, throwIfValidColumnName);
                data.TeacherCount = TeacherCount.GetValue<int>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Modifier = Modifier.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ExpGroup Map(IDataReader reader) {
                ExpGroup data = new ExpGroup();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ExpGroup TolerantMap(IDataReader reader) {
                ExpGroup data = new ExpGroup();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ExpGroup> MapList(IDataReader reader) {
                List<ExpGroup> list = new List<ExpGroup>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ExpGroup> TolerantMapList(IDataReader reader) {
                List<ExpGroup> list = new List<ExpGroup>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ExpGroupMemberTableDef : APTableDef {
            
            private Int64APColumnDef _groupMemberId;
            
            private Int64APColumnDef _groupId;
            
            private Int64APColumnDef _expectID;
            
            private BooleanAPColumnDef _isLeader;
            
            public ExpGroupMemberTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ExpGroupMemberTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// GroupMemberId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef GroupMemberId {
                get {
                    if (Object.ReferenceEquals(_groupMemberId, null)) {
                        _groupMemberId = new Int64APColumnDef(this, "GroupMemberId", false);
                        _groupMemberId.Display = "专家组成员ID";
                    }
                    return _groupMemberId;
                }
            }
            
            /// <summary>
            /// GroupId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef GroupId {
                get {
                    if (Object.ReferenceEquals(_groupId, null)) {
                        _groupId = new Int64APColumnDef(this, "GroupId", false);
                        _groupId.Display = "专家ID";
                    }
                    return _groupId;
                }
            }
            
            /// <summary>
            /// ExpectID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ExpectID {
                get {
                    if (Object.ReferenceEquals(_expectID, null)) {
                        _expectID = new Int64APColumnDef(this, "ExpectID", false);
                        _expectID.Display = "专家ID";
                    }
                    return _expectID;
                }
            }
            
            /// <summary>
            /// IsLeader ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsLeader {
                get {
                    if (Object.ReferenceEquals(_isLeader, null)) {
                        _isLeader = new BooleanAPColumnDef(this, "IsLeader", false);
                        _isLeader.Display = "是否组长";
                    }
                    return _isLeader;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ExpGroupMemberTableDef As(string name) {
                return new ExpGroupMemberTableDef("ExpGroupMember", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, ExpGroupMember data, bool throwIfValidColumnName) {
                data.GroupMemberId = GroupMemberId.GetValue<long>(reader, throwIfValidColumnName);
                data.GroupId = GroupId.GetValue<long>(reader, throwIfValidColumnName);
                data.ExpectID = ExpectID.GetValue<long>(reader, throwIfValidColumnName);
                data.IsLeader = IsLeader.GetValue<bool>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ExpGroupMember Map(IDataReader reader) {
                ExpGroupMember data = new ExpGroupMember();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ExpGroupMember TolerantMap(IDataReader reader) {
                ExpGroupMember data = new ExpGroupMember();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ExpGroupMember> MapList(IDataReader reader) {
                List<ExpGroupMember> list = new List<ExpGroupMember>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ExpGroupMember> TolerantMapList(IDataReader reader) {
                List<ExpGroupMember> list = new List<ExpGroupMember>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ExpectTableDef : APTableDef {
            
            private Int64APColumnDef _expectId;
            
            private Int64APColumnDef _groupCount;
            
            public ExpectTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ExpectTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ExpectId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ExpectId {
                get {
                    if (Object.ReferenceEquals(_expectId, null)) {
                        _expectId = new Int64APColumnDef(this, "ExpectId", false);
                        _expectId.Display = "专家ID";
                    }
                    return _expectId;
                }
            }
            
            /// <summary>
            /// GroupCount ColumnDef
            /// </summary>
            public virtual Int64APColumnDef GroupCount {
                get {
                    if (Object.ReferenceEquals(_groupCount, null)) {
                        _groupCount = new Int64APColumnDef(this, "GroupCount", false);
                        _groupCount.Display = "专家组数量";
                    }
                    return _groupCount;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ExpectTableDef As(string name) {
                return new ExpectTableDef("Expect", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Expect data, bool throwIfValidColumnName) {
                data.ExpectId = ExpectId.GetValue<long>(reader, throwIfValidColumnName);
                data.GroupCount = GroupCount.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Expect Map(IDataReader reader) {
                Expect data = new Expect();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Expect TolerantMap(IDataReader reader) {
                Expect data = new Expect();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Expect> MapList(IDataReader reader) {
                List<Expect> list = new List<Expect>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Expect> TolerantMapList(IDataReader reader) {
                List<Expect> list = new List<Expect>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ExpGroupTargetTableDef : APTableDef {
            
            private Int64APColumnDef _groupId;
            
            private Int64APColumnDef _memberId;
            
            public ExpGroupTargetTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ExpGroupTargetTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// GroupId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef GroupId {
                get {
                    if (Object.ReferenceEquals(_groupId, null)) {
                        _groupId = new Int64APColumnDef(this, "GroupId", false);
                        _groupId.Display = "专家组ID";
                    }
                    return _groupId;
                }
            }
            
            /// <summary>
            /// MemberId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef MemberId {
                get {
                    if (Object.ReferenceEquals(_memberId, null)) {
                        _memberId = new Int64APColumnDef(this, "MemberId", false);
                        _memberId.Display = "学员ID";
                    }
                    return _memberId;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ExpGroupTargetTableDef As(string name) {
                return new ExpGroupTargetTableDef("ExpGroupTarget", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, ExpGroupTarget data, bool throwIfValidColumnName) {
                data.GroupId = GroupId.GetValue<long>(reader, throwIfValidColumnName);
                data.MemberId = MemberId.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ExpGroupTarget Map(IDataReader reader) {
                ExpGroupTarget data = new ExpGroupTarget();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ExpGroupTarget TolerantMap(IDataReader reader) {
                ExpGroupTarget data = new ExpGroupTarget();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ExpGroupTarget> MapList(IDataReader reader) {
                List<ExpGroupTarget> list = new List<ExpGroupTarget>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ExpGroupTarget> TolerantMapList(IDataReader reader) {
                List<ExpGroupTarget> list = new List<ExpGroupTarget>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalPeriodTableDef : APTableDef {
            
            private Int64APColumnDef _periodId;
            
            private StringAPColumnDef _name;
            
            private DateTimeAPColumnDef _beginDate;
            
            private DateTimeAPColumnDef _endDate;
            
            private DateTimeAPColumnDef _accessBeginDate;
            
            private DateTimeAPColumnDef _accessEndDate;
            
            private StringAPColumnDef _analysisName;
            
            private StringAPColumnDef _analysisType;
            
            private BooleanAPColumnDef _isCurrent;
            
            private DateTimeAPColumnDef _createDate;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _modifyDate;
            
            private Int64APColumnDef _modifier;
            
            public EvalPeriodTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalPeriodTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new Int64APColumnDef(this, "PeriodId", false);
                        _periodId.Display = "周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// Name ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Name {
                get {
                    if (Object.ReferenceEquals(_name, null)) {
                        _name = new StringAPColumnDef(this, "Name", false, 100);
                        _name.Display = "周期名称";
                    }
                    return _name;
                }
            }
            
            /// <summary>
            /// BeginDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef BeginDate {
                get {
                    if (Object.ReferenceEquals(_beginDate, null)) {
                        _beginDate = new DateTimeAPColumnDef(this, "BeginDate", false);
                        _beginDate.Display = "开始时间（考核区间）";
                    }
                    return _beginDate;
                }
            }
            
            /// <summary>
            /// EndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef EndDate {
                get {
                    if (Object.ReferenceEquals(_endDate, null)) {
                        _endDate = new DateTimeAPColumnDef(this, "EndDate", false);
                        _endDate.Display = "结束时间（考核区间）";
                    }
                    return _endDate;
                }
            }
            
            /// <summary>
            /// AccessBeginDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef AccessBeginDate {
                get {
                    if (Object.ReferenceEquals(_accessBeginDate, null)) {
                        _accessBeginDate = new DateTimeAPColumnDef(this, "AccessBeginDate", false);
                        _accessBeginDate.Display = "开始时间（操作区间）";
                    }
                    return _accessBeginDate;
                }
            }
            
            /// <summary>
            /// AccessEndDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef AccessEndDate {
                get {
                    if (Object.ReferenceEquals(_accessEndDate, null)) {
                        _accessEndDate = new DateTimeAPColumnDef(this, "AccessEndDate", false);
                        _accessEndDate.Display = "结束时间（操作区间）";
                    }
                    return _accessEndDate;
                }
            }
            
            /// <summary>
            /// AnalysisName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AnalysisName {
                get {
                    if (Object.ReferenceEquals(_analysisName, null)) {
                        _analysisName = new StringAPColumnDef(this, "AnalysisName", false, 100);
                        _analysisName.Display = "算法模型名称";
                    }
                    return _analysisName;
                }
            }
            
            /// <summary>
            /// AnalysisType ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AnalysisType {
                get {
                    if (Object.ReferenceEquals(_analysisType, null)) {
                        _analysisType = new StringAPColumnDef(this, "AnalysisType", false, 100);
                        _analysisType.Display = "算法模型类型";
                    }
                    return _analysisType;
                }
            }
            
            /// <summary>
            /// IsCurrent ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsCurrent {
                get {
                    if (Object.ReferenceEquals(_isCurrent, null)) {
                        _isCurrent = new BooleanAPColumnDef(this, "IsCurrent", false);
                        _isCurrent.Display = "是否当前考核期";
                    }
                    return _isCurrent;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "创建人";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// ModifyDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ModifyDate {
                get {
                    if (Object.ReferenceEquals(_modifyDate, null)) {
                        _modifyDate = new DateTimeAPColumnDef(this, "ModifyDate", true);
                        _modifyDate.Display = "修改时间";
                    }
                    return _modifyDate;
                }
            }
            
            /// <summary>
            /// Modifier ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Modifier {
                get {
                    if (Object.ReferenceEquals(_modifier, null)) {
                        _modifier = new Int64APColumnDef(this, "Modifier", false);
                        _modifier.Display = "修改人";
                    }
                    return _modifier;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalPeriodTableDef As(string name) {
                return new EvalPeriodTableDef("EvalPeriod", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalPeriod data, bool throwIfValidColumnName) {
                data.PeriodId = PeriodId.GetValue<long>(reader, throwIfValidColumnName);
                data.Name = Name.GetValue<string>(reader, throwIfValidColumnName);
                data.BeginDate = BeginDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.EndDate = EndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.AccessBeginDate = AccessBeginDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.AccessEndDate = AccessEndDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.AnalysisName = AnalysisName.GetValue<string>(reader, throwIfValidColumnName);
                data.AnalysisType = AnalysisType.GetValue<string>(reader, throwIfValidColumnName);
                data.IsCurrent = IsCurrent.GetValue<bool>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.ModifyDate = ModifyDate.GetValue<System.Nullable<System.DateTime>>(reader, throwIfValidColumnName);
                data.Modifier = Modifier.GetValue<long>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalPeriod Map(IDataReader reader) {
                EvalPeriod data = new EvalPeriod();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalPeriod TolerantMap(IDataReader reader) {
                EvalPeriod data = new EvalPeriod();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalPeriod> MapList(IDataReader reader) {
                List<EvalPeriod> list = new List<EvalPeriod>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalPeriod> TolerantMapList(IDataReader reader) {
                List<EvalPeriod> list = new List<EvalPeriod>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalSchoolResultTableDef : APTableDef {
            
            private Int64APColumnDef _resultId;
            
            private Int64APColumnDef _periodId;
            
            private Int64APColumnDef _companyId;
            
            private Int64APColumnDef _teacherId;
            
            private DoubleAPColumnDef _fullScore;
            
            private DoubleAPColumnDef _score;
            
            private StringAPColumnDef _morality;
            
            private Int64APColumnDef _accesser;
            
            private DateTimeAPColumnDef _accessDate;
            
            public EvalSchoolResultTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalSchoolResultTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ResultId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResultId {
                get {
                    if (Object.ReferenceEquals(_resultId, null)) {
                        _resultId = new Int64APColumnDef(this, "ResultId", false);
                        _resultId.Display = "评价结果ID";
                    }
                    return _resultId;
                }
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new Int64APColumnDef(this, "PeriodId", false);
                        _periodId.Display = "周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// CompanyId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef CompanyId {
                get {
                    if (Object.ReferenceEquals(_companyId, null)) {
                        _companyId = new Int64APColumnDef(this, "CompanyId", false);
                        _companyId.Display = "单位ID";
                    }
                    return _companyId;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// FullScore ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef FullScore {
                get {
                    if (Object.ReferenceEquals(_fullScore, null)) {
                        _fullScore = new DoubleAPColumnDef(this, "FullScore", false);
                        _fullScore.Display = "总分";
                    }
                    return _fullScore;
                }
            }
            
            /// <summary>
            /// Score ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Score {
                get {
                    if (Object.ReferenceEquals(_score, null)) {
                        _score = new DoubleAPColumnDef(this, "Score", false);
                        _score.Display = "得分";
                    }
                    return _score;
                }
            }
            
            /// <summary>
            /// Morality ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Morality {
                get {
                    if (Object.ReferenceEquals(_morality, null)) {
                        _morality = new StringAPColumnDef(this, "Morality", false, 200);
                        _morality.Display = "合格";
                    }
                    return _morality;
                }
            }
            
            /// <summary>
            /// Accesser ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Accesser {
                get {
                    if (Object.ReferenceEquals(_accesser, null)) {
                        _accesser = new Int64APColumnDef(this, "Accesser", false);
                        _accesser.Display = "考评人";
                    }
                    return _accesser;
                }
            }
            
            /// <summary>
            /// AccessDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef AccessDate {
                get {
                    if (Object.ReferenceEquals(_accessDate, null)) {
                        _accessDate = new DateTimeAPColumnDef(this, "AccessDate", false);
                        _accessDate.Display = "考评时间";
                    }
                    return _accessDate;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalSchoolResultTableDef As(string name) {
                return new EvalSchoolResultTableDef("EvalSchoolResult", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalSchoolResult data, bool throwIfValidColumnName) {
                data.ResultId = ResultId.GetValue<long>(reader, throwIfValidColumnName);
                data.PeriodId = PeriodId.GetValue<long>(reader, throwIfValidColumnName);
                data.CompanyId = CompanyId.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.FullScore = FullScore.GetValue<double>(reader, throwIfValidColumnName);
                data.Score = Score.GetValue<double>(reader, throwIfValidColumnName);
                data.Morality = Morality.GetValue<string>(reader, throwIfValidColumnName);
                data.Accesser = Accesser.GetValue<long>(reader, throwIfValidColumnName);
                data.AccessDate = AccessDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalSchoolResult Map(IDataReader reader) {
                EvalSchoolResult data = new EvalSchoolResult();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalSchoolResult TolerantMap(IDataReader reader) {
                EvalSchoolResult data = new EvalSchoolResult();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalSchoolResult> MapList(IDataReader reader) {
                List<EvalSchoolResult> list = new List<EvalSchoolResult>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalSchoolResult> TolerantMapList(IDataReader reader) {
                List<EvalSchoolResult> list = new List<EvalSchoolResult>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalSchoolResultItemTableDef : APTableDef {
            
            private Int64APColumnDef _resultItemId;
            
            private Int64APColumnDef _resultId;
            
            private StringAPColumnDef _evalItemKey;
            
            private StringAPColumnDef _chooseValue;
            
            private StringAPColumnDef _resultValue;
            
            public EvalSchoolResultItemTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalSchoolResultItemTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ResultItemId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResultItemId {
                get {
                    if (Object.ReferenceEquals(_resultItemId, null)) {
                        _resultItemId = new Int64APColumnDef(this, "ResultItemId", false);
                        _resultItemId.Display = "结果项ID";
                    }
                    return _resultItemId;
                }
            }
            
            /// <summary>
            /// ResultId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResultId {
                get {
                    if (Object.ReferenceEquals(_resultId, null)) {
                        _resultId = new Int64APColumnDef(this, "ResultId", false);
                        _resultId.Display = "评价结果ID";
                    }
                    return _resultId;
                }
            }
            
            /// <summary>
            /// EvalItemKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef EvalItemKey {
                get {
                    if (Object.ReferenceEquals(_evalItemKey, null)) {
                        _evalItemKey = new StringAPColumnDef(this, "EvalItemKey", false, 200);
                        _evalItemKey.Display = "指标项";
                    }
                    return _evalItemKey;
                }
            }
            
            /// <summary>
            /// ChooseValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ChooseValue {
                get {
                    if (Object.ReferenceEquals(_chooseValue, null)) {
                        _chooseValue = new StringAPColumnDef(this, "ChooseValue", false, 20);
                        _chooseValue.Display = "选择值";
                    }
                    return _chooseValue;
                }
            }
            
            /// <summary>
            /// ResultValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ResultValue {
                get {
                    if (Object.ReferenceEquals(_resultValue, null)) {
                        _resultValue = new StringAPColumnDef(this, "ResultValue", false, 100);
                        _resultValue.Display = "输入值";
                    }
                    return _resultValue;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalSchoolResultItemTableDef As(string name) {
                return new EvalSchoolResultItemTableDef("EvalSchoolResultItem", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalSchoolResultItem data, bool throwIfValidColumnName) {
                data.ResultItemId = ResultItemId.GetValue<long>(reader, throwIfValidColumnName);
                data.ResultId = ResultId.GetValue<long>(reader, throwIfValidColumnName);
                data.EvalItemKey = EvalItemKey.GetValue<string>(reader, throwIfValidColumnName);
                data.ChooseValue = ChooseValue.GetValue<string>(reader, throwIfValidColumnName);
                data.ResultValue = ResultValue.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalSchoolResultItem Map(IDataReader reader) {
                EvalSchoolResultItem data = new EvalSchoolResultItem();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalSchoolResultItem TolerantMap(IDataReader reader) {
                EvalSchoolResultItem data = new EvalSchoolResultItem();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalSchoolResultItem> MapList(IDataReader reader) {
                List<EvalSchoolResultItem> list = new List<EvalSchoolResultItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalSchoolResultItem> TolerantMapList(IDataReader reader) {
                List<EvalSchoolResultItem> list = new List<EvalSchoolResultItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalVolumnResultTableDef : APTableDef {
            
            private Int64APColumnDef _resultId;
            
            private Int64APColumnDef _periodId;
            
            private Int64APColumnDef _declareTargetPKID;
            
            private Int64APColumnDef _teacherId;
            
            private DoubleAPColumnDef _fullScore;
            
            private DoubleAPColumnDef _score;
            
            private StringAPColumnDef _analysisContent;
            
            private Int64APColumnDef _accesser;
            
            private DateTimeAPColumnDef _accessDate;
            
            public EvalVolumnResultTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalVolumnResultTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ResultId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResultId {
                get {
                    if (Object.ReferenceEquals(_resultId, null)) {
                        _resultId = new Int64APColumnDef(this, "ResultId", false);
                        _resultId.Display = "评价结果ID";
                    }
                    return _resultId;
                }
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new Int64APColumnDef(this, "PeriodId", false);
                        _periodId.Display = "周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// DeclareTargetPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareTargetPKID {
                get {
                    if (Object.ReferenceEquals(_declareTargetPKID, null)) {
                        _declareTargetPKID = new Int64APColumnDef(this, "DeclareTargetPKID", false);
                        _declareTargetPKID.Display = "申报（担任）称号";
                    }
                    return _declareTargetPKID;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// FullScore ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef FullScore {
                get {
                    if (Object.ReferenceEquals(_fullScore, null)) {
                        _fullScore = new DoubleAPColumnDef(this, "FullScore", false);
                        _fullScore.Display = "总分";
                    }
                    return _fullScore;
                }
            }
            
            /// <summary>
            /// Score ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Score {
                get {
                    if (Object.ReferenceEquals(_score, null)) {
                        _score = new DoubleAPColumnDef(this, "Score", false);
                        _score.Display = "得分";
                    }
                    return _score;
                }
            }
            
            /// <summary>
            /// AnalysisContent ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AnalysisContent {
                get {
                    if (Object.ReferenceEquals(_analysisContent, null)) {
                        _analysisContent = new StringAPColumnDef(this, "AnalysisContent", false, 20000);
                        _analysisContent.Display = "分析报告";
                    }
                    return _analysisContent;
                }
            }
            
            /// <summary>
            /// Accesser ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Accesser {
                get {
                    if (Object.ReferenceEquals(_accesser, null)) {
                        _accesser = new Int64APColumnDef(this, "Accesser", false);
                        _accesser.Display = "考评人";
                    }
                    return _accesser;
                }
            }
            
            /// <summary>
            /// AccessDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef AccessDate {
                get {
                    if (Object.ReferenceEquals(_accessDate, null)) {
                        _accessDate = new DateTimeAPColumnDef(this, "AccessDate", false);
                        _accessDate.Display = "考评时间";
                    }
                    return _accessDate;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalVolumnResultTableDef As(string name) {
                return new EvalVolumnResultTableDef("EvalVolumnResult", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalVolumnResult data, bool throwIfValidColumnName) {
                data.ResultId = ResultId.GetValue<long>(reader, throwIfValidColumnName);
                data.PeriodId = PeriodId.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareTargetPKID = DeclareTargetPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.FullScore = FullScore.GetValue<double>(reader, throwIfValidColumnName);
                data.Score = Score.GetValue<double>(reader, throwIfValidColumnName);
                data.AnalysisContent = AnalysisContent.GetValue<string>(reader, throwIfValidColumnName);
                data.Accesser = Accesser.GetValue<long>(reader, throwIfValidColumnName);
                data.AccessDate = AccessDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalVolumnResult Map(IDataReader reader) {
                EvalVolumnResult data = new EvalVolumnResult();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalVolumnResult TolerantMap(IDataReader reader) {
                EvalVolumnResult data = new EvalVolumnResult();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalVolumnResult> MapList(IDataReader reader) {
                List<EvalVolumnResult> list = new List<EvalVolumnResult>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalVolumnResult> TolerantMapList(IDataReader reader) {
                List<EvalVolumnResult> list = new List<EvalVolumnResult>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalVolumnResultItemTableDef : APTableDef {
            
            private Int64APColumnDef _resultItemId;
            
            private Int64APColumnDef _resultId;
            
            private StringAPColumnDef _evalItemKey;
            
            private StringAPColumnDef _chooseValue;
            
            private StringAPColumnDef _resultValue;
            
            public EvalVolumnResultItemTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalVolumnResultItemTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ResultItemId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResultItemId {
                get {
                    if (Object.ReferenceEquals(_resultItemId, null)) {
                        _resultItemId = new Int64APColumnDef(this, "ResultItemId", false);
                        _resultItemId.Display = "结果项ID";
                    }
                    return _resultItemId;
                }
            }
            
            /// <summary>
            /// ResultId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResultId {
                get {
                    if (Object.ReferenceEquals(_resultId, null)) {
                        _resultId = new Int64APColumnDef(this, "ResultId", false);
                        _resultId.Display = "评价结果ID";
                    }
                    return _resultId;
                }
            }
            
            /// <summary>
            /// EvalItemKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef EvalItemKey {
                get {
                    if (Object.ReferenceEquals(_evalItemKey, null)) {
                        _evalItemKey = new StringAPColumnDef(this, "EvalItemKey", false, 200);
                        _evalItemKey.Display = "指标项";
                    }
                    return _evalItemKey;
                }
            }
            
            /// <summary>
            /// ChooseValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ChooseValue {
                get {
                    if (Object.ReferenceEquals(_chooseValue, null)) {
                        _chooseValue = new StringAPColumnDef(this, "ChooseValue", false, 20);
                        _chooseValue.Display = "选择值";
                    }
                    return _chooseValue;
                }
            }
            
            /// <summary>
            /// ResultValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ResultValue {
                get {
                    if (Object.ReferenceEquals(_resultValue, null)) {
                        _resultValue = new StringAPColumnDef(this, "ResultValue", false, 100);
                        _resultValue.Display = "输入值";
                    }
                    return _resultValue;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalVolumnResultItemTableDef As(string name) {
                return new EvalVolumnResultItemTableDef("EvalVolumnResultItem", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalVolumnResultItem data, bool throwIfValidColumnName) {
                data.ResultItemId = ResultItemId.GetValue<long>(reader, throwIfValidColumnName);
                data.ResultId = ResultId.GetValue<long>(reader, throwIfValidColumnName);
                data.EvalItemKey = EvalItemKey.GetValue<string>(reader, throwIfValidColumnName);
                data.ChooseValue = ChooseValue.GetValue<string>(reader, throwIfValidColumnName);
                data.ResultValue = ResultValue.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalVolumnResultItem Map(IDataReader reader) {
                EvalVolumnResultItem data = new EvalVolumnResultItem();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalVolumnResultItem TolerantMap(IDataReader reader) {
                EvalVolumnResultItem data = new EvalVolumnResultItem();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalVolumnResultItem> MapList(IDataReader reader) {
                List<EvalVolumnResultItem> list = new List<EvalVolumnResultItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalVolumnResultItem> TolerantMapList(IDataReader reader) {
                List<EvalVolumnResultItem> list = new List<EvalVolumnResultItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalQualitySubmitResultTableDef : APTableDef {
            
            private Int64APColumnDef _resultId;
            
            private Int64APColumnDef _periodId;
            
            private Int64APColumnDef _declareTargetPKID;
            
            private Int64APColumnDef _teacherId;
            
            private DoubleAPColumnDef _fullScore;
            
            private DoubleAPColumnDef _score;
            
            private DoubleAPColumnDef _characteristic;
            
            private DoubleAPColumnDef _adjustScore;
            
            private Int32APColumnDef _accesserCount;
            
            private Int64APColumnDef _groupId;
            
            private Int64APColumnDef _accesser;
            
            private DateTimeAPColumnDef _accessDate;
            
            public EvalQualitySubmitResultTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalQualitySubmitResultTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ResultId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResultId {
                get {
                    if (Object.ReferenceEquals(_resultId, null)) {
                        _resultId = new Int64APColumnDef(this, "ResultId", false);
                        _resultId.Display = "评价结果ID";
                    }
                    return _resultId;
                }
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new Int64APColumnDef(this, "PeriodId", false);
                        _periodId.Display = "周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// DeclareTargetPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareTargetPKID {
                get {
                    if (Object.ReferenceEquals(_declareTargetPKID, null)) {
                        _declareTargetPKID = new Int64APColumnDef(this, "DeclareTargetPKID", false);
                        _declareTargetPKID.Display = "申报（担任）称号";
                    }
                    return _declareTargetPKID;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// FullScore ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef FullScore {
                get {
                    if (Object.ReferenceEquals(_fullScore, null)) {
                        _fullScore = new DoubleAPColumnDef(this, "FullScore", false);
                        _fullScore.Display = "总分";
                    }
                    return _fullScore;
                }
            }
            
            /// <summary>
            /// Score ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Score {
                get {
                    if (Object.ReferenceEquals(_score, null)) {
                        _score = new DoubleAPColumnDef(this, "Score", false);
                        _score.Display = "得分";
                    }
                    return _score;
                }
            }
            
            /// <summary>
            /// Characteristic ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Characteristic {
                get {
                    if (Object.ReferenceEquals(_characteristic, null)) {
                        _characteristic = new DoubleAPColumnDef(this, "Characteristic", false);
                        _characteristic.Display = "特色分得分";
                    }
                    return _characteristic;
                }
            }
            
            /// <summary>
            /// AdjustScore ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef AdjustScore {
                get {
                    if (Object.ReferenceEquals(_adjustScore, null)) {
                        _adjustScore = new DoubleAPColumnDef(this, "AdjustScore", false);
                        _adjustScore.Display = "调整分";
                    }
                    return _adjustScore;
                }
            }
            
            /// <summary>
            /// AccesserCount ColumnDef
            /// </summary>
            public virtual Int32APColumnDef AccesserCount {
                get {
                    if (Object.ReferenceEquals(_accesserCount, null)) {
                        _accesserCount = new Int32APColumnDef(this, "AccesserCount", false);
                        _accesserCount.Display = "评分人数";
                    }
                    return _accesserCount;
                }
            }
            
            /// <summary>
            /// GroupId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef GroupId {
                get {
                    if (Object.ReferenceEquals(_groupId, null)) {
                        _groupId = new Int64APColumnDef(this, "GroupId", false);
                        _groupId.Display = "专家组";
                    }
                    return _groupId;
                }
            }
            
            /// <summary>
            /// Accesser ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Accesser {
                get {
                    if (Object.ReferenceEquals(_accesser, null)) {
                        _accesser = new Int64APColumnDef(this, "Accesser", false);
                        _accesser.Display = "组长";
                    }
                    return _accesser;
                }
            }
            
            /// <summary>
            /// AccessDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef AccessDate {
                get {
                    if (Object.ReferenceEquals(_accessDate, null)) {
                        _accessDate = new DateTimeAPColumnDef(this, "AccessDate", false);
                        _accessDate.Display = "考评时间";
                    }
                    return _accessDate;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalQualitySubmitResultTableDef As(string name) {
                return new EvalQualitySubmitResultTableDef("EvalQualitySubmitResult", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalQualitySubmitResult data, bool throwIfValidColumnName) {
                data.ResultId = ResultId.GetValue<long>(reader, throwIfValidColumnName);
                data.PeriodId = PeriodId.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareTargetPKID = DeclareTargetPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.FullScore = FullScore.GetValue<double>(reader, throwIfValidColumnName);
                data.Score = Score.GetValue<double>(reader, throwIfValidColumnName);
                data.Characteristic = Characteristic.GetValue<double>(reader, throwIfValidColumnName);
                data.AdjustScore = AdjustScore.GetValue<double>(reader, throwIfValidColumnName);
                data.AccesserCount = AccesserCount.GetValue<int>(reader, throwIfValidColumnName);
                data.GroupId = GroupId.GetValue<long>(reader, throwIfValidColumnName);
                data.Accesser = Accesser.GetValue<long>(reader, throwIfValidColumnName);
                data.AccessDate = AccessDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalQualitySubmitResult Map(IDataReader reader) {
                EvalQualitySubmitResult data = new EvalQualitySubmitResult();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalQualitySubmitResult TolerantMap(IDataReader reader) {
                EvalQualitySubmitResult data = new EvalQualitySubmitResult();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalQualitySubmitResult> MapList(IDataReader reader) {
                List<EvalQualitySubmitResult> list = new List<EvalQualitySubmitResult>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalQualitySubmitResult> TolerantMapList(IDataReader reader) {
                List<EvalQualitySubmitResult> list = new List<EvalQualitySubmitResult>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalQualityResultTableDef : APTableDef {
            
            private Int64APColumnDef _resultId;
            
            private Int64APColumnDef _periodId;
            
            private Int64APColumnDef _declareTargetPKID;
            
            private Int64APColumnDef _teacherId;
            
            private DoubleAPColumnDef _fullScore;
            
            private DoubleAPColumnDef _score;
            
            private DoubleAPColumnDef _characteristic;
            
            private DoubleAPColumnDef _dynamicScore1;
            
            private DoubleAPColumnDef _dynamicScore2;
            
            private DoubleAPColumnDef _dynamicScore3;
            
            private StringAPColumnDef _comment;
            
            private Int64APColumnDef _groupId;
            
            private Int64APColumnDef _accesser;
            
            private DateTimeAPColumnDef _accessDate;
            
            public EvalQualityResultTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalQualityResultTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ResultId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResultId {
                get {
                    if (Object.ReferenceEquals(_resultId, null)) {
                        _resultId = new Int64APColumnDef(this, "ResultId", false);
                        _resultId.Display = "评价结果ID";
                    }
                    return _resultId;
                }
            }
            
            /// <summary>
            /// PeriodId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef PeriodId {
                get {
                    if (Object.ReferenceEquals(_periodId, null)) {
                        _periodId = new Int64APColumnDef(this, "PeriodId", false);
                        _periodId.Display = "周期ID";
                    }
                    return _periodId;
                }
            }
            
            /// <summary>
            /// DeclareTargetPKID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef DeclareTargetPKID {
                get {
                    if (Object.ReferenceEquals(_declareTargetPKID, null)) {
                        _declareTargetPKID = new Int64APColumnDef(this, "DeclareTargetPKID", false);
                        _declareTargetPKID.Display = "申报（担任）称号";
                    }
                    return _declareTargetPKID;
                }
            }
            
            /// <summary>
            /// TeacherId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef TeacherId {
                get {
                    if (Object.ReferenceEquals(_teacherId, null)) {
                        _teacherId = new Int64APColumnDef(this, "TeacherId", false);
                        _teacherId.Display = "教师ID";
                    }
                    return _teacherId;
                }
            }
            
            /// <summary>
            /// FullScore ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef FullScore {
                get {
                    if (Object.ReferenceEquals(_fullScore, null)) {
                        _fullScore = new DoubleAPColumnDef(this, "FullScore", false);
                        _fullScore.Display = "总分";
                    }
                    return _fullScore;
                }
            }
            
            /// <summary>
            /// Score ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Score {
                get {
                    if (Object.ReferenceEquals(_score, null)) {
                        _score = new DoubleAPColumnDef(this, "Score", false);
                        _score.Display = "得分";
                    }
                    return _score;
                }
            }
            
            /// <summary>
            /// Characteristic ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef Characteristic {
                get {
                    if (Object.ReferenceEquals(_characteristic, null)) {
                        _characteristic = new DoubleAPColumnDef(this, "Characteristic", false);
                        _characteristic.Display = "特色分";
                    }
                    return _characteristic;
                }
            }
            
            /// <summary>
            /// DynamicScore1 ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef DynamicScore1 {
                get {
                    if (Object.ReferenceEquals(_dynamicScore1, null)) {
                        _dynamicScore1 = new DoubleAPColumnDef(this, "DynamicScore1", false);
                        _dynamicScore1.Display = "备用分1";
                    }
                    return _dynamicScore1;
                }
            }
            
            /// <summary>
            /// DynamicScore2 ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef DynamicScore2 {
                get {
                    if (Object.ReferenceEquals(_dynamicScore2, null)) {
                        _dynamicScore2 = new DoubleAPColumnDef(this, "DynamicScore2", false);
                        _dynamicScore2.Display = "备用分2";
                    }
                    return _dynamicScore2;
                }
            }
            
            /// <summary>
            /// DynamicScore3 ColumnDef
            /// </summary>
            public virtual DoubleAPColumnDef DynamicScore3 {
                get {
                    if (Object.ReferenceEquals(_dynamicScore3, null)) {
                        _dynamicScore3 = new DoubleAPColumnDef(this, "DynamicScore3", false);
                        _dynamicScore3.Display = "备用分3";
                    }
                    return _dynamicScore3;
                }
            }
            
            /// <summary>
            /// Comment ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Comment {
                get {
                    if (Object.ReferenceEquals(_comment, null)) {
                        _comment = new StringAPColumnDef(this, "Comment", false, 10000);
                        _comment.Display = "总评";
                    }
                    return _comment;
                }
            }
            
            /// <summary>
            /// GroupId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef GroupId {
                get {
                    if (Object.ReferenceEquals(_groupId, null)) {
                        _groupId = new Int64APColumnDef(this, "GroupId", false);
                        _groupId.Display = "专家组";
                    }
                    return _groupId;
                }
            }
            
            /// <summary>
            /// Accesser ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Accesser {
                get {
                    if (Object.ReferenceEquals(_accesser, null)) {
                        _accesser = new Int64APColumnDef(this, "Accesser", false);
                        _accesser.Display = "考评人";
                    }
                    return _accesser;
                }
            }
            
            /// <summary>
            /// AccessDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef AccessDate {
                get {
                    if (Object.ReferenceEquals(_accessDate, null)) {
                        _accessDate = new DateTimeAPColumnDef(this, "AccessDate", false);
                        _accessDate.Display = "考评时间";
                    }
                    return _accessDate;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalQualityResultTableDef As(string name) {
                return new EvalQualityResultTableDef("EvalQualityResult", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalQualityResult data, bool throwIfValidColumnName) {
                data.ResultId = ResultId.GetValue<long>(reader, throwIfValidColumnName);
                data.PeriodId = PeriodId.GetValue<long>(reader, throwIfValidColumnName);
                data.DeclareTargetPKID = DeclareTargetPKID.GetValue<long>(reader, throwIfValidColumnName);
                data.TeacherId = TeacherId.GetValue<long>(reader, throwIfValidColumnName);
                data.FullScore = FullScore.GetValue<double>(reader, throwIfValidColumnName);
                data.Score = Score.GetValue<double>(reader, throwIfValidColumnName);
                data.Characteristic = Characteristic.GetValue<double>(reader, throwIfValidColumnName);
                data.DynamicScore1 = DynamicScore1.GetValue<double>(reader, throwIfValidColumnName);
                data.DynamicScore2 = DynamicScore2.GetValue<double>(reader, throwIfValidColumnName);
                data.DynamicScore3 = DynamicScore3.GetValue<double>(reader, throwIfValidColumnName);
                data.Comment = Comment.GetValue<string>(reader, throwIfValidColumnName);
                data.GroupId = GroupId.GetValue<long>(reader, throwIfValidColumnName);
                data.Accesser = Accesser.GetValue<long>(reader, throwIfValidColumnName);
                data.AccessDate = AccessDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalQualityResult Map(IDataReader reader) {
                EvalQualityResult data = new EvalQualityResult();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalQualityResult TolerantMap(IDataReader reader) {
                EvalQualityResult data = new EvalQualityResult();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalQualityResult> MapList(IDataReader reader) {
                List<EvalQualityResult> list = new List<EvalQualityResult>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalQualityResult> TolerantMapList(IDataReader reader) {
                List<EvalQualityResult> list = new List<EvalQualityResult>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class EvalQualityResultItemTableDef : APTableDef {
            
            private Int64APColumnDef _resultItemId;
            
            private Int64APColumnDef _resultId;
            
            private StringAPColumnDef _evalItemKey;
            
            private StringAPColumnDef _chooseValue;
            
            private StringAPColumnDef _resultValue;
            
            public EvalQualityResultItemTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected EvalQualityResultItemTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ResultItemId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResultItemId {
                get {
                    if (Object.ReferenceEquals(_resultItemId, null)) {
                        _resultItemId = new Int64APColumnDef(this, "ResultItemId", false);
                        _resultItemId.Display = "结果项ID";
                    }
                    return _resultItemId;
                }
            }
            
            /// <summary>
            /// ResultId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ResultId {
                get {
                    if (Object.ReferenceEquals(_resultId, null)) {
                        _resultId = new Int64APColumnDef(this, "ResultId", false);
                        _resultId.Display = "评价结果ID";
                    }
                    return _resultId;
                }
            }
            
            /// <summary>
            /// EvalItemKey ColumnDef
            /// </summary>
            public virtual StringAPColumnDef EvalItemKey {
                get {
                    if (Object.ReferenceEquals(_evalItemKey, null)) {
                        _evalItemKey = new StringAPColumnDef(this, "EvalItemKey", false, 200);
                        _evalItemKey.Display = "指标项";
                    }
                    return _evalItemKey;
                }
            }
            
            /// <summary>
            /// ChooseValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ChooseValue {
                get {
                    if (Object.ReferenceEquals(_chooseValue, null)) {
                        _chooseValue = new StringAPColumnDef(this, "ChooseValue", false, 20);
                        _chooseValue.Display = "选择值";
                    }
                    return _chooseValue;
                }
            }
            
            /// <summary>
            /// ResultValue ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ResultValue {
                get {
                    if (Object.ReferenceEquals(_resultValue, null)) {
                        _resultValue = new StringAPColumnDef(this, "ResultValue", false, 100);
                        _resultValue.Display = "输入值";
                    }
                    return _resultValue;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual EvalQualityResultItemTableDef As(string name) {
                return new EvalQualityResultItemTableDef("EvalQualityResultItem", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, EvalQualityResultItem data, bool throwIfValidColumnName) {
                data.ResultItemId = ResultItemId.GetValue<long>(reader, throwIfValidColumnName);
                data.ResultId = ResultId.GetValue<long>(reader, throwIfValidColumnName);
                data.EvalItemKey = EvalItemKey.GetValue<string>(reader, throwIfValidColumnName);
                data.ChooseValue = ChooseValue.GetValue<string>(reader, throwIfValidColumnName);
                data.ResultValue = ResultValue.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalQualityResultItem Map(IDataReader reader) {
                EvalQualityResultItem data = new EvalQualityResultItem();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual EvalQualityResultItem TolerantMap(IDataReader reader) {
                EvalQualityResultItem data = new EvalQualityResultItem();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalQualityResultItem> MapList(IDataReader reader) {
                List<EvalQualityResultItem> list = new List<EvalQualityResultItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<EvalQualityResultItem> TolerantMapList(IDataReader reader) {
                List<EvalQualityResultItem> list = new List<EvalQualityResultItem>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class NewsTableDef : APTableDef {
            
            private Int64APColumnDef _newsId;
            
            private StringAPColumnDef _title;
            
            private StringAPColumnDef _content;
            
            private StringAPColumnDef _thumbUrl;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _createdTime;
            
            public NewsTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected NewsTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// NewsId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef NewsId {
                get {
                    if (Object.ReferenceEquals(_newsId, null)) {
                        _newsId = new Int64APColumnDef(this, "NewsId", false);
                        _newsId.Display = "新闻ID";
                    }
                    return _newsId;
                }
            }
            
            /// <summary>
            /// Title ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Title {
                get {
                    if (Object.ReferenceEquals(_title, null)) {
                        _title = new StringAPColumnDef(this, "Title", false, 100);
                        _title.Display = "新闻标题";
                        _title.Required = true;
                    }
                    return _title;
                }
            }
            
            /// <summary>
            /// Content ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Content {
                get {
                    if (Object.ReferenceEquals(_content, null)) {
                        _content = new StringAPColumnDef(this, "Content", false, 20000);
                        _content.Display = "新闻内容";
                        _content.Required = true;
                    }
                    return _content;
                }
            }
            
            /// <summary>
            /// ThumbUrl ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ThumbUrl {
                get {
                    if (Object.ReferenceEquals(_thumbUrl, null)) {
                        _thumbUrl = new StringAPColumnDef(this, "ThumbUrl", false, 255);
                        _thumbUrl.Display = "新闻缩略图";
                    }
                    return _thumbUrl;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "创建者ID";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// CreatedTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreatedTime {
                get {
                    if (Object.ReferenceEquals(_createdTime, null)) {
                        _createdTime = new DateTimeAPColumnDef(this, "CreatedTime", false);
                        _createdTime.Display = "创建时间";
                    }
                    return _createdTime;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual NewsTableDef As(string name) {
                return new NewsTableDef("News", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, News data, bool throwIfValidColumnName) {
                data.NewsId = NewsId.GetValue<long>(reader, throwIfValidColumnName);
                data.Title = Title.GetValue<string>(reader, throwIfValidColumnName);
                data.Content = Content.GetValue<string>(reader, throwIfValidColumnName);
                data.ThumbUrl = ThumbUrl.GetValue<string>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.CreatedTime = CreatedTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual News Map(IDataReader reader) {
                News data = new News();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual News TolerantMap(IDataReader reader) {
                News data = new News();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<News> MapList(IDataReader reader) {
                List<News> list = new List<News>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<News> TolerantMapList(IDataReader reader) {
                List<News> list = new List<News>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class HomePageImageTableDef : APTableDef {
            
            private Int64APColumnDef _imgId;
            
            private StringAPColumnDef _imgUrl;
            
            private StringAPColumnDef _imgName;
            
            private DateTimeAPColumnDef _uploadDate;
            
            private DateTimeAPColumnDef _useDate;
            
            private BooleanAPColumnDef _imgType;
            
            public HomePageImageTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected HomePageImageTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ImgId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ImgId {
                get {
                    if (Object.ReferenceEquals(_imgId, null)) {
                        _imgId = new Int64APColumnDef(this, "ImgId", false);
                        _imgId.Display = "图片ID";
                    }
                    return _imgId;
                }
            }
            
            /// <summary>
            /// ImgUrl ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ImgUrl {
                get {
                    if (Object.ReferenceEquals(_imgUrl, null)) {
                        _imgUrl = new StringAPColumnDef(this, "ImgUrl", false, 2000);
                        _imgUrl.Display = "图片路径";
                    }
                    return _imgUrl;
                }
            }
            
            /// <summary>
            /// ImgName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ImgName {
                get {
                    if (Object.ReferenceEquals(_imgName, null)) {
                        _imgName = new StringAPColumnDef(this, "ImgName", false, 255);
                        _imgName.Display = "图片名称";
                    }
                    return _imgName;
                }
            }
            
            /// <summary>
            /// UploadDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef UploadDate {
                get {
                    if (Object.ReferenceEquals(_uploadDate, null)) {
                        _uploadDate = new DateTimeAPColumnDef(this, "UploadDate", false);
                        _uploadDate.Display = "上传时间";
                    }
                    return _uploadDate;
                }
            }
            
            /// <summary>
            /// UseDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef UseDate {
                get {
                    if (Object.ReferenceEquals(_useDate, null)) {
                        _useDate = new DateTimeAPColumnDef(this, "UseDate", false);
                        _useDate.Display = "上架/下架时间";
                    }
                    return _useDate;
                }
            }
            
            /// <summary>
            /// ImgType ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef ImgType {
                get {
                    if (Object.ReferenceEquals(_imgType, null)) {
                        _imgType = new BooleanAPColumnDef(this, "ImgType", false);
                        _imgType.Display = "图片状态";
                    }
                    return _imgType;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual HomePageImageTableDef As(string name) {
                return new HomePageImageTableDef("HomePageImage", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, HomePageImage data, bool throwIfValidColumnName) {
                data.ImgId = ImgId.GetValue<long>(reader, throwIfValidColumnName);
                data.ImgUrl = ImgUrl.GetValue<string>(reader, throwIfValidColumnName);
                data.ImgName = ImgName.GetValue<string>(reader, throwIfValidColumnName);
                data.UploadDate = UploadDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.UseDate = UseDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.ImgType = ImgType.GetValue<bool>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual HomePageImage Map(IDataReader reader) {
                HomePageImage data = new HomePageImage();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual HomePageImage TolerantMap(IDataReader reader) {
                HomePageImage data = new HomePageImage();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<HomePageImage> MapList(IDataReader reader) {
                List<HomePageImage> list = new List<HomePageImage>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<HomePageImage> TolerantMapList(IDataReader reader) {
                List<HomePageImage> list = new List<HomePageImage>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class AttachmentsTableDef : APTableDef {
            
            private Int64APColumnDef _iD;
            
            private StringAPColumnDef _type;
            
            private Int64APColumnDef _joinId;
            
            private Int64APColumnDef _userId;
            
            private StringAPColumnDef _attachmentUrl;
            
            private StringAPColumnDef _attachmentName;
            
            private DateTimeAPColumnDef _uploadDate;
            
            private StringAPColumnDef _previewUrl;
            
            public AttachmentsTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected AttachmentsTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ID ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ID {
                get {
                    if (Object.ReferenceEquals(_iD, null)) {
                        _iD = new Int64APColumnDef(this, "ID", false);
                        _iD.Display = "附件ID";
                    }
                    return _iD;
                }
            }
            
            /// <summary>
            /// Type ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Type {
                get {
                    if (Object.ReferenceEquals(_type, null)) {
                        _type = new StringAPColumnDef(this, "Type", false, 100);
                        _type.Display = "类型";
                    }
                    return _type;
                }
            }
            
            /// <summary>
            /// JoinId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef JoinId {
                get {
                    if (Object.ReferenceEquals(_joinId, null)) {
                        _joinId = new Int64APColumnDef(this, "JoinId", false);
                        _joinId.Display = "关联ID";
                    }
                    return _joinId;
                }
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new Int64APColumnDef(this, "UserId", false);
                        _userId.Display = "用户ID";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// AttachmentUrl ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AttachmentUrl {
                get {
                    if (Object.ReferenceEquals(_attachmentUrl, null)) {
                        _attachmentUrl = new StringAPColumnDef(this, "AttachmentUrl", false, 255);
                        _attachmentUrl.Display = "附件路径";
                    }
                    return _attachmentUrl;
                }
            }
            
            /// <summary>
            /// AttachmentName ColumnDef
            /// </summary>
            public virtual StringAPColumnDef AttachmentName {
                get {
                    if (Object.ReferenceEquals(_attachmentName, null)) {
                        _attachmentName = new StringAPColumnDef(this, "AttachmentName", false, 100);
                        _attachmentName.Display = "附件名称";
                    }
                    return _attachmentName;
                }
            }
            
            /// <summary>
            /// UploadDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef UploadDate {
                get {
                    if (Object.ReferenceEquals(_uploadDate, null)) {
                        _uploadDate = new DateTimeAPColumnDef(this, "UploadDate", false);
                        _uploadDate.Display = "上传时间";
                    }
                    return _uploadDate;
                }
            }
            
            /// <summary>
            /// PreviewUrl ColumnDef
            /// </summary>
            public virtual StringAPColumnDef PreviewUrl {
                get {
                    if (Object.ReferenceEquals(_previewUrl, null)) {
                        _previewUrl = new StringAPColumnDef(this, "PreviewUrl", true, 255);
                        _previewUrl.Display = "附件预览路径";
                    }
                    return _previewUrl;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual AttachmentsTableDef As(string name) {
                return new AttachmentsTableDef("Attachments", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Attachments data, bool throwIfValidColumnName) {
                data.ID = ID.GetValue<long>(reader, throwIfValidColumnName);
                data.Type = Type.GetValue<string>(reader, throwIfValidColumnName);
                data.JoinId = JoinId.GetValue<long>(reader, throwIfValidColumnName);
                data.UserId = UserId.GetValue<long>(reader, throwIfValidColumnName);
                data.AttachmentUrl = AttachmentUrl.GetValue<string>(reader, throwIfValidColumnName);
                data.AttachmentName = AttachmentName.GetValue<string>(reader, throwIfValidColumnName);
                data.UploadDate = UploadDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.PreviewUrl = PreviewUrl.GetValue<string>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Attachments Map(IDataReader reader) {
                Attachments data = new Attachments();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Attachments TolerantMap(IDataReader reader) {
                Attachments data = new Attachments();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Attachments> MapList(IDataReader reader) {
                List<Attachments> list = new List<Attachments>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Attachments> TolerantMapList(IDataReader reader) {
                List<Attachments> list = new List<Attachments>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class NoticeTableDef : APTableDef {
            
            private Int64APColumnDef _noticeId;
            
            private StringAPColumnDef _title;
            
            private StringAPColumnDef _content;
            
            private BooleanAPColumnDef _isSend;
            
            private Int64APColumnDef _creator;
            
            private DateTimeAPColumnDef _createdTime;
            
            public NoticeTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected NoticeTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// NoticeId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef NoticeId {
                get {
                    if (Object.ReferenceEquals(_noticeId, null)) {
                        _noticeId = new Int64APColumnDef(this, "NoticeId", false);
                        _noticeId.Display = "通知ID";
                    }
                    return _noticeId;
                }
            }
            
            /// <summary>
            /// Title ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Title {
                get {
                    if (Object.ReferenceEquals(_title, null)) {
                        _title = new StringAPColumnDef(this, "Title", false, 100);
                        _title.Display = "通知标题";
                        _title.Required = true;
                    }
                    return _title;
                }
            }
            
            /// <summary>
            /// Content ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Content {
                get {
                    if (Object.ReferenceEquals(_content, null)) {
                        _content = new StringAPColumnDef(this, "Content", false, 20000);
                        _content.Display = "通知内容";
                        _content.Required = true;
                    }
                    return _content;
                }
            }
            
            /// <summary>
            /// IsSend ColumnDef
            /// </summary>
            public virtual BooleanAPColumnDef IsSend {
                get {
                    if (Object.ReferenceEquals(_isSend, null)) {
                        _isSend = new BooleanAPColumnDef(this, "IsSend", false);
                        _isSend.Display = "是否推送";
                    }
                    return _isSend;
                }
            }
            
            /// <summary>
            /// Creator ColumnDef
            /// </summary>
            public virtual Int64APColumnDef Creator {
                get {
                    if (Object.ReferenceEquals(_creator, null)) {
                        _creator = new Int64APColumnDef(this, "Creator", false);
                        _creator.Display = "创建者ID";
                    }
                    return _creator;
                }
            }
            
            /// <summary>
            /// CreatedTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreatedTime {
                get {
                    if (Object.ReferenceEquals(_createdTime, null)) {
                        _createdTime = new DateTimeAPColumnDef(this, "CreatedTime", false);
                        _createdTime.Display = "创建时间";
                    }
                    return _createdTime;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual NoticeTableDef As(string name) {
                return new NoticeTableDef("Notice", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Notice data, bool throwIfValidColumnName) {
                data.NoticeId = NoticeId.GetValue<long>(reader, throwIfValidColumnName);
                data.Title = Title.GetValue<string>(reader, throwIfValidColumnName);
                data.Content = Content.GetValue<string>(reader, throwIfValidColumnName);
                data.IsSend = IsSend.GetValue<bool>(reader, throwIfValidColumnName);
                data.Creator = Creator.GetValue<long>(reader, throwIfValidColumnName);
                data.CreatedTime = CreatedTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Notice Map(IDataReader reader) {
                Notice data = new Notice();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Notice TolerantMap(IDataReader reader) {
                Notice data = new Notice();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Notice> MapList(IDataReader reader) {
                List<Notice> list = new List<Notice>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Notice> TolerantMapList(IDataReader reader) {
                List<Notice> list = new List<Notice>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ReadNoticeTableDef : APTableDef {
            
            private Int64APColumnDef _noticeId;
            
            private Int64APColumnDef _userId;
            
            private DateTimeAPColumnDef _readTime;
            
            public ReadNoticeTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ReadNoticeTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// NoticeId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef NoticeId {
                get {
                    if (Object.ReferenceEquals(_noticeId, null)) {
                        _noticeId = new Int64APColumnDef(this, "NoticeId", false);
                        _noticeId.Display = "通知ID";
                    }
                    return _noticeId;
                }
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new Int64APColumnDef(this, "UserId", false);
                        _userId.Display = "用户ID";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// ReadTime ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef ReadTime {
                get {
                    if (Object.ReferenceEquals(_readTime, null)) {
                        _readTime = new DateTimeAPColumnDef(this, "ReadTime", false);
                        _readTime.Display = "阅读时间";
                    }
                    return _readTime;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ReadNoticeTableDef As(string name) {
                return new ReadNoticeTableDef("ReadNotice", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, ReadNotice data, bool throwIfValidColumnName) {
                data.NoticeId = NoticeId.GetValue<long>(reader, throwIfValidColumnName);
                data.UserId = UserId.GetValue<long>(reader, throwIfValidColumnName);
                data.ReadTime = ReadTime.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ReadNotice Map(IDataReader reader) {
                ReadNotice data = new ReadNotice();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual ReadNotice TolerantMap(IDataReader reader) {
                ReadNotice data = new ReadNotice();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ReadNotice> MapList(IDataReader reader) {
                List<ReadNotice> list = new List<ReadNotice>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<ReadNotice> TolerantMapList(IDataReader reader) {
                List<ReadNotice> list = new List<ReadNotice>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
        
        [Serializable()]
        public partial class ShareTableDef : APTableDef {
            
            private Int64APColumnDef _shareId;
            
            private Int64APColumnDef _userId;
            
            private Int64APColumnDef _itemId;
            
            private StringAPColumnDef _title;
            
            private StringAPColumnDef _parentType;
            
            private StringAPColumnDef _type;
            
            private DateTimeAPColumnDef _createDate;
            
            private DateTimeAPColumnDef _pubishDate;
            
            public ShareTableDef(string tableName) : 
                    base(tableName) {
            }
            
            protected ShareTableDef(string tableName, string alias) : 
                    base(tableName, alias) {
            }
            
            /// <summary>
            /// ShareId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ShareId {
                get {
                    if (Object.ReferenceEquals(_shareId, null)) {
                        _shareId = new Int64APColumnDef(this, "ShareId", false);
                        _shareId.Display = "梯队共享ID";
                    }
                    return _shareId;
                }
            }
            
            /// <summary>
            /// UserId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef UserId {
                get {
                    if (Object.ReferenceEquals(_userId, null)) {
                        _userId = new Int64APColumnDef(this, "UserId", false);
                        _userId.Display = "共享者ID";
                    }
                    return _userId;
                }
            }
            
            /// <summary>
            /// ItemId ColumnDef
            /// </summary>
            public virtual Int64APColumnDef ItemId {
                get {
                    if (Object.ReferenceEquals(_itemId, null)) {
                        _itemId = new Int64APColumnDef(this, "ItemId", false);
                        _itemId.Display = "共享项ID";
                    }
                    return _itemId;
                }
            }
            
            /// <summary>
            /// Title ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Title {
                get {
                    if (Object.ReferenceEquals(_title, null)) {
                        _title = new StringAPColumnDef(this, "Title", false, 1000);
                        _title.Display = "共享标题/内容";
                    }
                    return _title;
                }
            }
            
            /// <summary>
            /// ParentType ColumnDef
            /// </summary>
            public virtual StringAPColumnDef ParentType {
                get {
                    if (Object.ReferenceEquals(_parentType, null)) {
                        _parentType = new StringAPColumnDef(this, "ParentType", false, 255);
                        _parentType.Display = "父共享类型";
                    }
                    return _parentType;
                }
            }
            
            /// <summary>
            /// Type ColumnDef
            /// </summary>
            public virtual StringAPColumnDef Type {
                get {
                    if (Object.ReferenceEquals(_type, null)) {
                        _type = new StringAPColumnDef(this, "Type", false, 255);
                        _type.Display = "共享类型";
                    }
                    return _type;
                }
            }
            
            /// <summary>
            /// CreateDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef CreateDate {
                get {
                    if (Object.ReferenceEquals(_createDate, null)) {
                        _createDate = new DateTimeAPColumnDef(this, "CreateDate", false);
                        _createDate.Display = "创建时间";
                    }
                    return _createDate;
                }
            }
            
            /// <summary>
            /// PubishDate ColumnDef
            /// </summary>
            public virtual DateTimeAPColumnDef PubishDate {
                get {
                    if (Object.ReferenceEquals(_pubishDate, null)) {
                        _pubishDate = new DateTimeAPColumnDef(this, "PubishDate", false);
                        _pubishDate.Display = "发布时间";
                    }
                    return _pubishDate;
                }
            }
            
            /// <summary>
            /// Default Index
            /// </summary>
            public virtual APSqlOrderPhrase DefaultOrder {
                get {
                    return null;
                }
            }
            
            /// <summary>
            /// Create a alias table
            /// </summary>
            public virtual ShareTableDef As(string name) {
                return new ShareTableDef("Share", name);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual void Fullup(IDataReader reader, Share data, bool throwIfValidColumnName) {
                data.ShareId = ShareId.GetValue<long>(reader, throwIfValidColumnName);
                data.UserId = UserId.GetValue<long>(reader, throwIfValidColumnName);
                data.ItemId = ItemId.GetValue<long>(reader, throwIfValidColumnName);
                data.Title = Title.GetValue<string>(reader, throwIfValidColumnName);
                data.ParentType = ParentType.GetValue<string>(reader, throwIfValidColumnName);
                data.Type = Type.GetValue<string>(reader, throwIfValidColumnName);
                data.CreateDate = CreateDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
                data.PubishDate = PubishDate.GetValue<System.DateTime>(reader, throwIfValidColumnName);
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Share Map(IDataReader reader) {
                Share data = new Share();
                Fullup(reader, data, true);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual Share TolerantMap(IDataReader reader) {
                Share data = new Share();
                Fullup(reader, data, false);
                return data;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Share> MapList(IDataReader reader) {
                List<Share> list = new List<Share>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(Map(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
            
            /// <summary>
            /// 填充数据。
            /// </summary>
            public virtual List<Share> TolerantMapList(IDataReader reader) {
                List<Share> list = new List<Share>();
                try {
                    for (; reader.Read(); ) {
                        list.Add(TolerantMap(reader));
                    }
                }
                finally {
                    reader.Close();
                }
                return list;
            }
        }
    }
    
    /// <summary>
    /// APDBDef 是一个自动生成的具有 Partial 修饰的类，用于定义所有 从 APDal 继承来的 Dal 类。你可以添加同名的 Partial 类来扩充功能。
    /// </summary>
    public partial class APDalDef {
        
        /// <summary>
        /// 选项列表 DalBase
        /// </summary>
        public partial class PicklistDalBase : APDal {
            
            public PicklistDalBase() {
            }
            
            public PicklistDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Picklist data) {
                var query = APQuery.insert(APDBDef.Picklist).values(APDBDef.Picklist.PicklistId.SetValue(data.PicklistId), APDBDef.Picklist.InnerKey.SetValue(data.InnerKey), APDBDef.Picklist.Name.SetValue(data.Name), APDBDef.Picklist.Adjustable.SetValue(data.Adjustable), APDBDef.Picklist.Strengthen.SetValue(data.Strengthen), APDBDef.Picklist.Description.SetValue(data.Description));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Picklist data) {
                var query = APQuery.update(APDBDef.Picklist).values(APDBDef.Picklist.InnerKey.SetValue(data.InnerKey), APDBDef.Picklist.Name.SetValue(data.Name), APDBDef.Picklist.Adjustable.SetValue(data.Adjustable), APDBDef.Picklist.Strengthen.SetValue(data.Strengthen), APDBDef.Picklist.Description.SetValue(data.Description)).where((APDBDef.Picklist.PicklistId == data.PicklistId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long picklistId, Object metadata) {
                var query = APQuery.update(APDBDef.Picklist).values(APSqlSetPhraseSelector.Select(APDBDef.Picklist, metadata)).where((APDBDef.Picklist.PicklistId == picklistId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long picklistId) {
                var query = APQuery.delete(APDBDef.Picklist).where((APDBDef.Picklist.PicklistId == picklistId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Picklist).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Picklist.Asterisk.Count()).from(APDBDef.Picklist).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Picklist PrimaryGet(long picklistId) {
                var query = APQuery.select(APDBDef.Picklist.Asterisk).from(APDBDef.Picklist).where((APDBDef.Picklist.PicklistId == picklistId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Picklist.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Picklist> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Picklist.Asterisk).from(APDBDef.Picklist);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Picklist.PicklistId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Picklist.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Picklist> GetInitData() {
                return new List<Picklist>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Picklist> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Picklist data = list[i];
                    if ((PrimaryGet(data.PicklistId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 选项列表 Dal
        /// </summary>
        public partial class PicklistDal : PicklistDalBase {
            
            public PicklistDal() {
            }
            
            public PicklistDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 选项列表项 DalBase
        /// </summary>
        public partial class PicklistItemDalBase : APDal {
            
            public PicklistItemDalBase() {
            }
            
            public PicklistItemDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(PicklistItem data) {
                var query = APQuery.insert(APDBDef.PicklistItem).values(APDBDef.PicklistItem.PicklistItemId.SetValue(data.PicklistItemId), APDBDef.PicklistItem.PicklistId.SetValue(data.PicklistId), APDBDef.PicklistItem.Name.SetValue(data.Name), APDBDef.PicklistItem.StrengthenValue.SetValue(data.StrengthenValue), APDBDef.PicklistItem.Code.SetValue(data.Code), APDBDef.PicklistItem.IsDefault.SetValue(data.IsDefault));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(PicklistItem data) {
                var query = APQuery.update(APDBDef.PicklistItem).values(APDBDef.PicklistItem.Name.SetValue(data.Name), APDBDef.PicklistItem.StrengthenValue.SetValue(data.StrengthenValue), APDBDef.PicklistItem.Code.SetValue(data.Code), APDBDef.PicklistItem.IsDefault.SetValue(data.IsDefault)).where((APDBDef.PicklistItem.PicklistItemId == data.PicklistItemId), (APDBDef.PicklistItem.PicklistId == data.PicklistId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long picklistItemId, long picklistId, Object metadata) {
                var query = APQuery.update(APDBDef.PicklistItem).values(APSqlSetPhraseSelector.Select(APDBDef.PicklistItem, metadata)).where((APDBDef.PicklistItem.PicklistItemId == picklistItemId), (APDBDef.PicklistItem.PicklistId == picklistId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long picklistItemId, long picklistId) {
                var query = APQuery.delete(APDBDef.PicklistItem).where((APDBDef.PicklistItem.PicklistItemId == picklistItemId), (APDBDef.PicklistItem.PicklistId == picklistId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.PicklistItem).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.PicklistItem.Asterisk.Count()).from(APDBDef.PicklistItem).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual PicklistItem PrimaryGet(long picklistItemId, long picklistId) {
                var query = APQuery.select(APDBDef.PicklistItem.Asterisk).from(APDBDef.PicklistItem).where((APDBDef.PicklistItem.PicklistItemId == picklistItemId), (APDBDef.PicklistItem.PicklistId == picklistId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.PicklistItem.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<PicklistItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.PicklistItem.Asterisk).from(APDBDef.PicklistItem);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.PicklistItem.PicklistItemId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.PicklistItem.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<PicklistItem> GetInitData() {
                return new List<PicklistItem>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<PicklistItem> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    PicklistItem data = list[i];
                    if ((PrimaryGet(data.PicklistItemId, data.PicklistId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 选项列表项 Dal
        /// </summary>
        public partial class PicklistItemDal : PicklistItemDalBase {
            
            public PicklistItemDal() {
            }
            
            public PicklistItemDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 学校基础数据表 DalBase
        /// </summary>
        public partial class School_InfoDalBase : APDal {
            
            public School_InfoDalBase() {
            }
            
            public School_InfoDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(School_Info data) {
                var query = APQuery.insert(APDBDef.School_Info).values(APDBDef.School_Info.id.SetValue(data.id), APDBDef.School_Info.xxmc.SetValue(data.xxmc), APDBDef.School_Info.xxdm.SetValue(data.xxdm));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(School_Info data) {
                var query = APQuery.update(APDBDef.School_Info).values(APDBDef.School_Info.xxmc.SetValue(data.xxmc), APDBDef.School_Info.xxdm.SetValue(data.xxdm)).where((APDBDef.School_Info.id == data.id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(string id, Object metadata) {
                var query = APQuery.update(APDBDef.School_Info).values(APSqlSetPhraseSelector.Select(APDBDef.School_Info, metadata)).where((APDBDef.School_Info.id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(string id) {
                var query = APQuery.delete(APDBDef.School_Info).where((APDBDef.School_Info.id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.School_Info).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.School_Info.Asterisk.Count()).from(APDBDef.School_Info).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual School_Info PrimaryGet(string id) {
                var query = APQuery.select(APDBDef.School_Info.Asterisk).from(APDBDef.School_Info).where((APDBDef.School_Info.id == id));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.School_Info.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<School_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.School_Info.Asterisk).from(APDBDef.School_Info);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.School_Info.id);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.School_Info.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<School_Info> GetInitData() {
                return new List<School_Info>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<School_Info> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    School_Info data = list[i];
                    if ((PrimaryGet(data.id) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 学校基础数据表 Dal
        /// </summary>
        public partial class School_InfoDal : School_InfoDalBase {
            
            public School_InfoDal() {
            }
            
            public School_InfoDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 教职工基础数据表 DalBase
        /// </summary>
        public partial class Staff_InfoDalBase : APDal {
            
            public Staff_InfoDalBase() {
            }
            
            public Staff_InfoDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Staff_Info data) {
                var query = APQuery.insert(APDBDef.Staff_Info).values(APDBDef.Staff_Info.id.SetValue(data.id), APDBDef.Staff_Info.yhm.SetValue(data.yhm), APDBDef.Staff_Info.xxdm.SetValue(data.xxdm), APDBDef.Staff_Info.xm.SetValue(data.xm), APDBDef.Staff_Info.sfzjh.SetValue(data.sfzjh), APDBDef.Staff_Info.sxh.SetValue(data.sxh), APDBDef.Staff_Info.csrq.SetValue(data.csrq), APDBDef.Staff_Info.xb.SetValue(data.xb), APDBDef.Staff_Info.xl.SetValue(data.xl), APDBDef.Staff_Info.xw.SetValue(data.xw), APDBDef.Staff_Info.byxx.SetValue(data.byxx), APDBDef.Staff_Info.zy.SetValue(data.zy), APDBDef.Staff_Info.zw.SetValue(data.zw), APDBDef.Staff_Info.zc.SetValue(data.zc), APDBDef.Staff_Info.rjxk.SetValue(data.rjxk), APDBDef.Staff_Info.dw.SetValue(data.dw));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Staff_Info data) {
                var query = APQuery.update(APDBDef.Staff_Info).values(APDBDef.Staff_Info.yhm.SetValue(data.yhm), APDBDef.Staff_Info.xxdm.SetValue(data.xxdm), APDBDef.Staff_Info.xm.SetValue(data.xm), APDBDef.Staff_Info.sfzjh.SetValue(data.sfzjh), APDBDef.Staff_Info.sxh.SetValue(data.sxh), APDBDef.Staff_Info.csrq.SetValue(data.csrq), APDBDef.Staff_Info.xb.SetValue(data.xb), APDBDef.Staff_Info.xl.SetValue(data.xl), APDBDef.Staff_Info.xw.SetValue(data.xw), APDBDef.Staff_Info.byxx.SetValue(data.byxx), APDBDef.Staff_Info.zy.SetValue(data.zy), APDBDef.Staff_Info.zw.SetValue(data.zw), APDBDef.Staff_Info.zc.SetValue(data.zc), APDBDef.Staff_Info.rjxk.SetValue(data.rjxk), APDBDef.Staff_Info.dw.SetValue(data.dw)).where((APDBDef.Staff_Info.id == data.id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(string id, Object metadata) {
                var query = APQuery.update(APDBDef.Staff_Info).values(APSqlSetPhraseSelector.Select(APDBDef.Staff_Info, metadata)).where((APDBDef.Staff_Info.id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(string id) {
                var query = APQuery.delete(APDBDef.Staff_Info).where((APDBDef.Staff_Info.id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Staff_Info).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Staff_Info.Asterisk.Count()).from(APDBDef.Staff_Info).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Staff_Info PrimaryGet(string id) {
                var query = APQuery.select(APDBDef.Staff_Info.Asterisk).from(APDBDef.Staff_Info).where((APDBDef.Staff_Info.id == id));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Staff_Info.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Staff_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Staff_Info.Asterisk).from(APDBDef.Staff_Info);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Staff_Info.id);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Staff_Info.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Staff_Info> GetInitData() {
                return new List<Staff_Info>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Staff_Info> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Staff_Info data = list[i];
                    if ((PrimaryGet(data.id) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 教职工基础数据表 Dal
        /// </summary>
        public partial class Staff_InfoDal : Staff_InfoDalBase {
            
            public Staff_InfoDal() {
            }
            
            public Staff_InfoDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 用户 DalBase
        /// </summary>
        public partial class BzUserDalBase : APDal {
            
            public BzUserDalBase() {
            }
            
            public BzUserDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(BzUser data) {
                if ((data.Id == 0)) {
                    data.Id = ((long)(GetNewId(APDBDef.BzUser.Id)));
                }
                var query = APQuery.insert(APDBDef.BzUser).values(APDBDef.BzUser.Id.SetValue(data.Id), APDBDef.BzUser.UserName.SetValue(data.UserName), APDBDef.BzUser.PasswordHash.SetValue(data.PasswordHash), APDBDef.BzUser.SecurityStamp.SetValue(data.SecurityStamp), APDBDef.BzUser.Email.SetValue(data.Email), APDBDef.BzUser.EmailConfirmed.SetValue(data.EmailConfirmed), APDBDef.BzUser.PhoneNumber.SetValue(data.PhoneNumber), APDBDef.BzUser.PhoneNumberConfirmed.SetValue(data.PhoneNumberConfirmed), APDBDef.BzUser.TwoFactorEnabled.SetValue(data.TwoFactorEnabled), APDBDef.BzUser.LockoutEndDtc.SetValue(data.LockoutEndDtc), APDBDef.BzUser.LockoutEnabled.SetValue(data.LockoutEnabled), APDBDef.BzUser.AccessFailedCount.SetValue(data.AccessFailedCount), APDBDef.BzUser.Actived.SetValue(data.Actived));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(BzUser data) {
                var query = APQuery.update(APDBDef.BzUser).values(APDBDef.BzUser.UserName.SetValue(data.UserName), APDBDef.BzUser.PasswordHash.SetValue(data.PasswordHash), APDBDef.BzUser.SecurityStamp.SetValue(data.SecurityStamp), APDBDef.BzUser.Email.SetValue(data.Email), APDBDef.BzUser.EmailConfirmed.SetValue(data.EmailConfirmed), APDBDef.BzUser.PhoneNumber.SetValue(data.PhoneNumber), APDBDef.BzUser.PhoneNumberConfirmed.SetValue(data.PhoneNumberConfirmed), APDBDef.BzUser.TwoFactorEnabled.SetValue(data.TwoFactorEnabled), APDBDef.BzUser.LockoutEndDtc.SetValue(data.LockoutEndDtc), APDBDef.BzUser.LockoutEnabled.SetValue(data.LockoutEnabled), APDBDef.BzUser.AccessFailedCount.SetValue(data.AccessFailedCount), APDBDef.BzUser.Actived.SetValue(data.Actived)).where((APDBDef.BzUser.Id == data.Id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long id, Object metadata) {
                var query = APQuery.update(APDBDef.BzUser).values(APSqlSetPhraseSelector.Select(APDBDef.BzUser, metadata)).where((APDBDef.BzUser.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long id) {
                var query = APQuery.delete(APDBDef.BzUser).where((APDBDef.BzUser.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.BzUser).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.BzUser.Asterisk.Count()).from(APDBDef.BzUser).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual BzUser PrimaryGet(long id) {
                var query = APQuery.select(APDBDef.BzUser.Asterisk).from(APDBDef.BzUser).where((APDBDef.BzUser.Id == id));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.BzUser.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<BzUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.BzUser.Asterisk).from(APDBDef.BzUser);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.BzUser.Id);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.BzUser.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<BzUser> GetInitData() {
                return new List<BzUser>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<BzUser> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    BzUser data = list[i];
                    if ((PrimaryGet(data.Id) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 用户 Dal
        /// </summary>
        public partial class BzUserDal : BzUserDalBase {
            
            public BzUserDal() {
            }
            
            public BzUserDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// UserClaim DalBase
        /// </summary>
        public partial class BzUserClaimDalBase : APDal {
            
            public BzUserClaimDalBase() {
            }
            
            public BzUserClaimDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(BzUserClaim data) {
                if ((data.Id == 0)) {
                    data.Id = ((int)(GetNewId(APDBDef.BzUserClaim.Id)));
                }
                var query = APQuery.insert(APDBDef.BzUserClaim).values(APDBDef.BzUserClaim.Id.SetValue(data.Id), APDBDef.BzUserClaim.UserId.SetValue(data.UserId), APDBDef.BzUserClaim.ClaimType.SetValue(data.ClaimType), APDBDef.BzUserClaim.ClaimValue.SetValue(data.ClaimValue));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(BzUserClaim data) {
                var query = APQuery.update(APDBDef.BzUserClaim).values(APDBDef.BzUserClaim.UserId.SetValue(data.UserId), APDBDef.BzUserClaim.ClaimType.SetValue(data.ClaimType), APDBDef.BzUserClaim.ClaimValue.SetValue(data.ClaimValue)).where((APDBDef.BzUserClaim.Id == data.Id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(int id, Object metadata) {
                var query = APQuery.update(APDBDef.BzUserClaim).values(APSqlSetPhraseSelector.Select(APDBDef.BzUserClaim, metadata)).where((APDBDef.BzUserClaim.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(int id) {
                var query = APQuery.delete(APDBDef.BzUserClaim).where((APDBDef.BzUserClaim.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.BzUserClaim).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.BzUserClaim.Asterisk.Count()).from(APDBDef.BzUserClaim).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual BzUserClaim PrimaryGet(int id) {
                var query = APQuery.select(APDBDef.BzUserClaim.Asterisk).from(APDBDef.BzUserClaim).where((APDBDef.BzUserClaim.Id == id));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.BzUserClaim.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<BzUserClaim> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.BzUserClaim.Asterisk).from(APDBDef.BzUserClaim);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.BzUserClaim.Id);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.BzUserClaim.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<BzUserClaim> GetInitData() {
                return new List<BzUserClaim>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<BzUserClaim> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    BzUserClaim data = list[i];
                    if ((PrimaryGet(data.Id) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// UserClaim Dal
        /// </summary>
        public partial class BzUserClaimDal : BzUserClaimDalBase {
            
            public BzUserClaimDal() {
            }
            
            public BzUserClaimDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 用户简档 DalBase
        /// </summary>
        public partial class BzUserProfileDalBase : APDal {
            
            public BzUserProfileDalBase() {
            }
            
            public BzUserProfileDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(BzUserProfile data) {
                var query = APQuery.insert(APDBDef.BzUserProfile).values(APDBDef.BzUserProfile.UserId.SetValue(data.UserId), APDBDef.BzUserProfile.UUID.SetValue(data.UUID), APDBDef.BzUserProfile.CompanyId.SetValue(data.CompanyId), APDBDef.BzUserProfile.UserName.SetValue(data.UserName), APDBDef.BzUserProfile.UserType.SetValue(data.UserType), APDBDef.BzUserProfile.RealName.SetValue(data.RealName), APDBDef.BzUserProfile.IDCard.SetValue(data.IDCard), APDBDef.BzUserProfile.TrainNo.SetValue(data.TrainNo), APDBDef.BzUserProfile.GenderPKID.SetValue(data.GenderPKID), APDBDef.BzUserProfile.Birthday.SetValue(data.Birthday), APDBDef.BzUserProfile.PoliticalStatusPKID.SetValue(data.PoliticalStatusPKID), APDBDef.BzUserProfile.NationalityPKID.SetValue(data.NationalityPKID), APDBDef.BzUserProfile.EduSubjectPKID.SetValue(data.EduSubjectPKID), APDBDef.BzUserProfile.DeclareSubjectPKID.SetValue(data.DeclareSubjectPKID), APDBDef.BzUserProfile.EduStagePKID.SetValue(data.EduStagePKID), APDBDef.BzUserProfile.JobDate.SetValue(data.JobDate), APDBDef.BzUserProfile.SkillTitlePKID.SetValue(data.SkillTitlePKID), APDBDef.BzUserProfile.SkillDate.SetValue(data.SkillDate), APDBDef.BzUserProfile.CompanyName.SetValue(data.CompanyName), APDBDef.BzUserProfile.CompanyNameOuter.SetValue(data.CompanyNameOuter), APDBDef.BzUserProfile.Companyaddress.SetValue(data.Companyaddress), APDBDef.BzUserProfile.RankTitlePKID.SetValue(data.RankTitlePKID), APDBDef.BzUserProfile.CourseCountPerWeek.SetValue(data.CourseCountPerWeek), APDBDef.BzUserProfile.Hiredate.SetValue(data.Hiredate), APDBDef.BzUserProfile.EduBgPKID.SetValue(data.EduBgPKID), APDBDef.BzUserProfile.EduDegreePKID.SetValue(data.EduDegreePKID), APDBDef.BzUserProfile.GraduateSchool.SetValue(data.GraduateSchool), APDBDef.BzUserProfile.GraduateDate.SetValue(data.GraduateDate), APDBDef.BzUserProfile.Phonemobile.SetValue(data.Phonemobile), APDBDef.BzUserProfile.Email.SetValue(data.Email), APDBDef.BzUserProfile.Phone.SetValue(data.Phone), APDBDef.BzUserProfile.Dynamic1.SetValue(data.Dynamic1), APDBDef.BzUserProfile.Dynamic2.SetValue(data.Dynamic2), APDBDef.BzUserProfile.Dynamic3.SetValue(data.Dynamic3), APDBDef.BzUserProfile.Dynamic4.SetValue(data.Dynamic4), APDBDef.BzUserProfile.Dynamic5.SetValue(data.Dynamic5), APDBDef.BzUserProfile.PeriodId.SetValue(data.PeriodId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(BzUserProfile data) {
                var query = APQuery.update(APDBDef.BzUserProfile).values(APDBDef.BzUserProfile.UUID.SetValue(data.UUID), APDBDef.BzUserProfile.CompanyId.SetValue(data.CompanyId), APDBDef.BzUserProfile.UserName.SetValue(data.UserName), APDBDef.BzUserProfile.UserType.SetValue(data.UserType), APDBDef.BzUserProfile.RealName.SetValue(data.RealName), APDBDef.BzUserProfile.IDCard.SetValue(data.IDCard), APDBDef.BzUserProfile.TrainNo.SetValue(data.TrainNo), APDBDef.BzUserProfile.GenderPKID.SetValue(data.GenderPKID), APDBDef.BzUserProfile.Birthday.SetValue(data.Birthday), APDBDef.BzUserProfile.PoliticalStatusPKID.SetValue(data.PoliticalStatusPKID), APDBDef.BzUserProfile.NationalityPKID.SetValue(data.NationalityPKID), APDBDef.BzUserProfile.EduSubjectPKID.SetValue(data.EduSubjectPKID), APDBDef.BzUserProfile.DeclareSubjectPKID.SetValue(data.DeclareSubjectPKID), APDBDef.BzUserProfile.EduStagePKID.SetValue(data.EduStagePKID), APDBDef.BzUserProfile.JobDate.SetValue(data.JobDate), APDBDef.BzUserProfile.SkillTitlePKID.SetValue(data.SkillTitlePKID), APDBDef.BzUserProfile.SkillDate.SetValue(data.SkillDate), APDBDef.BzUserProfile.CompanyName.SetValue(data.CompanyName), APDBDef.BzUserProfile.CompanyNameOuter.SetValue(data.CompanyNameOuter), APDBDef.BzUserProfile.Companyaddress.SetValue(data.Companyaddress), APDBDef.BzUserProfile.RankTitlePKID.SetValue(data.RankTitlePKID), APDBDef.BzUserProfile.CourseCountPerWeek.SetValue(data.CourseCountPerWeek), APDBDef.BzUserProfile.Hiredate.SetValue(data.Hiredate), APDBDef.BzUserProfile.EduBgPKID.SetValue(data.EduBgPKID), APDBDef.BzUserProfile.EduDegreePKID.SetValue(data.EduDegreePKID), APDBDef.BzUserProfile.GraduateSchool.SetValue(data.GraduateSchool), APDBDef.BzUserProfile.GraduateDate.SetValue(data.GraduateDate), APDBDef.BzUserProfile.Phonemobile.SetValue(data.Phonemobile), APDBDef.BzUserProfile.Email.SetValue(data.Email), APDBDef.BzUserProfile.Phone.SetValue(data.Phone), APDBDef.BzUserProfile.Dynamic1.SetValue(data.Dynamic1), APDBDef.BzUserProfile.Dynamic2.SetValue(data.Dynamic2), APDBDef.BzUserProfile.Dynamic3.SetValue(data.Dynamic3), APDBDef.BzUserProfile.Dynamic4.SetValue(data.Dynamic4), APDBDef.BzUserProfile.Dynamic5.SetValue(data.Dynamic5), APDBDef.BzUserProfile.PeriodId.SetValue(data.PeriodId)).where((APDBDef.BzUserProfile.UserId == data.UserId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long userId, Object metadata) {
                var query = APQuery.update(APDBDef.BzUserProfile).values(APSqlSetPhraseSelector.Select(APDBDef.BzUserProfile, metadata)).where((APDBDef.BzUserProfile.UserId == userId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long userId) {
                var query = APQuery.delete(APDBDef.BzUserProfile).where((APDBDef.BzUserProfile.UserId == userId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.BzUserProfile).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.BzUserProfile.Asterisk.Count()).from(APDBDef.BzUserProfile).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual BzUserProfile PrimaryGet(long userId) {
                var query = APQuery.select(APDBDef.BzUserProfile.Asterisk).from(APDBDef.BzUserProfile).where((APDBDef.BzUserProfile.UserId == userId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.BzUserProfile.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<BzUserProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.BzUserProfile.Asterisk).from(APDBDef.BzUserProfile);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.BzUserProfile.UserId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.BzUserProfile.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<BzUserProfile> GetInitData() {
                return new List<BzUserProfile>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<BzUserProfile> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    BzUserProfile data = list[i];
                    if ((PrimaryGet(data.UserId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 用户简档 Dal
        /// </summary>
        public partial class BzUserProfileDal : BzUserProfileDalBase {
            
            public BzUserProfileDal() {
            }
            
            public BzUserProfileDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 角色 DalBase
        /// </summary>
        public partial class BzRoleDalBase : APDal {
            
            public BzRoleDalBase() {
            }
            
            public BzRoleDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(BzRole data) {
                if ((data.Id == 0)) {
                    data.Id = ((long)(GetNewId(APDBDef.BzRole.Id)));
                }
                var query = APQuery.insert(APDBDef.BzRole).values(APDBDef.BzRole.Id.SetValue(data.Id), APDBDef.BzRole.Name.SetValue(data.Name), APDBDef.BzRole.NormalizedName.SetValue(data.NormalizedName));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(BzRole data) {
                var query = APQuery.update(APDBDef.BzRole).values(APDBDef.BzRole.Name.SetValue(data.Name), APDBDef.BzRole.NormalizedName.SetValue(data.NormalizedName)).where((APDBDef.BzRole.Id == data.Id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long id, Object metadata) {
                var query = APQuery.update(APDBDef.BzRole).values(APSqlSetPhraseSelector.Select(APDBDef.BzRole, metadata)).where((APDBDef.BzRole.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long id) {
                var query = APQuery.delete(APDBDef.BzRole).where((APDBDef.BzRole.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.BzRole).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.BzRole.Asterisk.Count()).from(APDBDef.BzRole).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual BzRole PrimaryGet(long id) {
                var query = APQuery.select(APDBDef.BzRole.Asterisk).from(APDBDef.BzRole).where((APDBDef.BzRole.Id == id));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.BzRole.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<BzRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.BzRole.Asterisk).from(APDBDef.BzRole);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.BzRole.Id);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.BzRole.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<BzRole> GetInitData() {
                return new List<BzRole>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<BzRole> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    BzRole data = list[i];
                    if ((PrimaryGet(data.Id) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 角色 Dal
        /// </summary>
        public partial class BzRoleDal : BzRoleDalBase {
            
            public BzRoleDal() {
            }
            
            public BzRoleDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 用户角色 DalBase
        /// </summary>
        public partial class BzUserRoleDalBase : APDal {
            
            public BzUserRoleDalBase() {
            }
            
            public BzUserRoleDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(BzUserRole data) {
                if ((data.UserRoleId == 0)) {
                    data.UserRoleId = ((long)(GetNewId(APDBDef.BzUserRole.UserRoleId)));
                }
                var query = APQuery.insert(APDBDef.BzUserRole).values(APDBDef.BzUserRole.UserRoleId.SetValue(data.UserRoleId), APDBDef.BzUserRole.UserId.SetValue(data.UserId), APDBDef.BzUserRole.RoleId.SetValue(data.RoleId), APDBDef.BzUserRole.ScopeType.SetValue(data.ScopeType), APDBDef.BzUserRole.ScopeId.SetValue(data.ScopeId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(BzUserRole data) {
                var query = APQuery.update(APDBDef.BzUserRole).values(APDBDef.BzUserRole.UserId.SetValue(data.UserId), APDBDef.BzUserRole.RoleId.SetValue(data.RoleId), APDBDef.BzUserRole.ScopeType.SetValue(data.ScopeType), APDBDef.BzUserRole.ScopeId.SetValue(data.ScopeId)).where((APDBDef.BzUserRole.UserRoleId == data.UserRoleId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long userRoleId, Object metadata) {
                var query = APQuery.update(APDBDef.BzUserRole).values(APSqlSetPhraseSelector.Select(APDBDef.BzUserRole, metadata)).where((APDBDef.BzUserRole.UserRoleId == userRoleId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long userRoleId) {
                var query = APQuery.delete(APDBDef.BzUserRole).where((APDBDef.BzUserRole.UserRoleId == userRoleId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.BzUserRole).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.BzUserRole.Asterisk.Count()).from(APDBDef.BzUserRole).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual BzUserRole PrimaryGet(long userRoleId) {
                var query = APQuery.select(APDBDef.BzUserRole.Asterisk).from(APDBDef.BzUserRole).where((APDBDef.BzUserRole.UserRoleId == userRoleId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.BzUserRole.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<BzUserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.BzUserRole.Asterisk).from(APDBDef.BzUserRole);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.BzUserRole.UserRoleId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.BzUserRole.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<BzUserRole> GetInitData() {
                return new List<BzUserRole>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<BzUserRole> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    BzUserRole data = list[i];
                    if ((PrimaryGet(data.UserRoleId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 用户角色 Dal
        /// </summary>
        public partial class BzUserRoleDal : BzUserRoleDalBase {
            
            public BzUserRoleDal() {
            }
            
            public BzUserRoleDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 用户信息修改周期表 DalBase
        /// </summary>
        public partial class ProfileModifyPeriodDalBase : APDal {
            
            public ProfileModifyPeriodDalBase() {
            }
            
            public ProfileModifyPeriodDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(ProfileModifyPeriod data) {
                if ((data.PeriodId == 0)) {
                    data.PeriodId = ((long)(GetNewId(APDBDef.ProfileModifyPeriod.PeriodId)));
                }
                var query = APQuery.insert(APDBDef.ProfileModifyPeriod).values(APDBDef.ProfileModifyPeriod.PeriodId.SetValue(data.PeriodId), APDBDef.ProfileModifyPeriod.Name.SetValue(data.Name), APDBDef.ProfileModifyPeriod.BeginDate.SetValue(data.BeginDate), APDBDef.ProfileModifyPeriod.EndDate.SetValue(data.EndDate), APDBDef.ProfileModifyPeriod.IsCurrent.SetValue(data.IsCurrent));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(ProfileModifyPeriod data) {
                var query = APQuery.update(APDBDef.ProfileModifyPeriod).values(APDBDef.ProfileModifyPeriod.Name.SetValue(data.Name), APDBDef.ProfileModifyPeriod.BeginDate.SetValue(data.BeginDate), APDBDef.ProfileModifyPeriod.EndDate.SetValue(data.EndDate), APDBDef.ProfileModifyPeriod.IsCurrent.SetValue(data.IsCurrent)).where((APDBDef.ProfileModifyPeriod.PeriodId == data.PeriodId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long periodId, Object metadata) {
                var query = APQuery.update(APDBDef.ProfileModifyPeriod).values(APSqlSetPhraseSelector.Select(APDBDef.ProfileModifyPeriod, metadata)).where((APDBDef.ProfileModifyPeriod.PeriodId == periodId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long periodId) {
                var query = APQuery.delete(APDBDef.ProfileModifyPeriod).where((APDBDef.ProfileModifyPeriod.PeriodId == periodId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.ProfileModifyPeriod).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.ProfileModifyPeriod.Asterisk.Count()).from(APDBDef.ProfileModifyPeriod).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual ProfileModifyPeriod PrimaryGet(long periodId) {
                var query = APQuery.select(APDBDef.ProfileModifyPeriod.Asterisk).from(APDBDef.ProfileModifyPeriod).where((APDBDef.ProfileModifyPeriod.PeriodId == periodId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.ProfileModifyPeriod.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<ProfileModifyPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.ProfileModifyPeriod.Asterisk).from(APDBDef.ProfileModifyPeriod);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.ProfileModifyPeriod.PeriodId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.ProfileModifyPeriod.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<ProfileModifyPeriod> GetInitData() {
                return new List<ProfileModifyPeriod>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<ProfileModifyPeriod> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    ProfileModifyPeriod data = list[i];
                    if ((PrimaryGet(data.PeriodId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 用户信息修改周期表 Dal
        /// </summary>
        public partial class ProfileModifyPeriodDal : ProfileModifyPeriodDalBase {
            
            public ProfileModifyPeriodDal() {
            }
            
            public ProfileModifyPeriodDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 用户简档历史表 DalBase
        /// </summary>
        public partial class BzUserProfileHistoryDalBase : APDal {
            
            public BzUserProfileHistoryDalBase() {
            }
            
            public BzUserProfileHistoryDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(BzUserProfileHistory data) {
                var query = APQuery.insert(APDBDef.BzUserProfileHistory).values(APDBDef.BzUserProfileHistory.UserId.SetValue(data.UserId), APDBDef.BzUserProfileHistory.CompanyId.SetValue(data.CompanyId), APDBDef.BzUserProfileHistory.UserName.SetValue(data.UserName), APDBDef.BzUserProfileHistory.UserType.SetValue(data.UserType), APDBDef.BzUserProfileHistory.RealName.SetValue(data.RealName), APDBDef.BzUserProfileHistory.IDCard.SetValue(data.IDCard), APDBDef.BzUserProfileHistory.TrainNo.SetValue(data.TrainNo), APDBDef.BzUserProfileHistory.GenderPKID.SetValue(data.GenderPKID), APDBDef.BzUserProfileHistory.Birthday.SetValue(data.Birthday), APDBDef.BzUserProfileHistory.PoliticalStatusPKID.SetValue(data.PoliticalStatusPKID), APDBDef.BzUserProfileHistory.NationalityPKID.SetValue(data.NationalityPKID), APDBDef.BzUserProfileHistory.EduSubjectPKID.SetValue(data.EduSubjectPKID), APDBDef.BzUserProfileHistory.EduStagePKID.SetValue(data.EduStagePKID), APDBDef.BzUserProfileHistory.JobDate.SetValue(data.JobDate), APDBDef.BzUserProfileHistory.SkillTitlePKID.SetValue(data.SkillTitlePKID), APDBDef.BzUserProfileHistory.SkillDate.SetValue(data.SkillDate), APDBDef.BzUserProfileHistory.CompanyName.SetValue(data.CompanyName), APDBDef.BzUserProfileHistory.CompanyNameOuter.SetValue(data.CompanyNameOuter), APDBDef.BzUserProfileHistory.Companyaddress.SetValue(data.Companyaddress), APDBDef.BzUserProfileHistory.RankTitlePKID.SetValue(data.RankTitlePKID), APDBDef.BzUserProfileHistory.EduBgPKID.SetValue(data.EduBgPKID), APDBDef.BzUserProfileHistory.EduDegreePKID.SetValue(data.EduDegreePKID), APDBDef.BzUserProfileHistory.GraduateSchool.SetValue(data.GraduateSchool), APDBDef.BzUserProfileHistory.GraduateDate.SetValue(data.GraduateDate), APDBDef.BzUserProfileHistory.Phonemobile.SetValue(data.Phonemobile), APDBDef.BzUserProfileHistory.Email.SetValue(data.Email), APDBDef.BzUserProfileHistory.PeriodId.SetValue(data.PeriodId));
                data.Id = ((long)(Convert.ChangeType(ExecuteScalar(query), typeof(long))));
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(BzUserProfileHistory data) {
                var query = APQuery.update(APDBDef.BzUserProfileHistory).values(APDBDef.BzUserProfileHistory.UserId.SetValue(data.UserId), APDBDef.BzUserProfileHistory.CompanyId.SetValue(data.CompanyId), APDBDef.BzUserProfileHistory.UserName.SetValue(data.UserName), APDBDef.BzUserProfileHistory.UserType.SetValue(data.UserType), APDBDef.BzUserProfileHistory.RealName.SetValue(data.RealName), APDBDef.BzUserProfileHistory.IDCard.SetValue(data.IDCard), APDBDef.BzUserProfileHistory.TrainNo.SetValue(data.TrainNo), APDBDef.BzUserProfileHistory.GenderPKID.SetValue(data.GenderPKID), APDBDef.BzUserProfileHistory.Birthday.SetValue(data.Birthday), APDBDef.BzUserProfileHistory.PoliticalStatusPKID.SetValue(data.PoliticalStatusPKID), APDBDef.BzUserProfileHistory.NationalityPKID.SetValue(data.NationalityPKID), APDBDef.BzUserProfileHistory.EduSubjectPKID.SetValue(data.EduSubjectPKID), APDBDef.BzUserProfileHistory.EduStagePKID.SetValue(data.EduStagePKID), APDBDef.BzUserProfileHistory.JobDate.SetValue(data.JobDate), APDBDef.BzUserProfileHistory.SkillTitlePKID.SetValue(data.SkillTitlePKID), APDBDef.BzUserProfileHistory.SkillDate.SetValue(data.SkillDate), APDBDef.BzUserProfileHistory.CompanyName.SetValue(data.CompanyName), APDBDef.BzUserProfileHistory.CompanyNameOuter.SetValue(data.CompanyNameOuter), APDBDef.BzUserProfileHistory.Companyaddress.SetValue(data.Companyaddress), APDBDef.BzUserProfileHistory.RankTitlePKID.SetValue(data.RankTitlePKID), APDBDef.BzUserProfileHistory.EduBgPKID.SetValue(data.EduBgPKID), APDBDef.BzUserProfileHistory.EduDegreePKID.SetValue(data.EduDegreePKID), APDBDef.BzUserProfileHistory.GraduateSchool.SetValue(data.GraduateSchool), APDBDef.BzUserProfileHistory.GraduateDate.SetValue(data.GraduateDate), APDBDef.BzUserProfileHistory.Phonemobile.SetValue(data.Phonemobile), APDBDef.BzUserProfileHistory.Email.SetValue(data.Email), APDBDef.BzUserProfileHistory.PeriodId.SetValue(data.PeriodId)).where((APDBDef.BzUserProfileHistory.Id == data.Id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long id, Object metadata) {
                var query = APQuery.update(APDBDef.BzUserProfileHistory).values(APSqlSetPhraseSelector.Select(APDBDef.BzUserProfileHistory, metadata)).where((APDBDef.BzUserProfileHistory.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long id) {
                var query = APQuery.delete(APDBDef.BzUserProfileHistory).where((APDBDef.BzUserProfileHistory.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.BzUserProfileHistory).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.BzUserProfileHistory.Asterisk.Count()).from(APDBDef.BzUserProfileHistory).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual BzUserProfileHistory PrimaryGet(long id) {
                var query = APQuery.select(APDBDef.BzUserProfileHistory.Asterisk).from(APDBDef.BzUserProfileHistory).where((APDBDef.BzUserProfileHistory.Id == id));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.BzUserProfileHistory.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<BzUserProfileHistory> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.BzUserProfileHistory.Asterisk).from(APDBDef.BzUserProfileHistory);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.BzUserProfileHistory.Id);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.BzUserProfileHistory.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<BzUserProfileHistory> GetInitData() {
                return new List<BzUserProfileHistory>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<BzUserProfileHistory> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    BzUserProfileHistory data = list[i];
                    if ((PrimaryGet(data.Id) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 用户简档历史表 Dal
        /// </summary>
        public partial class BzUserProfileHistoryDal : BzUserProfileHistoryDalBase {
            
            public BzUserProfileHistoryDal() {
            }
            
            public BzUserProfileHistoryDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报历史表 DalBase
        /// </summary>
        public partial class DeclareBaseHistoryDalBase : APDal {
            
            public DeclareBaseHistoryDalBase() {
            }
            
            public DeclareBaseHistoryDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(DeclareBaseHistory data) {
                var query = APQuery.insert(APDBDef.DeclareBaseHistory).values(APDBDef.DeclareBaseHistory.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareBaseHistory.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.DeclareBaseHistory.DeclareSubjectPKID.SetValue(data.DeclareSubjectPKID), APDBDef.DeclareBaseHistory.DeclareStagePKID.SetValue(data.DeclareStagePKID), APDBDef.DeclareBaseHistory.AllowFlowToSchool.SetValue(data.AllowFlowToSchool), APDBDef.DeclareBaseHistory.AllowFitResearcher.SetValue(data.AllowFitResearcher), APDBDef.DeclareBaseHistory.HasTeam.SetValue(data.HasTeam), APDBDef.DeclareBaseHistory.TeamName.SetValue(data.TeamName), APDBDef.DeclareBaseHistory.MemberCount.SetValue(data.MemberCount), APDBDef.DeclareBaseHistory.ActiveCount.SetValue(data.ActiveCount), APDBDef.DeclareBaseHistory.PeriodId.SetValue(data.PeriodId));
                data.Id = ((long)(Convert.ChangeType(ExecuteScalar(query), typeof(long))));
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(DeclareBaseHistory data) {
                var query = APQuery.update(APDBDef.DeclareBaseHistory).values(APDBDef.DeclareBaseHistory.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareBaseHistory.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.DeclareBaseHistory.DeclareSubjectPKID.SetValue(data.DeclareSubjectPKID), APDBDef.DeclareBaseHistory.DeclareStagePKID.SetValue(data.DeclareStagePKID), APDBDef.DeclareBaseHistory.AllowFlowToSchool.SetValue(data.AllowFlowToSchool), APDBDef.DeclareBaseHistory.AllowFitResearcher.SetValue(data.AllowFitResearcher), APDBDef.DeclareBaseHistory.HasTeam.SetValue(data.HasTeam), APDBDef.DeclareBaseHistory.TeamName.SetValue(data.TeamName), APDBDef.DeclareBaseHistory.MemberCount.SetValue(data.MemberCount), APDBDef.DeclareBaseHistory.ActiveCount.SetValue(data.ActiveCount), APDBDef.DeclareBaseHistory.PeriodId.SetValue(data.PeriodId)).where((APDBDef.DeclareBaseHistory.Id == data.Id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long id, Object metadata) {
                var query = APQuery.update(APDBDef.DeclareBaseHistory).values(APSqlSetPhraseSelector.Select(APDBDef.DeclareBaseHistory, metadata)).where((APDBDef.DeclareBaseHistory.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long id) {
                var query = APQuery.delete(APDBDef.DeclareBaseHistory).where((APDBDef.DeclareBaseHistory.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.DeclareBaseHistory).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.DeclareBaseHistory.Asterisk.Count()).from(APDBDef.DeclareBaseHistory).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual DeclareBaseHistory PrimaryGet(long id) {
                var query = APQuery.select(APDBDef.DeclareBaseHistory.Asterisk).from(APDBDef.DeclareBaseHistory).where((APDBDef.DeclareBaseHistory.Id == id));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.DeclareBaseHistory.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<DeclareBaseHistory> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.DeclareBaseHistory.Asterisk).from(APDBDef.DeclareBaseHistory);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.DeclareBaseHistory.Id);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.DeclareBaseHistory.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<DeclareBaseHistory> GetInitData() {
                return new List<DeclareBaseHistory>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<DeclareBaseHistory> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    DeclareBaseHistory data = list[i];
                    if ((PrimaryGet(data.Id) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报历史表 Dal
        /// </summary>
        public partial class DeclareBaseHistoryDal : DeclareBaseHistoryDalBase {
            
            public DeclareBaseHistoryDal() {
            }
            
            public DeclareBaseHistoryDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 单位 DalBase
        /// </summary>
        public partial class CompanyDalBase : APDal {
            
            public CompanyDalBase() {
            }
            
            public CompanyDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Company data) {
                if ((data.CompanyId == 0)) {
                    data.CompanyId = ((long)(GetNewId(APDBDef.Company.CompanyId)));
                }
                var query = APQuery.insert(APDBDef.Company).values(APDBDef.Company.CompanyId.SetValue(data.CompanyId), APDBDef.Company.CompanyName.SetValue(data.CompanyName));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Company data) {
                var query = APQuery.update(APDBDef.Company).values(APDBDef.Company.CompanyName.SetValue(data.CompanyName)).where((APDBDef.Company.CompanyId == data.CompanyId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long companyId, Object metadata) {
                var query = APQuery.update(APDBDef.Company).values(APSqlSetPhraseSelector.Select(APDBDef.Company, metadata)).where((APDBDef.Company.CompanyId == companyId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long companyId) {
                var query = APQuery.delete(APDBDef.Company).where((APDBDef.Company.CompanyId == companyId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Company).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Company.Asterisk.Count()).from(APDBDef.Company).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Company PrimaryGet(long companyId) {
                var query = APQuery.select(APDBDef.Company.Asterisk).from(APDBDef.Company).where((APDBDef.Company.CompanyId == companyId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Company.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Company> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Company.Asterisk).from(APDBDef.Company);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Company.CompanyId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Company.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Company> GetInitData() {
                return new List<Company>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Company> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Company data = list[i];
                    if ((PrimaryGet(data.CompanyId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 单位 Dal
        /// </summary>
        public partial class CompanyDal : CompanyDalBase {
            
            public CompanyDal() {
            }
            
            public CompanyDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 单位-管理员 DalBase
        /// </summary>
        public partial class CompanyAccesserDalBase : APDal {
            
            public CompanyAccesserDalBase() {
            }
            
            public CompanyAccesserDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(CompanyAccesser data) {
                var query = APQuery.insert(APDBDef.CompanyAccesser).values(APDBDef.CompanyAccesser.CompanyId.SetValue(data.CompanyId), APDBDef.CompanyAccesser.UserId.SetValue(data.UserId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(CompanyAccesser data) {
                var query = APQuery.update(APDBDef.CompanyAccesser).values().where((APDBDef.CompanyAccesser.CompanyId == data.CompanyId), (APDBDef.CompanyAccesser.UserId == data.UserId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long companyId, long userId, Object metadata) {
                var query = APQuery.update(APDBDef.CompanyAccesser).values(APSqlSetPhraseSelector.Select(APDBDef.CompanyAccesser, metadata)).where((APDBDef.CompanyAccesser.CompanyId == companyId), (APDBDef.CompanyAccesser.UserId == userId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long companyId, long userId) {
                var query = APQuery.delete(APDBDef.CompanyAccesser).where((APDBDef.CompanyAccesser.CompanyId == companyId), (APDBDef.CompanyAccesser.UserId == userId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.CompanyAccesser).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.CompanyAccesser.Asterisk.Count()).from(APDBDef.CompanyAccesser).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual CompanyAccesser PrimaryGet(long companyId, long userId) {
                var query = APQuery.select(APDBDef.CompanyAccesser.Asterisk).from(APDBDef.CompanyAccesser).where((APDBDef.CompanyAccesser.CompanyId == companyId), (APDBDef.CompanyAccesser.UserId == userId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.CompanyAccesser.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<CompanyAccesser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.CompanyAccesser.Asterisk).from(APDBDef.CompanyAccesser);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.CompanyAccesser.CompanyId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.CompanyAccesser.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<CompanyAccesser> GetInitData() {
                return new List<CompanyAccesser>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<CompanyAccesser> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    CompanyAccesser data = list[i];
                    if ((PrimaryGet(data.CompanyId, data.UserId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 单位-管理员 Dal
        /// </summary>
        public partial class CompanyAccesserDal : CompanyAccesserDalBase {
            
            public CompanyAccesserDal() {
            }
            
            public CompanyAccesserDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 单位-申报教师 DalBase
        /// </summary>
        public partial class CompanyDeclareDalBase : APDal {
            
            public CompanyDeclareDalBase() {
            }
            
            public CompanyDeclareDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(CompanyDeclare data) {
                var query = APQuery.insert(APDBDef.CompanyDeclare).values(APDBDef.CompanyDeclare.CompanyId.SetValue(data.CompanyId), APDBDef.CompanyDeclare.TeacherId.SetValue(data.TeacherId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(CompanyDeclare data) {
                var query = APQuery.update(APDBDef.CompanyDeclare).values().where((APDBDef.CompanyDeclare.CompanyId == data.CompanyId), (APDBDef.CompanyDeclare.TeacherId == data.TeacherId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long companyId, long teacherId, Object metadata) {
                var query = APQuery.update(APDBDef.CompanyDeclare).values(APSqlSetPhraseSelector.Select(APDBDef.CompanyDeclare, metadata)).where((APDBDef.CompanyDeclare.CompanyId == companyId), (APDBDef.CompanyDeclare.TeacherId == teacherId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long companyId, long teacherId) {
                var query = APQuery.delete(APDBDef.CompanyDeclare).where((APDBDef.CompanyDeclare.CompanyId == companyId), (APDBDef.CompanyDeclare.TeacherId == teacherId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.CompanyDeclare).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.CompanyDeclare.Asterisk.Count()).from(APDBDef.CompanyDeclare).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual CompanyDeclare PrimaryGet(long companyId, long teacherId) {
                var query = APQuery.select(APDBDef.CompanyDeclare.Asterisk).from(APDBDef.CompanyDeclare).where((APDBDef.CompanyDeclare.CompanyId == companyId), (APDBDef.CompanyDeclare.TeacherId == teacherId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.CompanyDeclare.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<CompanyDeclare> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.CompanyDeclare.Asterisk).from(APDBDef.CompanyDeclare);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.CompanyDeclare.CompanyId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.CompanyDeclare.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<CompanyDeclare> GetInitData() {
                return new List<CompanyDeclare>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<CompanyDeclare> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    CompanyDeclare data = list[i];
                    if ((PrimaryGet(data.CompanyId, data.TeacherId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 单位-申报教师 Dal
        /// </summary>
        public partial class CompanyDeclareDal : CompanyDeclareDalBase {
            
            public CompanyDeclareDal() {
            }
            
            public CompanyDeclareDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 权限 DalBase
        /// </summary>
        public partial class BzPermissionDalBase : APDal {
            
            public BzPermissionDalBase() {
            }
            
            public BzPermissionDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(BzPermission data) {
                if ((data.Id == 0)) {
                    data.Id = ((long)(GetNewId(APDBDef.BzPermission.Id)));
                }
                var query = APQuery.insert(APDBDef.BzPermission).values(APDBDef.BzPermission.Id.SetValue(data.Id), APDBDef.BzPermission.Name.SetValue(data.Name), APDBDef.BzPermission.Status.SetValue(data.Status));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(BzPermission data) {
                var query = APQuery.update(APDBDef.BzPermission).values(APDBDef.BzPermission.Name.SetValue(data.Name), APDBDef.BzPermission.Status.SetValue(data.Status)).where((APDBDef.BzPermission.Id == data.Id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long id, Object metadata) {
                var query = APQuery.update(APDBDef.BzPermission).values(APSqlSetPhraseSelector.Select(APDBDef.BzPermission, metadata)).where((APDBDef.BzPermission.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long id) {
                var query = APQuery.delete(APDBDef.BzPermission).where((APDBDef.BzPermission.Id == id));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.BzPermission).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.BzPermission.Asterisk.Count()).from(APDBDef.BzPermission).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual BzPermission PrimaryGet(long id) {
                var query = APQuery.select(APDBDef.BzPermission.Asterisk).from(APDBDef.BzPermission).where((APDBDef.BzPermission.Id == id));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.BzPermission.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<BzPermission> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.BzPermission.Asterisk).from(APDBDef.BzPermission);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.BzPermission.Id);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.BzPermission.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<BzPermission> GetInitData() {
                return new List<BzPermission>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<BzPermission> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    BzPermission data = list[i];
                    if ((PrimaryGet(data.Id) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 权限 Dal
        /// </summary>
        public partial class BzPermissionDal : BzPermissionDalBase {
            
            public BzPermissionDal() {
            }
            
            public BzPermissionDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 角色权限 DalBase
        /// </summary>
        public partial class BzRolePermissionDalBase : APDal {
            
            public BzRolePermissionDalBase() {
            }
            
            public BzRolePermissionDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(BzRolePermission data) {
                if ((data.RolePermissionId == 0)) {
                    data.RolePermissionId = ((long)(GetNewId(APDBDef.BzRolePermission.RolePermissionId)));
                }
                var query = APQuery.insert(APDBDef.BzRolePermission).values(APDBDef.BzRolePermission.RolePermissionId.SetValue(data.RolePermissionId), APDBDef.BzRolePermission.RoleId.SetValue(data.RoleId), APDBDef.BzRolePermission.PermissionId.SetValue(data.PermissionId), APDBDef.BzRolePermission.IsGrant.SetValue(data.IsGrant));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(BzRolePermission data) {
                var query = APQuery.update(APDBDef.BzRolePermission).values(APDBDef.BzRolePermission.RoleId.SetValue(data.RoleId), APDBDef.BzRolePermission.PermissionId.SetValue(data.PermissionId), APDBDef.BzRolePermission.IsGrant.SetValue(data.IsGrant)).where((APDBDef.BzRolePermission.RolePermissionId == data.RolePermissionId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long rolePermissionId, Object metadata) {
                var query = APQuery.update(APDBDef.BzRolePermission).values(APSqlSetPhraseSelector.Select(APDBDef.BzRolePermission, metadata)).where((APDBDef.BzRolePermission.RolePermissionId == rolePermissionId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long rolePermissionId) {
                var query = APQuery.delete(APDBDef.BzRolePermission).where((APDBDef.BzRolePermission.RolePermissionId == rolePermissionId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.BzRolePermission).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.BzRolePermission.Asterisk.Count()).from(APDBDef.BzRolePermission).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual BzRolePermission PrimaryGet(long rolePermissionId) {
                var query = APQuery.select(APDBDef.BzRolePermission.Asterisk).from(APDBDef.BzRolePermission).where((APDBDef.BzRolePermission.RolePermissionId == rolePermissionId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.BzRolePermission.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<BzRolePermission> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.BzRolePermission.Asterisk).from(APDBDef.BzRolePermission);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.BzRolePermission.RolePermissionId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.BzRolePermission.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<BzRolePermission> GetInitData() {
                return new List<BzRolePermission>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<BzRolePermission> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    BzRolePermission data = list[i];
                    if ((PrimaryGet(data.RolePermissionId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 角色权限 Dal
        /// </summary>
        public partial class BzRolePermissionDal : BzRolePermissionDalBase {
            
            public BzRolePermissionDal() {
            }
            
            public BzRolePermissionDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报 DalBase
        /// </summary>
        public partial class DeclareBaseDalBase : APDal {
            
            public DeclareBaseDalBase() {
            }
            
            public DeclareBaseDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(DeclareBase data) {
                var query = APQuery.insert(APDBDef.DeclareBase).values(APDBDef.DeclareBase.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareBase.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.DeclareBase.DeclareSubjectPKID.SetValue(data.DeclareSubjectPKID), APDBDef.DeclareBase.DeclareStagePKID.SetValue(data.DeclareStagePKID), APDBDef.DeclareBase.AllowFlowToSchool.SetValue(data.AllowFlowToSchool), APDBDef.DeclareBase.AllowFitResearcher.SetValue(data.AllowFitResearcher), APDBDef.DeclareBase.HasTeam.SetValue(data.HasTeam), APDBDef.DeclareBase.TeamName.SetValue(data.TeamName), APDBDef.DeclareBase.MemberCount.SetValue(data.MemberCount), APDBDef.DeclareBase.ActiveCount.SetValue(data.ActiveCount), APDBDef.DeclareBase.PeriodId.SetValue(data.PeriodId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(DeclareBase data) {
                var query = APQuery.update(APDBDef.DeclareBase).values(APDBDef.DeclareBase.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.DeclareBase.DeclareSubjectPKID.SetValue(data.DeclareSubjectPKID), APDBDef.DeclareBase.DeclareStagePKID.SetValue(data.DeclareStagePKID), APDBDef.DeclareBase.AllowFlowToSchool.SetValue(data.AllowFlowToSchool), APDBDef.DeclareBase.AllowFitResearcher.SetValue(data.AllowFitResearcher), APDBDef.DeclareBase.HasTeam.SetValue(data.HasTeam), APDBDef.DeclareBase.TeamName.SetValue(data.TeamName), APDBDef.DeclareBase.MemberCount.SetValue(data.MemberCount), APDBDef.DeclareBase.ActiveCount.SetValue(data.ActiveCount), APDBDef.DeclareBase.PeriodId.SetValue(data.PeriodId)).where((APDBDef.DeclareBase.TeacherId == data.TeacherId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long teacherId, Object metadata) {
                var query = APQuery.update(APDBDef.DeclareBase).values(APSqlSetPhraseSelector.Select(APDBDef.DeclareBase, metadata)).where((APDBDef.DeclareBase.TeacherId == teacherId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long teacherId) {
                var query = APQuery.delete(APDBDef.DeclareBase).where((APDBDef.DeclareBase.TeacherId == teacherId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.DeclareBase).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.DeclareBase.Asterisk.Count()).from(APDBDef.DeclareBase).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual DeclareBase PrimaryGet(long teacherId) {
                var query = APQuery.select(APDBDef.DeclareBase.Asterisk).from(APDBDef.DeclareBase).where((APDBDef.DeclareBase.TeacherId == teacherId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.DeclareBase.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<DeclareBase> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.DeclareBase.Asterisk).from(APDBDef.DeclareBase);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.DeclareBase.TeacherId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.DeclareBase.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<DeclareBase> GetInitData() {
                return new List<DeclareBase>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<DeclareBase> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    DeclareBase data = list[i];
                    if ((PrimaryGet(data.TeacherId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报 Dal
        /// </summary>
        public partial class DeclareBaseDal : DeclareBaseDalBase {
            
            public DeclareBaseDal() {
            }
            
            public DeclareBaseDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报-简历 DalBase
        /// </summary>
        public partial class DeclareResumeDalBase : APDal {
            
            public DeclareResumeDalBase() {
            }
            
            public DeclareResumeDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(DeclareResume data) {
                if ((data.DeclareResumeId == 0)) {
                    data.DeclareResumeId = ((long)(GetNewId(APDBDef.DeclareResume.DeclareResumeId)));
                }
                var query = APQuery.insert(APDBDef.DeclareResume).values(APDBDef.DeclareResume.DeclareResumeId.SetValue(data.DeclareResumeId), APDBDef.DeclareResume.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareResume.DateRegion.SetValue(data.DateRegion), APDBDef.DeclareResume.Company.SetValue(data.Company), APDBDef.DeclareResume.Title.SetValue(data.Title), APDBDef.DeclareResume.IsDeclare.SetValue(data.IsDeclare), APDBDef.DeclareResume.CreateDate.SetValue(data.CreateDate), APDBDef.DeclareResume.Creator.SetValue(data.Creator), APDBDef.DeclareResume.ModifyDate.SetValue(data.ModifyDate), APDBDef.DeclareResume.Modifier.SetValue(data.Modifier));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(DeclareResume data) {
                var query = APQuery.update(APDBDef.DeclareResume).values(APDBDef.DeclareResume.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareResume.DateRegion.SetValue(data.DateRegion), APDBDef.DeclareResume.Company.SetValue(data.Company), APDBDef.DeclareResume.Title.SetValue(data.Title), APDBDef.DeclareResume.IsDeclare.SetValue(data.IsDeclare), APDBDef.DeclareResume.CreateDate.SetValue(data.CreateDate), APDBDef.DeclareResume.Creator.SetValue(data.Creator), APDBDef.DeclareResume.ModifyDate.SetValue(data.ModifyDate), APDBDef.DeclareResume.Modifier.SetValue(data.Modifier)).where((APDBDef.DeclareResume.DeclareResumeId == data.DeclareResumeId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long declareResumeId, Object metadata) {
                var query = APQuery.update(APDBDef.DeclareResume).values(APSqlSetPhraseSelector.Select(APDBDef.DeclareResume, metadata)).where((APDBDef.DeclareResume.DeclareResumeId == declareResumeId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long declareResumeId) {
                var query = APQuery.delete(APDBDef.DeclareResume).where((APDBDef.DeclareResume.DeclareResumeId == declareResumeId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.DeclareResume).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.DeclareResume.Asterisk.Count()).from(APDBDef.DeclareResume).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual DeclareResume PrimaryGet(long declareResumeId) {
                var query = APQuery.select(APDBDef.DeclareResume.Asterisk).from(APDBDef.DeclareResume).where((APDBDef.DeclareResume.DeclareResumeId == declareResumeId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.DeclareResume.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<DeclareResume> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.DeclareResume.Asterisk).from(APDBDef.DeclareResume);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.DeclareResume.DeclareResumeId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.DeclareResume.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<DeclareResume> GetInitData() {
                return new List<DeclareResume>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<DeclareResume> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    DeclareResume data = list[i];
                    if ((PrimaryGet(data.DeclareResumeId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报-简历 Dal
        /// </summary>
        public partial class DeclareResumeDal : DeclareResumeDalBase {
            
            public DeclareResumeDal() {
            }
            
            public DeclareResumeDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报-内容 DalBase
        /// </summary>
        public partial class DeclareContentDalBase : APDal {
            
            public DeclareContentDalBase() {
            }
            
            public DeclareContentDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(DeclareContent data) {
                if ((data.DeclareContentId == 0)) {
                    data.DeclareContentId = ((long)(GetNewId(APDBDef.DeclareContent.DeclareContentId)));
                }
                var query = APQuery.insert(APDBDef.DeclareContent).values(APDBDef.DeclareContent.DeclareContentId.SetValue(data.DeclareContentId), APDBDef.DeclareContent.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareContent.ContentKey.SetValue(data.ContentKey), APDBDef.DeclareContent.ContentValue.SetValue(data.ContentValue), APDBDef.DeclareContent.ContentDataType.SetValue(data.ContentDataType), APDBDef.DeclareContent.IsDeclare.SetValue(data.IsDeclare), APDBDef.DeclareContent.CreateDate.SetValue(data.CreateDate), APDBDef.DeclareContent.Creator.SetValue(data.Creator), APDBDef.DeclareContent.ModifyDate.SetValue(data.ModifyDate), APDBDef.DeclareContent.Modifier.SetValue(data.Modifier));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(DeclareContent data) {
                var query = APQuery.update(APDBDef.DeclareContent).values(APDBDef.DeclareContent.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareContent.ContentKey.SetValue(data.ContentKey), APDBDef.DeclareContent.ContentValue.SetValue(data.ContentValue), APDBDef.DeclareContent.ContentDataType.SetValue(data.ContentDataType), APDBDef.DeclareContent.IsDeclare.SetValue(data.IsDeclare), APDBDef.DeclareContent.CreateDate.SetValue(data.CreateDate), APDBDef.DeclareContent.Creator.SetValue(data.Creator), APDBDef.DeclareContent.ModifyDate.SetValue(data.ModifyDate), APDBDef.DeclareContent.Modifier.SetValue(data.Modifier)).where((APDBDef.DeclareContent.DeclareContentId == data.DeclareContentId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long declareContentId, Object metadata) {
                var query = APQuery.update(APDBDef.DeclareContent).values(APSqlSetPhraseSelector.Select(APDBDef.DeclareContent, metadata)).where((APDBDef.DeclareContent.DeclareContentId == declareContentId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long declareContentId) {
                var query = APQuery.delete(APDBDef.DeclareContent).where((APDBDef.DeclareContent.DeclareContentId == declareContentId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.DeclareContent).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.DeclareContent.Asterisk.Count()).from(APDBDef.DeclareContent).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual DeclareContent PrimaryGet(long declareContentId) {
                var query = APQuery.select(APDBDef.DeclareContent.Asterisk).from(APDBDef.DeclareContent).where((APDBDef.DeclareContent.DeclareContentId == declareContentId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.DeclareContent.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<DeclareContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.DeclareContent.Asterisk).from(APDBDef.DeclareContent);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.DeclareContent.DeclareContentId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.DeclareContent.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<DeclareContent> GetInitData() {
                return new List<DeclareContent>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<DeclareContent> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    DeclareContent data = list[i];
                    if ((PrimaryGet(data.DeclareContentId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报-内容 Dal
        /// </summary>
        public partial class DeclareContentDal : DeclareContentDalBase {
            
            public DeclareContentDal() {
            }
            
            public DeclareContentDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报-活动 DalBase
        /// </summary>
        public partial class DeclareActiveDalBase : APDal {
            
            public DeclareActiveDalBase() {
            }
            
            public DeclareActiveDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(DeclareActive data) {
                if ((data.DeclareActiveId == 0)) {
                    data.DeclareActiveId = ((long)(GetNewId(APDBDef.DeclareActive.DeclareActiveId)));
                }
                var query = APQuery.insert(APDBDef.DeclareActive).values(APDBDef.DeclareActive.DeclareActiveId.SetValue(data.DeclareActiveId), APDBDef.DeclareActive.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareActive.ActiveKey.SetValue(data.ActiveKey), APDBDef.DeclareActive.Date.SetValue(data.Date), APDBDef.DeclareActive.Location.SetValue(data.Location), APDBDef.DeclareActive.Level.SetValue(data.Level), APDBDef.DeclareActive.ContentValue.SetValue(data.ContentValue), APDBDef.DeclareActive.Dynamic1.SetValue(data.Dynamic1), APDBDef.DeclareActive.Dynamic2.SetValue(data.Dynamic2), APDBDef.DeclareActive.Dynamic3.SetValue(data.Dynamic3), APDBDef.DeclareActive.Dynamic4.SetValue(data.Dynamic4), APDBDef.DeclareActive.Dynamic5.SetValue(data.Dynamic5), APDBDef.DeclareActive.Dynamic6.SetValue(data.Dynamic6), APDBDef.DeclareActive.Dynamic7.SetValue(data.Dynamic7), APDBDef.DeclareActive.Dynamic8.SetValue(data.Dynamic8), APDBDef.DeclareActive.Dynamic9.SetValue(data.Dynamic9), APDBDef.DeclareActive.IsShare.SetValue(data.IsShare), APDBDef.DeclareActive.IsDeclare.SetValue(data.IsDeclare), APDBDef.DeclareActive.CreateDate.SetValue(data.CreateDate), APDBDef.DeclareActive.Creator.SetValue(data.Creator), APDBDef.DeclareActive.ModifyDate.SetValue(data.ModifyDate), APDBDef.DeclareActive.Modifier.SetValue(data.Modifier));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(DeclareActive data) {
                var query = APQuery.update(APDBDef.DeclareActive).values(APDBDef.DeclareActive.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareActive.ActiveKey.SetValue(data.ActiveKey), APDBDef.DeclareActive.Date.SetValue(data.Date), APDBDef.DeclareActive.Location.SetValue(data.Location), APDBDef.DeclareActive.Level.SetValue(data.Level), APDBDef.DeclareActive.ContentValue.SetValue(data.ContentValue), APDBDef.DeclareActive.Dynamic1.SetValue(data.Dynamic1), APDBDef.DeclareActive.Dynamic2.SetValue(data.Dynamic2), APDBDef.DeclareActive.Dynamic3.SetValue(data.Dynamic3), APDBDef.DeclareActive.Dynamic4.SetValue(data.Dynamic4), APDBDef.DeclareActive.Dynamic5.SetValue(data.Dynamic5), APDBDef.DeclareActive.Dynamic6.SetValue(data.Dynamic6), APDBDef.DeclareActive.Dynamic7.SetValue(data.Dynamic7), APDBDef.DeclareActive.Dynamic8.SetValue(data.Dynamic8), APDBDef.DeclareActive.Dynamic9.SetValue(data.Dynamic9), APDBDef.DeclareActive.IsShare.SetValue(data.IsShare), APDBDef.DeclareActive.IsDeclare.SetValue(data.IsDeclare), APDBDef.DeclareActive.CreateDate.SetValue(data.CreateDate), APDBDef.DeclareActive.Creator.SetValue(data.Creator), APDBDef.DeclareActive.ModifyDate.SetValue(data.ModifyDate), APDBDef.DeclareActive.Modifier.SetValue(data.Modifier)).where((APDBDef.DeclareActive.DeclareActiveId == data.DeclareActiveId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long declareActiveId, Object metadata) {
                var query = APQuery.update(APDBDef.DeclareActive).values(APSqlSetPhraseSelector.Select(APDBDef.DeclareActive, metadata)).where((APDBDef.DeclareActive.DeclareActiveId == declareActiveId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long declareActiveId) {
                var query = APQuery.delete(APDBDef.DeclareActive).where((APDBDef.DeclareActive.DeclareActiveId == declareActiveId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.DeclareActive).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.DeclareActive.Asterisk.Count()).from(APDBDef.DeclareActive).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual DeclareActive PrimaryGet(long declareActiveId) {
                var query = APQuery.select(APDBDef.DeclareActive.Asterisk).from(APDBDef.DeclareActive).where((APDBDef.DeclareActive.DeclareActiveId == declareActiveId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.DeclareActive.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<DeclareActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.DeclareActive.Asterisk).from(APDBDef.DeclareActive);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.DeclareActive.DeclareActiveId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.DeclareActive.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<DeclareActive> GetInitData() {
                return new List<DeclareActive>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<DeclareActive> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    DeclareActive data = list[i];
                    if ((PrimaryGet(data.DeclareActiveId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报-活动 Dal
        /// </summary>
        public partial class DeclareActiveDal : DeclareActiveDalBase {
            
            public DeclareActiveDal() {
            }
            
            public DeclareActiveDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报-科研成果 DalBase
        /// </summary>
        public partial class DeclareAchievementDalBase : APDal {
            
            public DeclareAchievementDalBase() {
            }
            
            public DeclareAchievementDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(DeclareAchievement data) {
                if ((data.DeclareAchievementId == 0)) {
                    data.DeclareAchievementId = ((long)(GetNewId(APDBDef.DeclareAchievement.DeclareAchievementId)));
                }
                var query = APQuery.insert(APDBDef.DeclareAchievement).values(APDBDef.DeclareAchievement.DeclareAchievementId.SetValue(data.DeclareAchievementId), APDBDef.DeclareAchievement.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareAchievement.AchievementKey.SetValue(data.AchievementKey), APDBDef.DeclareAchievement.Date.SetValue(data.Date), APDBDef.DeclareAchievement.DateRegion.SetValue(data.DateRegion), APDBDef.DeclareAchievement.Location.SetValue(data.Location), APDBDef.DeclareAchievement.Level.SetValue(data.Level), APDBDef.DeclareAchievement.NameOrTitle.SetValue(data.NameOrTitle), APDBDef.DeclareAchievement.Dynamic1.SetValue(data.Dynamic1), APDBDef.DeclareAchievement.Dynamic2.SetValue(data.Dynamic2), APDBDef.DeclareAchievement.Dynamic3.SetValue(data.Dynamic3), APDBDef.DeclareAchievement.Dynamic4.SetValue(data.Dynamic4), APDBDef.DeclareAchievement.Dynamic5.SetValue(data.Dynamic5), APDBDef.DeclareAchievement.Dynamic6.SetValue(data.Dynamic6), APDBDef.DeclareAchievement.IsShare.SetValue(data.IsShare), APDBDef.DeclareAchievement.IsDeclare.SetValue(data.IsDeclare), APDBDef.DeclareAchievement.CreateDate.SetValue(data.CreateDate), APDBDef.DeclareAchievement.Creator.SetValue(data.Creator), APDBDef.DeclareAchievement.ModifyDate.SetValue(data.ModifyDate), APDBDef.DeclareAchievement.Modifier.SetValue(data.Modifier));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(DeclareAchievement data) {
                var query = APQuery.update(APDBDef.DeclareAchievement).values(APDBDef.DeclareAchievement.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareAchievement.AchievementKey.SetValue(data.AchievementKey), APDBDef.DeclareAchievement.Date.SetValue(data.Date), APDBDef.DeclareAchievement.DateRegion.SetValue(data.DateRegion), APDBDef.DeclareAchievement.Location.SetValue(data.Location), APDBDef.DeclareAchievement.Level.SetValue(data.Level), APDBDef.DeclareAchievement.NameOrTitle.SetValue(data.NameOrTitle), APDBDef.DeclareAchievement.Dynamic1.SetValue(data.Dynamic1), APDBDef.DeclareAchievement.Dynamic2.SetValue(data.Dynamic2), APDBDef.DeclareAchievement.Dynamic3.SetValue(data.Dynamic3), APDBDef.DeclareAchievement.Dynamic4.SetValue(data.Dynamic4), APDBDef.DeclareAchievement.Dynamic5.SetValue(data.Dynamic5), APDBDef.DeclareAchievement.Dynamic6.SetValue(data.Dynamic6), APDBDef.DeclareAchievement.IsShare.SetValue(data.IsShare), APDBDef.DeclareAchievement.IsDeclare.SetValue(data.IsDeclare), APDBDef.DeclareAchievement.CreateDate.SetValue(data.CreateDate), APDBDef.DeclareAchievement.Creator.SetValue(data.Creator), APDBDef.DeclareAchievement.ModifyDate.SetValue(data.ModifyDate), APDBDef.DeclareAchievement.Modifier.SetValue(data.Modifier)).where((APDBDef.DeclareAchievement.DeclareAchievementId == data.DeclareAchievementId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long declareAchievementId, Object metadata) {
                var query = APQuery.update(APDBDef.DeclareAchievement).values(APSqlSetPhraseSelector.Select(APDBDef.DeclareAchievement, metadata)).where((APDBDef.DeclareAchievement.DeclareAchievementId == declareAchievementId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long declareAchievementId) {
                var query = APQuery.delete(APDBDef.DeclareAchievement).where((APDBDef.DeclareAchievement.DeclareAchievementId == declareAchievementId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.DeclareAchievement).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.DeclareAchievement.Asterisk.Count()).from(APDBDef.DeclareAchievement).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual DeclareAchievement PrimaryGet(long declareAchievementId) {
                var query = APQuery.select(APDBDef.DeclareAchievement.Asterisk).from(APDBDef.DeclareAchievement).where((APDBDef.DeclareAchievement.DeclareAchievementId == declareAchievementId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.DeclareAchievement.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<DeclareAchievement> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.DeclareAchievement.Asterisk).from(APDBDef.DeclareAchievement);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.DeclareAchievement.DeclareAchievementId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.DeclareAchievement.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<DeclareAchievement> GetInitData() {
                return new List<DeclareAchievement>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<DeclareAchievement> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    DeclareAchievement data = list[i];
                    if ((PrimaryGet(data.DeclareAchievementId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报-科研成果 Dal
        /// </summary>
        public partial class DeclareAchievementDal : DeclareAchievementDalBase {
            
            public DeclareAchievementDal() {
            }
            
            public DeclareAchievementDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报-制度建设 DalBase
        /// </summary>
        public partial class DeclareOrgConstDalBase : APDal {
            
            public DeclareOrgConstDalBase() {
            }
            
            public DeclareOrgConstDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(DeclareOrgConst data) {
                if ((data.DeclareOrgConstId == 0)) {
                    data.DeclareOrgConstId = ((long)(GetNewId(APDBDef.DeclareOrgConst.DeclareOrgConstId)));
                }
                var query = APQuery.insert(APDBDef.DeclareOrgConst).values(APDBDef.DeclareOrgConst.DeclareOrgConstId.SetValue(data.DeclareOrgConstId), APDBDef.DeclareOrgConst.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareOrgConst.Content.SetValue(data.Content), APDBDef.DeclareOrgConst.Work.SetValue(data.Work), APDBDef.DeclareOrgConst.Remark.SetValue(data.Remark), APDBDef.DeclareOrgConst.IsShare.SetValue(data.IsShare), APDBDef.DeclareOrgConst.IsDeclare.SetValue(data.IsDeclare), APDBDef.DeclareOrgConst.CreateDate.SetValue(data.CreateDate), APDBDef.DeclareOrgConst.Creator.SetValue(data.Creator), APDBDef.DeclareOrgConst.ModifyDate.SetValue(data.ModifyDate), APDBDef.DeclareOrgConst.Modifier.SetValue(data.Modifier));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(DeclareOrgConst data) {
                var query = APQuery.update(APDBDef.DeclareOrgConst).values(APDBDef.DeclareOrgConst.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareOrgConst.Content.SetValue(data.Content), APDBDef.DeclareOrgConst.Work.SetValue(data.Work), APDBDef.DeclareOrgConst.Remark.SetValue(data.Remark), APDBDef.DeclareOrgConst.IsShare.SetValue(data.IsShare), APDBDef.DeclareOrgConst.IsDeclare.SetValue(data.IsDeclare), APDBDef.DeclareOrgConst.CreateDate.SetValue(data.CreateDate), APDBDef.DeclareOrgConst.Creator.SetValue(data.Creator), APDBDef.DeclareOrgConst.ModifyDate.SetValue(data.ModifyDate), APDBDef.DeclareOrgConst.Modifier.SetValue(data.Modifier)).where((APDBDef.DeclareOrgConst.DeclareOrgConstId == data.DeclareOrgConstId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long declareOrgConstId, Object metadata) {
                var query = APQuery.update(APDBDef.DeclareOrgConst).values(APSqlSetPhraseSelector.Select(APDBDef.DeclareOrgConst, metadata)).where((APDBDef.DeclareOrgConst.DeclareOrgConstId == declareOrgConstId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long declareOrgConstId) {
                var query = APQuery.delete(APDBDef.DeclareOrgConst).where((APDBDef.DeclareOrgConst.DeclareOrgConstId == declareOrgConstId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.DeclareOrgConst).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.DeclareOrgConst.Asterisk.Count()).from(APDBDef.DeclareOrgConst).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual DeclareOrgConst PrimaryGet(long declareOrgConstId) {
                var query = APQuery.select(APDBDef.DeclareOrgConst.Asterisk).from(APDBDef.DeclareOrgConst).where((APDBDef.DeclareOrgConst.DeclareOrgConstId == declareOrgConstId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.DeclareOrgConst.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<DeclareOrgConst> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.DeclareOrgConst.Asterisk).from(APDBDef.DeclareOrgConst);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.DeclareOrgConst.DeclareOrgConstId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.DeclareOrgConst.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<DeclareOrgConst> GetInitData() {
                return new List<DeclareOrgConst>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<DeclareOrgConst> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    DeclareOrgConst data = list[i];
                    if ((PrimaryGet(data.DeclareOrgConstId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报-制度建设 Dal
        /// </summary>
        public partial class DeclareOrgConstDal : DeclareOrgConstDalBase {
            
            public DeclareOrgConstDal() {
            }
            
            public DeclareOrgConstDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报审核 DalBase
        /// </summary>
        public partial class DeclareReviewDalBase : APDal {
            
            public DeclareReviewDalBase() {
            }
            
            public DeclareReviewDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(DeclareReview data) {
                if ((data.DeclareReviewId == 0)) {
                    data.DeclareReviewId = ((long)(GetNewId(APDBDef.DeclareReview.DeclareReviewId)));
                }
                var query = APQuery.insert(APDBDef.DeclareReview).values(APDBDef.DeclareReview.DeclareReviewId.SetValue(data.DeclareReviewId), APDBDef.DeclareReview.TeacherName.SetValue(data.TeacherName), APDBDef.DeclareReview.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareReview.CompanyId.SetValue(data.CompanyId), APDBDef.DeclareReview.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.DeclareReview.DeclareSubjectPKID.SetValue(data.DeclareSubjectPKID), APDBDef.DeclareReview.AllowFlowToSchool.SetValue(data.AllowFlowToSchool), APDBDef.DeclareReview.AllowFitResearcher.SetValue(data.AllowFitResearcher), APDBDef.DeclareReview.IsBrokenRoles.SetValue(data.IsBrokenRoles), APDBDef.DeclareReview.PeriodId.SetValue(data.PeriodId), APDBDef.DeclareReview.Reason.SetValue(data.Reason), APDBDef.DeclareReview.AllowFlowToDowngrade.SetValue(data.AllowFlowToDowngrade), APDBDef.DeclareReview.TypeKey.SetValue(data.TypeKey), APDBDef.DeclareReview.StatusKey.SetValue(data.StatusKey), APDBDef.DeclareReview.ReviewComment.SetValue(data.ReviewComment), APDBDef.DeclareReview.ReviewerId.SetValue(data.ReviewerId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(DeclareReview data) {
                var query = APQuery.update(APDBDef.DeclareReview).values(APDBDef.DeclareReview.TeacherName.SetValue(data.TeacherName), APDBDef.DeclareReview.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareReview.CompanyId.SetValue(data.CompanyId), APDBDef.DeclareReview.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.DeclareReview.DeclareSubjectPKID.SetValue(data.DeclareSubjectPKID), APDBDef.DeclareReview.AllowFlowToSchool.SetValue(data.AllowFlowToSchool), APDBDef.DeclareReview.AllowFitResearcher.SetValue(data.AllowFitResearcher), APDBDef.DeclareReview.IsBrokenRoles.SetValue(data.IsBrokenRoles), APDBDef.DeclareReview.PeriodId.SetValue(data.PeriodId), APDBDef.DeclareReview.Reason.SetValue(data.Reason), APDBDef.DeclareReview.AllowFlowToDowngrade.SetValue(data.AllowFlowToDowngrade), APDBDef.DeclareReview.TypeKey.SetValue(data.TypeKey), APDBDef.DeclareReview.StatusKey.SetValue(data.StatusKey), APDBDef.DeclareReview.ReviewComment.SetValue(data.ReviewComment), APDBDef.DeclareReview.ReviewerId.SetValue(data.ReviewerId)).where((APDBDef.DeclareReview.DeclareReviewId == data.DeclareReviewId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long declareReviewId, Object metadata) {
                var query = APQuery.update(APDBDef.DeclareReview).values(APSqlSetPhraseSelector.Select(APDBDef.DeclareReview, metadata)).where((APDBDef.DeclareReview.DeclareReviewId == declareReviewId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long declareReviewId) {
                var query = APQuery.delete(APDBDef.DeclareReview).where((APDBDef.DeclareReview.DeclareReviewId == declareReviewId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.DeclareReview).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.DeclareReview.Asterisk.Count()).from(APDBDef.DeclareReview).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual DeclareReview PrimaryGet(long declareReviewId) {
                var query = APQuery.select(APDBDef.DeclareReview.Asterisk).from(APDBDef.DeclareReview).where((APDBDef.DeclareReview.DeclareReviewId == declareReviewId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.DeclareReview.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<DeclareReview> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.DeclareReview.Asterisk).from(APDBDef.DeclareReview);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.DeclareReview.DeclareReviewId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.DeclareReview.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<DeclareReview> GetInitData() {
                return new List<DeclareReview>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<DeclareReview> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    DeclareReview data = list[i];
                    if ((PrimaryGet(data.DeclareReviewId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报审核 Dal
        /// </summary>
        public partial class DeclareReviewDal : DeclareReviewDalBase {
            
            public DeclareReviewDal() {
            }
            
            public DeclareReviewDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报材料，用于申报流程 DalBase
        /// </summary>
        public partial class DeclareMaterialDalBase : APDal {
            
            public DeclareMaterialDalBase() {
            }
            
            public DeclareMaterialDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(DeclareMaterial data) {
                if ((data.MaterialId == 0)) {
                    data.MaterialId = ((long)(GetNewId(APDBDef.DeclareMaterial.MaterialId)));
                }
                var query = APQuery.insert(APDBDef.DeclareMaterial).values(APDBDef.DeclareMaterial.MaterialId.SetValue(data.MaterialId), APDBDef.DeclareMaterial.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.DeclareMaterial.PeriodId.SetValue(data.PeriodId), APDBDef.DeclareMaterial.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareMaterial.ItemId.SetValue(data.ItemId), APDBDef.DeclareMaterial.Title.SetValue(data.Title), APDBDef.DeclareMaterial.ParentType.SetValue(data.ParentType), APDBDef.DeclareMaterial.Type.SetValue(data.Type), APDBDef.DeclareMaterial.CreateDate.SetValue(data.CreateDate), APDBDef.DeclareMaterial.PubishDate.SetValue(data.PubishDate));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(DeclareMaterial data) {
                var query = APQuery.update(APDBDef.DeclareMaterial).values(APDBDef.DeclareMaterial.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.DeclareMaterial.PeriodId.SetValue(data.PeriodId), APDBDef.DeclareMaterial.TeacherId.SetValue(data.TeacherId), APDBDef.DeclareMaterial.ItemId.SetValue(data.ItemId), APDBDef.DeclareMaterial.Title.SetValue(data.Title), APDBDef.DeclareMaterial.ParentType.SetValue(data.ParentType), APDBDef.DeclareMaterial.Type.SetValue(data.Type), APDBDef.DeclareMaterial.CreateDate.SetValue(data.CreateDate), APDBDef.DeclareMaterial.PubishDate.SetValue(data.PubishDate)).where((APDBDef.DeclareMaterial.MaterialId == data.MaterialId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long materialId, Object metadata) {
                var query = APQuery.update(APDBDef.DeclareMaterial).values(APSqlSetPhraseSelector.Select(APDBDef.DeclareMaterial, metadata)).where((APDBDef.DeclareMaterial.MaterialId == materialId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long materialId) {
                var query = APQuery.delete(APDBDef.DeclareMaterial).where((APDBDef.DeclareMaterial.MaterialId == materialId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.DeclareMaterial).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.DeclareMaterial.Asterisk.Count()).from(APDBDef.DeclareMaterial).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual DeclareMaterial PrimaryGet(long materialId) {
                var query = APQuery.select(APDBDef.DeclareMaterial.Asterisk).from(APDBDef.DeclareMaterial).where((APDBDef.DeclareMaterial.MaterialId == materialId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.DeclareMaterial.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<DeclareMaterial> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.DeclareMaterial.Asterisk).from(APDBDef.DeclareMaterial);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.DeclareMaterial.MaterialId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.DeclareMaterial.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<DeclareMaterial> GetInitData() {
                return new List<DeclareMaterial>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<DeclareMaterial> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    DeclareMaterial data = list[i];
                    if ((PrimaryGet(data.MaterialId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报材料，用于申报流程 Dal
        /// </summary>
        public partial class DeclareMaterialDal : DeclareMaterialDalBase {
            
            public DeclareMaterialDal() {
            }
            
            public DeclareMaterialDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报材料，基本信息 DalBase
        /// </summary>
        public partial class DeclareProfileDalBase : APDal {
            
            public DeclareProfileDalBase() {
            }
            
            public DeclareProfileDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(DeclareProfile data) {
                if ((data.DeclareProfileId == 0)) {
                    data.DeclareProfileId = ((long)(GetNewId(APDBDef.DeclareProfile.DeclareProfileId)));
                }
                var query = APQuery.insert(APDBDef.DeclareProfile).values(APDBDef.DeclareProfile.DeclareProfileId.SetValue(data.DeclareProfileId), APDBDef.DeclareProfile.UserId.SetValue(data.UserId), APDBDef.DeclareProfile.PeriodId.SetValue(data.PeriodId), APDBDef.DeclareProfile.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.DeclareProfile.CompanyId.SetValue(data.CompanyId), APDBDef.DeclareProfile.RealName.SetValue(data.RealName), APDBDef.DeclareProfile.TrainNo.SetValue(data.TrainNo), APDBDef.DeclareProfile.GenderPKID.SetValue(data.GenderPKID), APDBDef.DeclareProfile.Birthday.SetValue(data.Birthday), APDBDef.DeclareProfile.PoliticalStatusPKID.SetValue(data.PoliticalStatusPKID), APDBDef.DeclareProfile.NationalityPKID.SetValue(data.NationalityPKID), APDBDef.DeclareProfile.EduSubjectPKID.SetValue(data.EduSubjectPKID), APDBDef.DeclareProfile.EduStagePKID.SetValue(data.EduStagePKID), APDBDef.DeclareProfile.SkillTitlePKID.SetValue(data.SkillTitlePKID), APDBDef.DeclareProfile.CompanyName.SetValue(data.CompanyName), APDBDef.DeclareProfile.RankTitlePKID.SetValue(data.RankTitlePKID), APDBDef.DeclareProfile.CourseCountPerWeek.SetValue(data.CourseCountPerWeek), APDBDef.DeclareProfile.Hiredate.SetValue(data.Hiredate), APDBDef.DeclareProfile.EduBgPKID.SetValue(data.EduBgPKID), APDBDef.DeclareProfile.EduDegreePKID.SetValue(data.EduDegreePKID), APDBDef.DeclareProfile.Phonemobile.SetValue(data.Phonemobile), APDBDef.DeclareProfile.Email.SetValue(data.Email), APDBDef.DeclareProfile.Phone.SetValue(data.Phone), APDBDef.DeclareProfile.Dynamic1.SetValue(data.Dynamic1), APDBDef.DeclareProfile.Dynamic2.SetValue(data.Dynamic2), APDBDef.DeclareProfile.Dynamic3.SetValue(data.Dynamic3), APDBDef.DeclareProfile.Dynamic4.SetValue(data.Dynamic4), APDBDef.DeclareProfile.Dynamic5.SetValue(data.Dynamic5), APDBDef.DeclareProfile.StatusKey.SetValue(data.StatusKey));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(DeclareProfile data) {
                var query = APQuery.update(APDBDef.DeclareProfile).values(APDBDef.DeclareProfile.PeriodId.SetValue(data.PeriodId), APDBDef.DeclareProfile.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.DeclareProfile.CompanyId.SetValue(data.CompanyId), APDBDef.DeclareProfile.RealName.SetValue(data.RealName), APDBDef.DeclareProfile.TrainNo.SetValue(data.TrainNo), APDBDef.DeclareProfile.GenderPKID.SetValue(data.GenderPKID), APDBDef.DeclareProfile.Birthday.SetValue(data.Birthday), APDBDef.DeclareProfile.PoliticalStatusPKID.SetValue(data.PoliticalStatusPKID), APDBDef.DeclareProfile.NationalityPKID.SetValue(data.NationalityPKID), APDBDef.DeclareProfile.EduSubjectPKID.SetValue(data.EduSubjectPKID), APDBDef.DeclareProfile.EduStagePKID.SetValue(data.EduStagePKID), APDBDef.DeclareProfile.SkillTitlePKID.SetValue(data.SkillTitlePKID), APDBDef.DeclareProfile.CompanyName.SetValue(data.CompanyName), APDBDef.DeclareProfile.RankTitlePKID.SetValue(data.RankTitlePKID), APDBDef.DeclareProfile.CourseCountPerWeek.SetValue(data.CourseCountPerWeek), APDBDef.DeclareProfile.Hiredate.SetValue(data.Hiredate), APDBDef.DeclareProfile.EduBgPKID.SetValue(data.EduBgPKID), APDBDef.DeclareProfile.EduDegreePKID.SetValue(data.EduDegreePKID), APDBDef.DeclareProfile.Phonemobile.SetValue(data.Phonemobile), APDBDef.DeclareProfile.Email.SetValue(data.Email), APDBDef.DeclareProfile.Phone.SetValue(data.Phone), APDBDef.DeclareProfile.Dynamic1.SetValue(data.Dynamic1), APDBDef.DeclareProfile.Dynamic2.SetValue(data.Dynamic2), APDBDef.DeclareProfile.Dynamic3.SetValue(data.Dynamic3), APDBDef.DeclareProfile.Dynamic4.SetValue(data.Dynamic4), APDBDef.DeclareProfile.Dynamic5.SetValue(data.Dynamic5), APDBDef.DeclareProfile.StatusKey.SetValue(data.StatusKey)).where((APDBDef.DeclareProfile.DeclareProfileId == data.DeclareProfileId), (APDBDef.DeclareProfile.UserId == data.UserId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long declareProfileId, long userId, Object metadata) {
                var query = APQuery.update(APDBDef.DeclareProfile).values(APSqlSetPhraseSelector.Select(APDBDef.DeclareProfile, metadata)).where((APDBDef.DeclareProfile.DeclareProfileId == declareProfileId), (APDBDef.DeclareProfile.UserId == userId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long declareProfileId, long userId) {
                var query = APQuery.delete(APDBDef.DeclareProfile).where((APDBDef.DeclareProfile.DeclareProfileId == declareProfileId), (APDBDef.DeclareProfile.UserId == userId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.DeclareProfile).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.DeclareProfile.Asterisk.Count()).from(APDBDef.DeclareProfile).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual DeclareProfile PrimaryGet(long declareProfileId, long userId) {
                var query = APQuery.select(APDBDef.DeclareProfile.Asterisk).from(APDBDef.DeclareProfile).where((APDBDef.DeclareProfile.DeclareProfileId == declareProfileId), (APDBDef.DeclareProfile.UserId == userId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.DeclareProfile.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<DeclareProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.DeclareProfile.Asterisk).from(APDBDef.DeclareProfile);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.DeclareProfile.DeclareProfileId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.DeclareProfile.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<DeclareProfile> GetInitData() {
                return new List<DeclareProfile>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<DeclareProfile> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    DeclareProfile data = list[i];
                    if ((PrimaryGet(data.DeclareProfileId, data.UserId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报材料，基本信息 Dal
        /// </summary>
        public partial class DeclareProfileDal : DeclareProfileDalBase {
            
            public DeclareProfileDal() {
            }
            
            public DeclareProfileDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 申报周期 DalBase
        /// </summary>
        public partial class DeclarePeriodDalBase : APDal {
            
            public DeclarePeriodDalBase() {
            }
            
            public DeclarePeriodDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(DeclarePeriod data) {
                if ((data.PeriodId == 0)) {
                    data.PeriodId = ((long)(GetNewId(APDBDef.DeclarePeriod.PeriodId)));
                }
                var query = APQuery.insert(APDBDef.DeclarePeriod).values(APDBDef.DeclarePeriod.PeriodId.SetValue(data.PeriodId), APDBDef.DeclarePeriod.Name.SetValue(data.Name), APDBDef.DeclarePeriod.BeginDate.SetValue(data.BeginDate), APDBDef.DeclarePeriod.EndDate.SetValue(data.EndDate), APDBDef.DeclarePeriod.DeclareStartDate.SetValue(data.DeclareStartDate), APDBDef.DeclarePeriod.DeclareEndDate.SetValue(data.DeclareEndDate), APDBDef.DeclarePeriod.ReveiwStartDate.SetValue(data.ReveiwStartDate), APDBDef.DeclarePeriod.ReveiwEndDate.SetValue(data.ReveiwEndDate), APDBDef.DeclarePeriod.IsCurrent.SetValue(data.IsCurrent));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(DeclarePeriod data) {
                var query = APQuery.update(APDBDef.DeclarePeriod).values(APDBDef.DeclarePeriod.Name.SetValue(data.Name), APDBDef.DeclarePeriod.BeginDate.SetValue(data.BeginDate), APDBDef.DeclarePeriod.EndDate.SetValue(data.EndDate), APDBDef.DeclarePeriod.DeclareStartDate.SetValue(data.DeclareStartDate), APDBDef.DeclarePeriod.DeclareEndDate.SetValue(data.DeclareEndDate), APDBDef.DeclarePeriod.ReveiwStartDate.SetValue(data.ReveiwStartDate), APDBDef.DeclarePeriod.ReveiwEndDate.SetValue(data.ReveiwEndDate), APDBDef.DeclarePeriod.IsCurrent.SetValue(data.IsCurrent)).where((APDBDef.DeclarePeriod.PeriodId == data.PeriodId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long periodId, Object metadata) {
                var query = APQuery.update(APDBDef.DeclarePeriod).values(APSqlSetPhraseSelector.Select(APDBDef.DeclarePeriod, metadata)).where((APDBDef.DeclarePeriod.PeriodId == periodId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long periodId) {
                var query = APQuery.delete(APDBDef.DeclarePeriod).where((APDBDef.DeclarePeriod.PeriodId == periodId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.DeclarePeriod).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.DeclarePeriod.Asterisk.Count()).from(APDBDef.DeclarePeriod).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual DeclarePeriod PrimaryGet(long periodId) {
                var query = APQuery.select(APDBDef.DeclarePeriod.Asterisk).from(APDBDef.DeclarePeriod).where((APDBDef.DeclarePeriod.PeriodId == periodId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.DeclarePeriod.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<DeclarePeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.DeclarePeriod.Asterisk).from(APDBDef.DeclarePeriod);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.DeclarePeriod.PeriodId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.DeclarePeriod.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<DeclarePeriod> GetInitData() {
                return new List<DeclarePeriod>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<DeclarePeriod> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    DeclarePeriod data = list[i];
                    if ((PrimaryGet(data.PeriodId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 申报周期 Dal
        /// </summary>
        public partial class DeclarePeriodDal : DeclarePeriodDalBase {
            
            public DeclarePeriodDal() {
            }
            
            public DeclarePeriodDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 梯队-学员 DalBase
        /// </summary>
        public partial class TeamMemberDalBase : APDal {
            
            public TeamMemberDalBase() {
            }
            
            public TeamMemberDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(TeamMember data) {
                var query = APQuery.insert(APDBDef.TeamMember).values(APDBDef.TeamMember.TeamId.SetValue(data.TeamId), APDBDef.TeamMember.MemberId.SetValue(data.MemberId), APDBDef.TeamMember.ContentValue.SetValue(data.ContentValue), APDBDef.TeamMember.CreateDate.SetValue(data.CreateDate), APDBDef.TeamMember.Creator.SetValue(data.Creator));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(TeamMember data) {
                var query = APQuery.update(APDBDef.TeamMember).values(APDBDef.TeamMember.ContentValue.SetValue(data.ContentValue), APDBDef.TeamMember.CreateDate.SetValue(data.CreateDate), APDBDef.TeamMember.Creator.SetValue(data.Creator)).where((APDBDef.TeamMember.TeamId == data.TeamId), (APDBDef.TeamMember.MemberId == data.MemberId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long teamId, long memberId, Object metadata) {
                var query = APQuery.update(APDBDef.TeamMember).values(APSqlSetPhraseSelector.Select(APDBDef.TeamMember, metadata)).where((APDBDef.TeamMember.TeamId == teamId), (APDBDef.TeamMember.MemberId == memberId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long teamId, long memberId) {
                var query = APQuery.delete(APDBDef.TeamMember).where((APDBDef.TeamMember.TeamId == teamId), (APDBDef.TeamMember.MemberId == memberId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.TeamMember).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.TeamMember.Asterisk.Count()).from(APDBDef.TeamMember).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual TeamMember PrimaryGet(long teamId, long memberId) {
                var query = APQuery.select(APDBDef.TeamMember.Asterisk).from(APDBDef.TeamMember).where((APDBDef.TeamMember.TeamId == teamId), (APDBDef.TeamMember.MemberId == memberId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.TeamMember.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<TeamMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.TeamMember.Asterisk).from(APDBDef.TeamMember);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.TeamMember.TeamId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.TeamMember.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<TeamMember> GetInitData() {
                return new List<TeamMember>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<TeamMember> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    TeamMember data = list[i];
                    if ((PrimaryGet(data.TeamId, data.MemberId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 梯队-学员 Dal
        /// </summary>
        public partial class TeamMemberDal : TeamMemberDalBase {
            
            public TeamMemberDal() {
            }
            
            public TeamMemberDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 梯队-内容 DalBase
        /// </summary>
        public partial class TeamContentDalBase : APDal {
            
            public TeamContentDalBase() {
            }
            
            public TeamContentDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(TeamContent data) {
                if ((data.TeamContentId == 0)) {
                    data.TeamContentId = ((long)(GetNewId(APDBDef.TeamContent.TeamContentId)));
                }
                var query = APQuery.insert(APDBDef.TeamContent).values(APDBDef.TeamContent.TeamContentId.SetValue(data.TeamContentId), APDBDef.TeamContent.TeamId.SetValue(data.TeamId), APDBDef.TeamContent.ContentKey.SetValue(data.ContentKey), APDBDef.TeamContent.ContentValue.SetValue(data.ContentValue), APDBDef.TeamContent.ContentDataType.SetValue(data.ContentDataType), APDBDef.TeamContent.IsDeclare.SetValue(data.IsDeclare), APDBDef.TeamContent.CreateDate.SetValue(data.CreateDate), APDBDef.TeamContent.Creator.SetValue(data.Creator), APDBDef.TeamContent.ModifyDate.SetValue(data.ModifyDate), APDBDef.TeamContent.Modifier.SetValue(data.Modifier));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(TeamContent data) {
                var query = APQuery.update(APDBDef.TeamContent).values(APDBDef.TeamContent.TeamId.SetValue(data.TeamId), APDBDef.TeamContent.ContentKey.SetValue(data.ContentKey), APDBDef.TeamContent.ContentValue.SetValue(data.ContentValue), APDBDef.TeamContent.ContentDataType.SetValue(data.ContentDataType), APDBDef.TeamContent.IsDeclare.SetValue(data.IsDeclare), APDBDef.TeamContent.CreateDate.SetValue(data.CreateDate), APDBDef.TeamContent.Creator.SetValue(data.Creator), APDBDef.TeamContent.ModifyDate.SetValue(data.ModifyDate), APDBDef.TeamContent.Modifier.SetValue(data.Modifier)).where((APDBDef.TeamContent.TeamContentId == data.TeamContentId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long teamContentId, Object metadata) {
                var query = APQuery.update(APDBDef.TeamContent).values(APSqlSetPhraseSelector.Select(APDBDef.TeamContent, metadata)).where((APDBDef.TeamContent.TeamContentId == teamContentId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long teamContentId) {
                var query = APQuery.delete(APDBDef.TeamContent).where((APDBDef.TeamContent.TeamContentId == teamContentId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.TeamContent).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.TeamContent.Asterisk.Count()).from(APDBDef.TeamContent).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual TeamContent PrimaryGet(long teamContentId) {
                var query = APQuery.select(APDBDef.TeamContent.Asterisk).from(APDBDef.TeamContent).where((APDBDef.TeamContent.TeamContentId == teamContentId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.TeamContent.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<TeamContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.TeamContent.Asterisk).from(APDBDef.TeamContent);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.TeamContent.TeamContentId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.TeamContent.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<TeamContent> GetInitData() {
                return new List<TeamContent>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<TeamContent> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    TeamContent data = list[i];
                    if ((PrimaryGet(data.TeamContentId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 梯队-内容 Dal
        /// </summary>
        public partial class TeamContentDal : TeamContentDalBase {
            
            public TeamContentDal() {
            }
            
            public TeamContentDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 梯队-活动 DalBase
        /// </summary>
        public partial class TeamActiveDalBase : APDal {
            
            public TeamActiveDalBase() {
            }
            
            public TeamActiveDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(TeamActive data) {
                if ((data.TeamActiveId == 0)) {
                    data.TeamActiveId = ((long)(GetNewId(APDBDef.TeamActive.TeamActiveId)));
                }
                var query = APQuery.insert(APDBDef.TeamActive).values(APDBDef.TeamActive.TeamActiveId.SetValue(data.TeamActiveId), APDBDef.TeamActive.TeamId.SetValue(data.TeamId), APDBDef.TeamActive.Date.SetValue(data.Date), APDBDef.TeamActive.Location.SetValue(data.Location), APDBDef.TeamActive.Title.SetValue(data.Title), APDBDef.TeamActive.ActiveType.SetValue(data.ActiveType), APDBDef.TeamActive.ContentValue.SetValue(data.ContentValue), APDBDef.TeamActive.IsShow.SetValue(data.IsShow), APDBDef.TeamActive.IsShare.SetValue(data.IsShare), APDBDef.TeamActive.IsDeclare.SetValue(data.IsDeclare), APDBDef.TeamActive.CreateDate.SetValue(data.CreateDate), APDBDef.TeamActive.Creator.SetValue(data.Creator), APDBDef.TeamActive.ModifyDate.SetValue(data.ModifyDate), APDBDef.TeamActive.Modifier.SetValue(data.Modifier));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(TeamActive data) {
                var query = APQuery.update(APDBDef.TeamActive).values(APDBDef.TeamActive.TeamId.SetValue(data.TeamId), APDBDef.TeamActive.Date.SetValue(data.Date), APDBDef.TeamActive.Location.SetValue(data.Location), APDBDef.TeamActive.Title.SetValue(data.Title), APDBDef.TeamActive.ActiveType.SetValue(data.ActiveType), APDBDef.TeamActive.ContentValue.SetValue(data.ContentValue), APDBDef.TeamActive.IsShow.SetValue(data.IsShow), APDBDef.TeamActive.IsShare.SetValue(data.IsShare), APDBDef.TeamActive.IsDeclare.SetValue(data.IsDeclare), APDBDef.TeamActive.CreateDate.SetValue(data.CreateDate), APDBDef.TeamActive.Creator.SetValue(data.Creator), APDBDef.TeamActive.ModifyDate.SetValue(data.ModifyDate), APDBDef.TeamActive.Modifier.SetValue(data.Modifier)).where((APDBDef.TeamActive.TeamActiveId == data.TeamActiveId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long teamActiveId, Object metadata) {
                var query = APQuery.update(APDBDef.TeamActive).values(APSqlSetPhraseSelector.Select(APDBDef.TeamActive, metadata)).where((APDBDef.TeamActive.TeamActiveId == teamActiveId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long teamActiveId) {
                var query = APQuery.delete(APDBDef.TeamActive).where((APDBDef.TeamActive.TeamActiveId == teamActiveId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.TeamActive).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.TeamActive.Asterisk.Count()).from(APDBDef.TeamActive).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual TeamActive PrimaryGet(long teamActiveId) {
                var query = APQuery.select(APDBDef.TeamActive.Asterisk).from(APDBDef.TeamActive).where((APDBDef.TeamActive.TeamActiveId == teamActiveId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.TeamActive.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<TeamActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.TeamActive.Asterisk).from(APDBDef.TeamActive);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.TeamActive.TeamActiveId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.TeamActive.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<TeamActive> GetInitData() {
                return new List<TeamActive>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<TeamActive> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    TeamActive data = list[i];
                    if ((PrimaryGet(data.TeamActiveId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 梯队-活动 Dal
        /// </summary>
        public partial class TeamActiveDal : TeamActiveDalBase {
            
            public TeamActiveDal() {
            }
            
            public TeamActiveDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 梯队-活动成果 DalBase
        /// </summary>
        public partial class TeamActiveResultDalBase : APDal {
            
            public TeamActiveResultDalBase() {
            }
            
            public TeamActiveResultDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(TeamActiveResult data) {
                if ((data.ResultId == 0)) {
                    data.ResultId = ((long)(GetNewId(APDBDef.TeamActiveResult.ResultId)));
                }
                var query = APQuery.insert(APDBDef.TeamActiveResult).values(APDBDef.TeamActiveResult.ResultId.SetValue(data.ResultId), APDBDef.TeamActiveResult.ActiveId.SetValue(data.ActiveId), APDBDef.TeamActiveResult.MemberId.SetValue(data.MemberId), APDBDef.TeamActiveResult.ActiveResult.SetValue(data.ActiveResult), APDBDef.TeamActiveResult.CreateDate.SetValue(data.CreateDate), APDBDef.TeamActiveResult.Creator.SetValue(data.Creator), APDBDef.TeamActiveResult.ModifyDate.SetValue(data.ModifyDate), APDBDef.TeamActiveResult.Modifier.SetValue(data.Modifier));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(TeamActiveResult data) {
                var query = APQuery.update(APDBDef.TeamActiveResult).values(APDBDef.TeamActiveResult.ActiveId.SetValue(data.ActiveId), APDBDef.TeamActiveResult.MemberId.SetValue(data.MemberId), APDBDef.TeamActiveResult.ActiveResult.SetValue(data.ActiveResult), APDBDef.TeamActiveResult.CreateDate.SetValue(data.CreateDate), APDBDef.TeamActiveResult.Creator.SetValue(data.Creator), APDBDef.TeamActiveResult.ModifyDate.SetValue(data.ModifyDate), APDBDef.TeamActiveResult.Modifier.SetValue(data.Modifier)).where((APDBDef.TeamActiveResult.ResultId == data.ResultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long resultId, Object metadata) {
                var query = APQuery.update(APDBDef.TeamActiveResult).values(APSqlSetPhraseSelector.Select(APDBDef.TeamActiveResult, metadata)).where((APDBDef.TeamActiveResult.ResultId == resultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long resultId) {
                var query = APQuery.delete(APDBDef.TeamActiveResult).where((APDBDef.TeamActiveResult.ResultId == resultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.TeamActiveResult).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.TeamActiveResult.Asterisk.Count()).from(APDBDef.TeamActiveResult).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual TeamActiveResult PrimaryGet(long resultId) {
                var query = APQuery.select(APDBDef.TeamActiveResult.Asterisk).from(APDBDef.TeamActiveResult).where((APDBDef.TeamActiveResult.ResultId == resultId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.TeamActiveResult.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<TeamActiveResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.TeamActiveResult.Asterisk).from(APDBDef.TeamActiveResult);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.TeamActiveResult.ResultId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.TeamActiveResult.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<TeamActiveResult> GetInitData() {
                return new List<TeamActiveResult>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<TeamActiveResult> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    TeamActiveResult data = list[i];
                    if ((PrimaryGet(data.ResultId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 梯队-活动成果 Dal
        /// </summary>
        public partial class TeamActiveResultDal : TeamActiveResultDalBase {
            
            public TeamActiveResultDal() {
            }
            
            public TeamActiveResultDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 梯队-活动内容 DalBase
        /// </summary>
        public partial class TeamActiveItemDalBase : APDal {
            
            public TeamActiveItemDalBase() {
            }
            
            public TeamActiveItemDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(TeamActiveItem data) {
                if ((data.ItemId == 0)) {
                    data.ItemId = ((long)(GetNewId(APDBDef.TeamActiveItem.ItemId)));
                }
                var query = APQuery.insert(APDBDef.TeamActiveItem).values(APDBDef.TeamActiveItem.ItemId.SetValue(data.ItemId), APDBDef.TeamActiveItem.ActiveId.SetValue(data.ActiveId), APDBDef.TeamActiveItem.MemberId.SetValue(data.MemberId), APDBDef.TeamActiveItem.SendDate.SetValue(data.SendDate), APDBDef.TeamActiveItem.ItemContent.SetValue(data.ItemContent), APDBDef.TeamActiveItem.CreateDate.SetValue(data.CreateDate), APDBDef.TeamActiveItem.Creator.SetValue(data.Creator), APDBDef.TeamActiveItem.ModifyDate.SetValue(data.ModifyDate), APDBDef.TeamActiveItem.Modifier.SetValue(data.Modifier));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(TeamActiveItem data) {
                var query = APQuery.update(APDBDef.TeamActiveItem).values(APDBDef.TeamActiveItem.ActiveId.SetValue(data.ActiveId), APDBDef.TeamActiveItem.MemberId.SetValue(data.MemberId), APDBDef.TeamActiveItem.SendDate.SetValue(data.SendDate), APDBDef.TeamActiveItem.ItemContent.SetValue(data.ItemContent), APDBDef.TeamActiveItem.CreateDate.SetValue(data.CreateDate), APDBDef.TeamActiveItem.Creator.SetValue(data.Creator), APDBDef.TeamActiveItem.ModifyDate.SetValue(data.ModifyDate), APDBDef.TeamActiveItem.Modifier.SetValue(data.Modifier)).where((APDBDef.TeamActiveItem.ItemId == data.ItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long itemId, Object metadata) {
                var query = APQuery.update(APDBDef.TeamActiveItem).values(APSqlSetPhraseSelector.Select(APDBDef.TeamActiveItem, metadata)).where((APDBDef.TeamActiveItem.ItemId == itemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long itemId) {
                var query = APQuery.delete(APDBDef.TeamActiveItem).where((APDBDef.TeamActiveItem.ItemId == itemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.TeamActiveItem).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.TeamActiveItem.Asterisk.Count()).from(APDBDef.TeamActiveItem).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual TeamActiveItem PrimaryGet(long itemId) {
                var query = APQuery.select(APDBDef.TeamActiveItem.Asterisk).from(APDBDef.TeamActiveItem).where((APDBDef.TeamActiveItem.ItemId == itemId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.TeamActiveItem.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<TeamActiveItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.TeamActiveItem.Asterisk).from(APDBDef.TeamActiveItem);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.TeamActiveItem.ItemId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.TeamActiveItem.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<TeamActiveItem> GetInitData() {
                return new List<TeamActiveItem>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<TeamActiveItem> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    TeamActiveItem data = list[i];
                    if ((PrimaryGet(data.ItemId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 梯队-活动内容 Dal
        /// </summary>
        public partial class TeamActiveItemDal : TeamActiveItemDalBase {
            
            public TeamActiveItemDal() {
            }
            
            public TeamActiveItemDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 梯队-定向性课程开设登记表 DalBase
        /// </summary>
        public partial class TeamSpecialCourseDalBase : APDal {
            
            public TeamSpecialCourseDalBase() {
            }
            
            public TeamSpecialCourseDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(TeamSpecialCourse data) {
                if ((data.CourseId == 0)) {
                    data.CourseId = ((long)(GetNewId(APDBDef.TeamSpecialCourse.CourseId)));
                }
                var query = APQuery.insert(APDBDef.TeamSpecialCourse).values(APDBDef.TeamSpecialCourse.CourseId.SetValue(data.CourseId), APDBDef.TeamSpecialCourse.TeamId.SetValue(data.TeamId), APDBDef.TeamSpecialCourse.Title.SetValue(data.Title), APDBDef.TeamSpecialCourse.StartDate.SetValue(data.StartDate), APDBDef.TeamSpecialCourse.EndDate.SetValue(data.EndDate), APDBDef.TeamSpecialCourse.CourseTarget.SetValue(data.CourseTarget), APDBDef.TeamSpecialCourse.CoursePlan.SetValue(data.CoursePlan), APDBDef.TeamSpecialCourse.CourseRecords.SetValue(data.CourseRecords), APDBDef.TeamSpecialCourse.CourseResults.SetValue(data.CourseResults), APDBDef.TeamSpecialCourse.CourseSummary.SetValue(data.CourseSummary), APDBDef.TeamSpecialCourse.Remark.SetValue(data.Remark), APDBDef.TeamSpecialCourse.TotalCount.SetValue(data.TotalCount), APDBDef.TeamSpecialCourse.MemberCount.SetValue(data.MemberCount), APDBDef.TeamSpecialCourse.MemberRecord.SetValue(data.MemberRecord), APDBDef.TeamSpecialCourse.IsDeclare.SetValue(data.IsDeclare), APDBDef.TeamSpecialCourse.CreateDate.SetValue(data.CreateDate), APDBDef.TeamSpecialCourse.Creator.SetValue(data.Creator), APDBDef.TeamSpecialCourse.ModifyDate.SetValue(data.ModifyDate), APDBDef.TeamSpecialCourse.Modifier.SetValue(data.Modifier));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(TeamSpecialCourse data) {
                var query = APQuery.update(APDBDef.TeamSpecialCourse).values(APDBDef.TeamSpecialCourse.TeamId.SetValue(data.TeamId), APDBDef.TeamSpecialCourse.Title.SetValue(data.Title), APDBDef.TeamSpecialCourse.StartDate.SetValue(data.StartDate), APDBDef.TeamSpecialCourse.EndDate.SetValue(data.EndDate), APDBDef.TeamSpecialCourse.CourseTarget.SetValue(data.CourseTarget), APDBDef.TeamSpecialCourse.CoursePlan.SetValue(data.CoursePlan), APDBDef.TeamSpecialCourse.CourseRecords.SetValue(data.CourseRecords), APDBDef.TeamSpecialCourse.CourseResults.SetValue(data.CourseResults), APDBDef.TeamSpecialCourse.CourseSummary.SetValue(data.CourseSummary), APDBDef.TeamSpecialCourse.Remark.SetValue(data.Remark), APDBDef.TeamSpecialCourse.TotalCount.SetValue(data.TotalCount), APDBDef.TeamSpecialCourse.MemberCount.SetValue(data.MemberCount), APDBDef.TeamSpecialCourse.MemberRecord.SetValue(data.MemberRecord), APDBDef.TeamSpecialCourse.IsDeclare.SetValue(data.IsDeclare), APDBDef.TeamSpecialCourse.CreateDate.SetValue(data.CreateDate), APDBDef.TeamSpecialCourse.Creator.SetValue(data.Creator), APDBDef.TeamSpecialCourse.ModifyDate.SetValue(data.ModifyDate), APDBDef.TeamSpecialCourse.Modifier.SetValue(data.Modifier)).where((APDBDef.TeamSpecialCourse.CourseId == data.CourseId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long courseId, Object metadata) {
                var query = APQuery.update(APDBDef.TeamSpecialCourse).values(APSqlSetPhraseSelector.Select(APDBDef.TeamSpecialCourse, metadata)).where((APDBDef.TeamSpecialCourse.CourseId == courseId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long courseId) {
                var query = APQuery.delete(APDBDef.TeamSpecialCourse).where((APDBDef.TeamSpecialCourse.CourseId == courseId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.TeamSpecialCourse).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.TeamSpecialCourse.Asterisk.Count()).from(APDBDef.TeamSpecialCourse).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual TeamSpecialCourse PrimaryGet(long courseId) {
                var query = APQuery.select(APDBDef.TeamSpecialCourse.Asterisk).from(APDBDef.TeamSpecialCourse).where((APDBDef.TeamSpecialCourse.CourseId == courseId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.TeamSpecialCourse.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<TeamSpecialCourse> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.TeamSpecialCourse.Asterisk).from(APDBDef.TeamSpecialCourse);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.TeamSpecialCourse.CourseId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.TeamSpecialCourse.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<TeamSpecialCourse> GetInitData() {
                return new List<TeamSpecialCourse>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<TeamSpecialCourse> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    TeamSpecialCourse data = list[i];
                    if ((PrimaryGet(data.CourseId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 梯队-定向性课程开设登记表 Dal
        /// </summary>
        public partial class TeamSpecialCourseDal : TeamSpecialCourseDalBase {
            
            public TeamSpecialCourseDal() {
            }
            
            public TeamSpecialCourseDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 梯队-定向性课程实施安排表 DalBase
        /// </summary>
        public partial class TeamSpecialCourseItemDalBase : APDal {
            
            public TeamSpecialCourseItemDalBase() {
            }
            
            public TeamSpecialCourseItemDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(TeamSpecialCourseItem data) {
                if ((data.ItemId == 0)) {
                    data.ItemId = ((long)(GetNewId(APDBDef.TeamSpecialCourseItem.ItemId)));
                }
                var query = APQuery.insert(APDBDef.TeamSpecialCourseItem).values(APDBDef.TeamSpecialCourseItem.ItemId.SetValue(data.ItemId), APDBDef.TeamSpecialCourseItem.CourseId.SetValue(data.CourseId), APDBDef.TeamSpecialCourseItem.TeamId.SetValue(data.TeamId), APDBDef.TeamSpecialCourseItem.ItemDate.SetValue(data.ItemDate), APDBDef.TeamSpecialCourseItem.Location.SetValue(data.Location), APDBDef.TeamSpecialCourseItem.Title.SetValue(data.Title), APDBDef.TeamSpecialCourseItem.Content.SetValue(data.Content), APDBDef.TeamSpecialCourseItem.ActivityType.SetValue(data.ActivityType), APDBDef.TeamSpecialCourseItem.Speaker.SetValue(data.Speaker), APDBDef.TeamSpecialCourseItem.Remark.SetValue(data.Remark), APDBDef.TeamSpecialCourseItem.CreateDate.SetValue(data.CreateDate), APDBDef.TeamSpecialCourseItem.Creator.SetValue(data.Creator), APDBDef.TeamSpecialCourseItem.ModifyDate.SetValue(data.ModifyDate), APDBDef.TeamSpecialCourseItem.Modifier.SetValue(data.Modifier));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(TeamSpecialCourseItem data) {
                var query = APQuery.update(APDBDef.TeamSpecialCourseItem).values(APDBDef.TeamSpecialCourseItem.CourseId.SetValue(data.CourseId), APDBDef.TeamSpecialCourseItem.TeamId.SetValue(data.TeamId), APDBDef.TeamSpecialCourseItem.ItemDate.SetValue(data.ItemDate), APDBDef.TeamSpecialCourseItem.Location.SetValue(data.Location), APDBDef.TeamSpecialCourseItem.Title.SetValue(data.Title), APDBDef.TeamSpecialCourseItem.Content.SetValue(data.Content), APDBDef.TeamSpecialCourseItem.ActivityType.SetValue(data.ActivityType), APDBDef.TeamSpecialCourseItem.Speaker.SetValue(data.Speaker), APDBDef.TeamSpecialCourseItem.Remark.SetValue(data.Remark), APDBDef.TeamSpecialCourseItem.CreateDate.SetValue(data.CreateDate), APDBDef.TeamSpecialCourseItem.Creator.SetValue(data.Creator), APDBDef.TeamSpecialCourseItem.ModifyDate.SetValue(data.ModifyDate), APDBDef.TeamSpecialCourseItem.Modifier.SetValue(data.Modifier)).where((APDBDef.TeamSpecialCourseItem.ItemId == data.ItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long itemId, Object metadata) {
                var query = APQuery.update(APDBDef.TeamSpecialCourseItem).values(APSqlSetPhraseSelector.Select(APDBDef.TeamSpecialCourseItem, metadata)).where((APDBDef.TeamSpecialCourseItem.ItemId == itemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long itemId) {
                var query = APQuery.delete(APDBDef.TeamSpecialCourseItem).where((APDBDef.TeamSpecialCourseItem.ItemId == itemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.TeamSpecialCourseItem).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.TeamSpecialCourseItem.Asterisk.Count()).from(APDBDef.TeamSpecialCourseItem).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual TeamSpecialCourseItem PrimaryGet(long itemId) {
                var query = APQuery.select(APDBDef.TeamSpecialCourseItem.Asterisk).from(APDBDef.TeamSpecialCourseItem).where((APDBDef.TeamSpecialCourseItem.ItemId == itemId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.TeamSpecialCourseItem.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<TeamSpecialCourseItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.TeamSpecialCourseItem.Asterisk).from(APDBDef.TeamSpecialCourseItem);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.TeamSpecialCourseItem.ItemId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.TeamSpecialCourseItem.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<TeamSpecialCourseItem> GetInitData() {
                return new List<TeamSpecialCourseItem>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<TeamSpecialCourseItem> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    TeamSpecialCourseItem data = list[i];
                    if ((PrimaryGet(data.ItemId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 梯队-定向性课程实施安排表 Dal
        /// </summary>
        public partial class TeamSpecialCourseItemDal : TeamSpecialCourseItemDalBase {
            
            public TeamSpecialCourseItemDal() {
            }
            
            public TeamSpecialCourseItemDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 专家组 DalBase
        /// </summary>
        public partial class ExpGroupDalBase : APDal {
            
            public ExpGroupDalBase() {
            }
            
            public ExpGroupDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(ExpGroup data) {
                if ((data.GroupId == 0)) {
                    data.GroupId = ((long)(GetNewId(APDBDef.ExpGroup.GroupId)));
                }
                var query = APQuery.insert(APDBDef.ExpGroup).values(APDBDef.ExpGroup.GroupId.SetValue(data.GroupId), APDBDef.ExpGroup.Name.SetValue(data.Name), APDBDef.ExpGroup.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.ExpGroup.DeclareSubjectPKID.SetValue(data.DeclareSubjectPKID), APDBDef.ExpGroup.DeclareStagePKID.SetValue(data.DeclareStagePKID), APDBDef.ExpGroup.MemberCount.SetValue(data.MemberCount), APDBDef.ExpGroup.TeacherCount.SetValue(data.TeacherCount), APDBDef.ExpGroup.CreateDate.SetValue(data.CreateDate), APDBDef.ExpGroup.Creator.SetValue(data.Creator), APDBDef.ExpGroup.ModifyDate.SetValue(data.ModifyDate), APDBDef.ExpGroup.Modifier.SetValue(data.Modifier));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(ExpGroup data) {
                var query = APQuery.update(APDBDef.ExpGroup).values(APDBDef.ExpGroup.Name.SetValue(data.Name), APDBDef.ExpGroup.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.ExpGroup.DeclareSubjectPKID.SetValue(data.DeclareSubjectPKID), APDBDef.ExpGroup.DeclareStagePKID.SetValue(data.DeclareStagePKID), APDBDef.ExpGroup.MemberCount.SetValue(data.MemberCount), APDBDef.ExpGroup.TeacherCount.SetValue(data.TeacherCount), APDBDef.ExpGroup.CreateDate.SetValue(data.CreateDate), APDBDef.ExpGroup.Creator.SetValue(data.Creator), APDBDef.ExpGroup.ModifyDate.SetValue(data.ModifyDate), APDBDef.ExpGroup.Modifier.SetValue(data.Modifier)).where((APDBDef.ExpGroup.GroupId == data.GroupId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long groupId, Object metadata) {
                var query = APQuery.update(APDBDef.ExpGroup).values(APSqlSetPhraseSelector.Select(APDBDef.ExpGroup, metadata)).where((APDBDef.ExpGroup.GroupId == groupId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long groupId) {
                var query = APQuery.delete(APDBDef.ExpGroup).where((APDBDef.ExpGroup.GroupId == groupId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.ExpGroup).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.ExpGroup.Asterisk.Count()).from(APDBDef.ExpGroup).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual ExpGroup PrimaryGet(long groupId) {
                var query = APQuery.select(APDBDef.ExpGroup.Asterisk).from(APDBDef.ExpGroup).where((APDBDef.ExpGroup.GroupId == groupId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.ExpGroup.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<ExpGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.ExpGroup.Asterisk).from(APDBDef.ExpGroup);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.ExpGroup.GroupId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.ExpGroup.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<ExpGroup> GetInitData() {
                return new List<ExpGroup>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<ExpGroup> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    ExpGroup data = list[i];
                    if ((PrimaryGet(data.GroupId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 专家组 Dal
        /// </summary>
        public partial class ExpGroupDal : ExpGroupDalBase {
            
            public ExpGroupDal() {
            }
            
            public ExpGroupDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 专家组成员 DalBase
        /// </summary>
        public partial class ExpGroupMemberDalBase : APDal {
            
            public ExpGroupMemberDalBase() {
            }
            
            public ExpGroupMemberDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(ExpGroupMember data) {
                if ((data.GroupMemberId == 0)) {
                    data.GroupMemberId = ((long)(GetNewId(APDBDef.ExpGroupMember.GroupMemberId)));
                }
                var query = APQuery.insert(APDBDef.ExpGroupMember).values(APDBDef.ExpGroupMember.GroupMemberId.SetValue(data.GroupMemberId), APDBDef.ExpGroupMember.GroupId.SetValue(data.GroupId), APDBDef.ExpGroupMember.ExpectID.SetValue(data.ExpectID), APDBDef.ExpGroupMember.IsLeader.SetValue(data.IsLeader));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(ExpGroupMember data) {
                var query = APQuery.update(APDBDef.ExpGroupMember).values(APDBDef.ExpGroupMember.GroupId.SetValue(data.GroupId), APDBDef.ExpGroupMember.ExpectID.SetValue(data.ExpectID), APDBDef.ExpGroupMember.IsLeader.SetValue(data.IsLeader)).where((APDBDef.ExpGroupMember.GroupMemberId == data.GroupMemberId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long groupMemberId, Object metadata) {
                var query = APQuery.update(APDBDef.ExpGroupMember).values(APSqlSetPhraseSelector.Select(APDBDef.ExpGroupMember, metadata)).where((APDBDef.ExpGroupMember.GroupMemberId == groupMemberId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long groupMemberId) {
                var query = APQuery.delete(APDBDef.ExpGroupMember).where((APDBDef.ExpGroupMember.GroupMemberId == groupMemberId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.ExpGroupMember).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.ExpGroupMember.Asterisk.Count()).from(APDBDef.ExpGroupMember).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual ExpGroupMember PrimaryGet(long groupMemberId) {
                var query = APQuery.select(APDBDef.ExpGroupMember.Asterisk).from(APDBDef.ExpGroupMember).where((APDBDef.ExpGroupMember.GroupMemberId == groupMemberId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.ExpGroupMember.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<ExpGroupMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.ExpGroupMember.Asterisk).from(APDBDef.ExpGroupMember);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.ExpGroupMember.GroupMemberId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.ExpGroupMember.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<ExpGroupMember> GetInitData() {
                return new List<ExpGroupMember>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<ExpGroupMember> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    ExpGroupMember data = list[i];
                    if ((PrimaryGet(data.GroupMemberId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 专家组成员 Dal
        /// </summary>
        public partial class ExpGroupMemberDal : ExpGroupMemberDalBase {
            
            public ExpGroupMemberDal() {
            }
            
            public ExpGroupMemberDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 专家 DalBase
        /// </summary>
        public partial class ExpectDalBase : APDal {
            
            public ExpectDalBase() {
            }
            
            public ExpectDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Expect data) {
                var query = APQuery.insert(APDBDef.Expect).values(APDBDef.Expect.ExpectId.SetValue(data.ExpectId), APDBDef.Expect.GroupCount.SetValue(data.GroupCount));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Expect data) {
                var query = APQuery.update(APDBDef.Expect).values(APDBDef.Expect.GroupCount.SetValue(data.GroupCount)).where((APDBDef.Expect.ExpectId == data.ExpectId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long expectId, Object metadata) {
                var query = APQuery.update(APDBDef.Expect).values(APSqlSetPhraseSelector.Select(APDBDef.Expect, metadata)).where((APDBDef.Expect.ExpectId == expectId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long expectId) {
                var query = APQuery.delete(APDBDef.Expect).where((APDBDef.Expect.ExpectId == expectId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Expect).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Expect.Asterisk.Count()).from(APDBDef.Expect).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Expect PrimaryGet(long expectId) {
                var query = APQuery.select(APDBDef.Expect.Asterisk).from(APDBDef.Expect).where((APDBDef.Expect.ExpectId == expectId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Expect.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Expect> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Expect.Asterisk).from(APDBDef.Expect);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Expect.ExpectId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Expect.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Expect> GetInitData() {
                return new List<Expect>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Expect> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Expect data = list[i];
                    if ((PrimaryGet(data.ExpectId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 专家 Dal
        /// </summary>
        public partial class ExpectDal : ExpectDalBase {
            
            public ExpectDal() {
            }
            
            public ExpectDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 专家组-学员 DalBase
        /// </summary>
        public partial class ExpGroupTargetDalBase : APDal {
            
            public ExpGroupTargetDalBase() {
            }
            
            public ExpGroupTargetDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(ExpGroupTarget data) {
                var query = APQuery.insert(APDBDef.ExpGroupTarget).values(APDBDef.ExpGroupTarget.GroupId.SetValue(data.GroupId), APDBDef.ExpGroupTarget.MemberId.SetValue(data.MemberId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(ExpGroupTarget data) {
                var query = APQuery.update(APDBDef.ExpGroupTarget).values().where((APDBDef.ExpGroupTarget.GroupId == data.GroupId), (APDBDef.ExpGroupTarget.MemberId == data.MemberId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long groupId, long memberId, Object metadata) {
                var query = APQuery.update(APDBDef.ExpGroupTarget).values(APSqlSetPhraseSelector.Select(APDBDef.ExpGroupTarget, metadata)).where((APDBDef.ExpGroupTarget.GroupId == groupId), (APDBDef.ExpGroupTarget.MemberId == memberId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long groupId, long memberId) {
                var query = APQuery.delete(APDBDef.ExpGroupTarget).where((APDBDef.ExpGroupTarget.GroupId == groupId), (APDBDef.ExpGroupTarget.MemberId == memberId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.ExpGroupTarget).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.ExpGroupTarget.Asterisk.Count()).from(APDBDef.ExpGroupTarget).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual ExpGroupTarget PrimaryGet(long groupId, long memberId) {
                var query = APQuery.select(APDBDef.ExpGroupTarget.Asterisk).from(APDBDef.ExpGroupTarget).where((APDBDef.ExpGroupTarget.GroupId == groupId), (APDBDef.ExpGroupTarget.MemberId == memberId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.ExpGroupTarget.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<ExpGroupTarget> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.ExpGroupTarget.Asterisk).from(APDBDef.ExpGroupTarget);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.ExpGroupTarget.GroupId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.ExpGroupTarget.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<ExpGroupTarget> GetInitData() {
                return new List<ExpGroupTarget>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<ExpGroupTarget> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    ExpGroupTarget data = list[i];
                    if ((PrimaryGet(data.GroupId, data.MemberId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 专家组-学员 Dal
        /// </summary>
        public partial class ExpGroupTargetDal : ExpGroupTargetDalBase {
            
            public ExpGroupTargetDal() {
            }
            
            public ExpGroupTargetDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 评价-周期 DalBase
        /// </summary>
        public partial class EvalPeriodDalBase : APDal {
            
            public EvalPeriodDalBase() {
            }
            
            public EvalPeriodDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalPeriod data) {
                if ((data.PeriodId == 0)) {
                    data.PeriodId = ((long)(GetNewId(APDBDef.EvalPeriod.PeriodId)));
                }
                var query = APQuery.insert(APDBDef.EvalPeriod).values(APDBDef.EvalPeriod.PeriodId.SetValue(data.PeriodId), APDBDef.EvalPeriod.Name.SetValue(data.Name), APDBDef.EvalPeriod.BeginDate.SetValue(data.BeginDate), APDBDef.EvalPeriod.EndDate.SetValue(data.EndDate), APDBDef.EvalPeriod.AccessBeginDate.SetValue(data.AccessBeginDate), APDBDef.EvalPeriod.AccessEndDate.SetValue(data.AccessEndDate), APDBDef.EvalPeriod.AnalysisName.SetValue(data.AnalysisName), APDBDef.EvalPeriod.AnalysisType.SetValue(data.AnalysisType), APDBDef.EvalPeriod.IsCurrent.SetValue(data.IsCurrent), APDBDef.EvalPeriod.CreateDate.SetValue(data.CreateDate), APDBDef.EvalPeriod.Creator.SetValue(data.Creator), APDBDef.EvalPeriod.ModifyDate.SetValue(data.ModifyDate), APDBDef.EvalPeriod.Modifier.SetValue(data.Modifier));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalPeriod data) {
                var query = APQuery.update(APDBDef.EvalPeriod).values(APDBDef.EvalPeriod.Name.SetValue(data.Name), APDBDef.EvalPeriod.BeginDate.SetValue(data.BeginDate), APDBDef.EvalPeriod.EndDate.SetValue(data.EndDate), APDBDef.EvalPeriod.AccessBeginDate.SetValue(data.AccessBeginDate), APDBDef.EvalPeriod.AccessEndDate.SetValue(data.AccessEndDate), APDBDef.EvalPeriod.AnalysisName.SetValue(data.AnalysisName), APDBDef.EvalPeriod.AnalysisType.SetValue(data.AnalysisType), APDBDef.EvalPeriod.IsCurrent.SetValue(data.IsCurrent), APDBDef.EvalPeriod.CreateDate.SetValue(data.CreateDate), APDBDef.EvalPeriod.Creator.SetValue(data.Creator), APDBDef.EvalPeriod.ModifyDate.SetValue(data.ModifyDate), APDBDef.EvalPeriod.Modifier.SetValue(data.Modifier)).where((APDBDef.EvalPeriod.PeriodId == data.PeriodId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long periodId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalPeriod).values(APSqlSetPhraseSelector.Select(APDBDef.EvalPeriod, metadata)).where((APDBDef.EvalPeriod.PeriodId == periodId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long periodId) {
                var query = APQuery.delete(APDBDef.EvalPeriod).where((APDBDef.EvalPeriod.PeriodId == periodId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalPeriod).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalPeriod.Asterisk.Count()).from(APDBDef.EvalPeriod).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalPeriod PrimaryGet(long periodId) {
                var query = APQuery.select(APDBDef.EvalPeriod.Asterisk).from(APDBDef.EvalPeriod).where((APDBDef.EvalPeriod.PeriodId == periodId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalPeriod.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalPeriod.Asterisk).from(APDBDef.EvalPeriod);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalPeriod.PeriodId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalPeriod.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalPeriod> GetInitData() {
                return new List<EvalPeriod>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalPeriod> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalPeriod data = list[i];
                    if ((PrimaryGet(data.PeriodId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 评价-周期 Dal
        /// </summary>
        public partial class EvalPeriodDal : EvalPeriodDalBase {
            
            public EvalPeriodDal() {
            }
            
            public EvalPeriodDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 评价-校评-结果 DalBase
        /// </summary>
        public partial class EvalSchoolResultDalBase : APDal {
            
            public EvalSchoolResultDalBase() {
            }
            
            public EvalSchoolResultDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalSchoolResult data) {
                if ((data.ResultId == 0)) {
                    data.ResultId = ((long)(GetNewId(APDBDef.EvalSchoolResult.ResultId)));
                }
                var query = APQuery.insert(APDBDef.EvalSchoolResult).values(APDBDef.EvalSchoolResult.ResultId.SetValue(data.ResultId), APDBDef.EvalSchoolResult.PeriodId.SetValue(data.PeriodId), APDBDef.EvalSchoolResult.CompanyId.SetValue(data.CompanyId), APDBDef.EvalSchoolResult.TeacherId.SetValue(data.TeacherId), APDBDef.EvalSchoolResult.FullScore.SetValue(data.FullScore), APDBDef.EvalSchoolResult.Score.SetValue(data.Score), APDBDef.EvalSchoolResult.Morality.SetValue(data.Morality), APDBDef.EvalSchoolResult.Accesser.SetValue(data.Accesser), APDBDef.EvalSchoolResult.AccessDate.SetValue(data.AccessDate));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalSchoolResult data) {
                var query = APQuery.update(APDBDef.EvalSchoolResult).values(APDBDef.EvalSchoolResult.PeriodId.SetValue(data.PeriodId), APDBDef.EvalSchoolResult.CompanyId.SetValue(data.CompanyId), APDBDef.EvalSchoolResult.TeacherId.SetValue(data.TeacherId), APDBDef.EvalSchoolResult.FullScore.SetValue(data.FullScore), APDBDef.EvalSchoolResult.Score.SetValue(data.Score), APDBDef.EvalSchoolResult.Morality.SetValue(data.Morality), APDBDef.EvalSchoolResult.Accesser.SetValue(data.Accesser), APDBDef.EvalSchoolResult.AccessDate.SetValue(data.AccessDate)).where((APDBDef.EvalSchoolResult.ResultId == data.ResultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long resultId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalSchoolResult).values(APSqlSetPhraseSelector.Select(APDBDef.EvalSchoolResult, metadata)).where((APDBDef.EvalSchoolResult.ResultId == resultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long resultId) {
                var query = APQuery.delete(APDBDef.EvalSchoolResult).where((APDBDef.EvalSchoolResult.ResultId == resultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalSchoolResult).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalSchoolResult.Asterisk.Count()).from(APDBDef.EvalSchoolResult).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalSchoolResult PrimaryGet(long resultId) {
                var query = APQuery.select(APDBDef.EvalSchoolResult.Asterisk).from(APDBDef.EvalSchoolResult).where((APDBDef.EvalSchoolResult.ResultId == resultId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalSchoolResult.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalSchoolResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalSchoolResult.Asterisk).from(APDBDef.EvalSchoolResult);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalSchoolResult.ResultId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalSchoolResult.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalSchoolResult> GetInitData() {
                return new List<EvalSchoolResult>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalSchoolResult> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalSchoolResult data = list[i];
                    if ((PrimaryGet(data.ResultId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 评价-校评-结果 Dal
        /// </summary>
        public partial class EvalSchoolResultDal : EvalSchoolResultDalBase {
            
            public EvalSchoolResultDal() {
            }
            
            public EvalSchoolResultDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 评价-校评-结果项 DalBase
        /// </summary>
        public partial class EvalSchoolResultItemDalBase : APDal {
            
            public EvalSchoolResultItemDalBase() {
            }
            
            public EvalSchoolResultItemDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalSchoolResultItem data) {
                if ((data.ResultItemId == 0)) {
                    data.ResultItemId = ((long)(GetNewId(APDBDef.EvalSchoolResultItem.ResultItemId)));
                }
                var query = APQuery.insert(APDBDef.EvalSchoolResultItem).values(APDBDef.EvalSchoolResultItem.ResultItemId.SetValue(data.ResultItemId), APDBDef.EvalSchoolResultItem.ResultId.SetValue(data.ResultId), APDBDef.EvalSchoolResultItem.EvalItemKey.SetValue(data.EvalItemKey), APDBDef.EvalSchoolResultItem.ChooseValue.SetValue(data.ChooseValue), APDBDef.EvalSchoolResultItem.ResultValue.SetValue(data.ResultValue));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalSchoolResultItem data) {
                var query = APQuery.update(APDBDef.EvalSchoolResultItem).values(APDBDef.EvalSchoolResultItem.ResultId.SetValue(data.ResultId), APDBDef.EvalSchoolResultItem.EvalItemKey.SetValue(data.EvalItemKey), APDBDef.EvalSchoolResultItem.ChooseValue.SetValue(data.ChooseValue), APDBDef.EvalSchoolResultItem.ResultValue.SetValue(data.ResultValue)).where((APDBDef.EvalSchoolResultItem.ResultItemId == data.ResultItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long resultItemId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalSchoolResultItem).values(APSqlSetPhraseSelector.Select(APDBDef.EvalSchoolResultItem, metadata)).where((APDBDef.EvalSchoolResultItem.ResultItemId == resultItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long resultItemId) {
                var query = APQuery.delete(APDBDef.EvalSchoolResultItem).where((APDBDef.EvalSchoolResultItem.ResultItemId == resultItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalSchoolResultItem).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalSchoolResultItem.Asterisk.Count()).from(APDBDef.EvalSchoolResultItem).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalSchoolResultItem PrimaryGet(long resultItemId) {
                var query = APQuery.select(APDBDef.EvalSchoolResultItem.Asterisk).from(APDBDef.EvalSchoolResultItem).where((APDBDef.EvalSchoolResultItem.ResultItemId == resultItemId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalSchoolResultItem.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalSchoolResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalSchoolResultItem.Asterisk).from(APDBDef.EvalSchoolResultItem);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalSchoolResultItem.ResultItemId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalSchoolResultItem.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalSchoolResultItem> GetInitData() {
                return new List<EvalSchoolResultItem>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalSchoolResultItem> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalSchoolResultItem data = list[i];
                    if ((PrimaryGet(data.ResultItemId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 评价-校评-结果项 Dal
        /// </summary>
        public partial class EvalSchoolResultItemDal : EvalSchoolResultItemDalBase {
            
            public EvalSchoolResultItemDal() {
            }
            
            public EvalSchoolResultItemDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 评价-量评-结果 DalBase
        /// </summary>
        public partial class EvalVolumnResultDalBase : APDal {
            
            public EvalVolumnResultDalBase() {
            }
            
            public EvalVolumnResultDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalVolumnResult data) {
                if ((data.ResultId == 0)) {
                    data.ResultId = ((long)(GetNewId(APDBDef.EvalVolumnResult.ResultId)));
                }
                var query = APQuery.insert(APDBDef.EvalVolumnResult).values(APDBDef.EvalVolumnResult.ResultId.SetValue(data.ResultId), APDBDef.EvalVolumnResult.PeriodId.SetValue(data.PeriodId), APDBDef.EvalVolumnResult.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.EvalVolumnResult.TeacherId.SetValue(data.TeacherId), APDBDef.EvalVolumnResult.FullScore.SetValue(data.FullScore), APDBDef.EvalVolumnResult.Score.SetValue(data.Score), APDBDef.EvalVolumnResult.AnalysisContent.SetValue(data.AnalysisContent), APDBDef.EvalVolumnResult.Accesser.SetValue(data.Accesser), APDBDef.EvalVolumnResult.AccessDate.SetValue(data.AccessDate));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalVolumnResult data) {
                var query = APQuery.update(APDBDef.EvalVolumnResult).values(APDBDef.EvalVolumnResult.PeriodId.SetValue(data.PeriodId), APDBDef.EvalVolumnResult.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.EvalVolumnResult.TeacherId.SetValue(data.TeacherId), APDBDef.EvalVolumnResult.FullScore.SetValue(data.FullScore), APDBDef.EvalVolumnResult.Score.SetValue(data.Score), APDBDef.EvalVolumnResult.AnalysisContent.SetValue(data.AnalysisContent), APDBDef.EvalVolumnResult.Accesser.SetValue(data.Accesser), APDBDef.EvalVolumnResult.AccessDate.SetValue(data.AccessDate)).where((APDBDef.EvalVolumnResult.ResultId == data.ResultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long resultId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalVolumnResult).values(APSqlSetPhraseSelector.Select(APDBDef.EvalVolumnResult, metadata)).where((APDBDef.EvalVolumnResult.ResultId == resultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long resultId) {
                var query = APQuery.delete(APDBDef.EvalVolumnResult).where((APDBDef.EvalVolumnResult.ResultId == resultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalVolumnResult).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalVolumnResult.Asterisk.Count()).from(APDBDef.EvalVolumnResult).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalVolumnResult PrimaryGet(long resultId) {
                var query = APQuery.select(APDBDef.EvalVolumnResult.Asterisk).from(APDBDef.EvalVolumnResult).where((APDBDef.EvalVolumnResult.ResultId == resultId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalVolumnResult.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalVolumnResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalVolumnResult.Asterisk).from(APDBDef.EvalVolumnResult);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalVolumnResult.ResultId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalVolumnResult.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalVolumnResult> GetInitData() {
                return new List<EvalVolumnResult>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalVolumnResult> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalVolumnResult data = list[i];
                    if ((PrimaryGet(data.ResultId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 评价-量评-结果 Dal
        /// </summary>
        public partial class EvalVolumnResultDal : EvalVolumnResultDalBase {
            
            public EvalVolumnResultDal() {
            }
            
            public EvalVolumnResultDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 评价-量评-结果项 DalBase
        /// </summary>
        public partial class EvalVolumnResultItemDalBase : APDal {
            
            public EvalVolumnResultItemDalBase() {
            }
            
            public EvalVolumnResultItemDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalVolumnResultItem data) {
                if ((data.ResultItemId == 0)) {
                    data.ResultItemId = ((long)(GetNewId(APDBDef.EvalVolumnResultItem.ResultItemId)));
                }
                var query = APQuery.insert(APDBDef.EvalVolumnResultItem).values(APDBDef.EvalVolumnResultItem.ResultItemId.SetValue(data.ResultItemId), APDBDef.EvalVolumnResultItem.ResultId.SetValue(data.ResultId), APDBDef.EvalVolumnResultItem.EvalItemKey.SetValue(data.EvalItemKey), APDBDef.EvalVolumnResultItem.ChooseValue.SetValue(data.ChooseValue), APDBDef.EvalVolumnResultItem.ResultValue.SetValue(data.ResultValue));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalVolumnResultItem data) {
                var query = APQuery.update(APDBDef.EvalVolumnResultItem).values(APDBDef.EvalVolumnResultItem.ResultId.SetValue(data.ResultId), APDBDef.EvalVolumnResultItem.EvalItemKey.SetValue(data.EvalItemKey), APDBDef.EvalVolumnResultItem.ChooseValue.SetValue(data.ChooseValue), APDBDef.EvalVolumnResultItem.ResultValue.SetValue(data.ResultValue)).where((APDBDef.EvalVolumnResultItem.ResultItemId == data.ResultItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long resultItemId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalVolumnResultItem).values(APSqlSetPhraseSelector.Select(APDBDef.EvalVolumnResultItem, metadata)).where((APDBDef.EvalVolumnResultItem.ResultItemId == resultItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long resultItemId) {
                var query = APQuery.delete(APDBDef.EvalVolumnResultItem).where((APDBDef.EvalVolumnResultItem.ResultItemId == resultItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalVolumnResultItem).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalVolumnResultItem.Asterisk.Count()).from(APDBDef.EvalVolumnResultItem).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalVolumnResultItem PrimaryGet(long resultItemId) {
                var query = APQuery.select(APDBDef.EvalVolumnResultItem.Asterisk).from(APDBDef.EvalVolumnResultItem).where((APDBDef.EvalVolumnResultItem.ResultItemId == resultItemId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalVolumnResultItem.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalVolumnResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalVolumnResultItem.Asterisk).from(APDBDef.EvalVolumnResultItem);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalVolumnResultItem.ResultItemId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalVolumnResultItem.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalVolumnResultItem> GetInitData() {
                return new List<EvalVolumnResultItem>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalVolumnResultItem> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalVolumnResultItem data = list[i];
                    if ((PrimaryGet(data.ResultItemId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 评价-量评-结果项 Dal
        /// </summary>
        public partial class EvalVolumnResultItemDal : EvalVolumnResultItemDalBase {
            
            public EvalVolumnResultItemDal() {
            }
            
            public EvalVolumnResultItemDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 评价-质评-提交结果 DalBase
        /// </summary>
        public partial class EvalQualitySubmitResultDalBase : APDal {
            
            public EvalQualitySubmitResultDalBase() {
            }
            
            public EvalQualitySubmitResultDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalQualitySubmitResult data) {
                if ((data.ResultId == 0)) {
                    data.ResultId = ((long)(GetNewId(APDBDef.EvalQualitySubmitResult.ResultId)));
                }
                var query = APQuery.insert(APDBDef.EvalQualitySubmitResult).values(APDBDef.EvalQualitySubmitResult.ResultId.SetValue(data.ResultId), APDBDef.EvalQualitySubmitResult.PeriodId.SetValue(data.PeriodId), APDBDef.EvalQualitySubmitResult.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.EvalQualitySubmitResult.TeacherId.SetValue(data.TeacherId), APDBDef.EvalQualitySubmitResult.FullScore.SetValue(data.FullScore), APDBDef.EvalQualitySubmitResult.Score.SetValue(data.Score), APDBDef.EvalQualitySubmitResult.Characteristic.SetValue(data.Characteristic), APDBDef.EvalQualitySubmitResult.AdjustScore.SetValue(data.AdjustScore), APDBDef.EvalQualitySubmitResult.AccesserCount.SetValue(data.AccesserCount), APDBDef.EvalQualitySubmitResult.GroupId.SetValue(data.GroupId), APDBDef.EvalQualitySubmitResult.Accesser.SetValue(data.Accesser), APDBDef.EvalQualitySubmitResult.AccessDate.SetValue(data.AccessDate));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalQualitySubmitResult data) {
                var query = APQuery.update(APDBDef.EvalQualitySubmitResult).values(APDBDef.EvalQualitySubmitResult.PeriodId.SetValue(data.PeriodId), APDBDef.EvalQualitySubmitResult.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.EvalQualitySubmitResult.TeacherId.SetValue(data.TeacherId), APDBDef.EvalQualitySubmitResult.FullScore.SetValue(data.FullScore), APDBDef.EvalQualitySubmitResult.Score.SetValue(data.Score), APDBDef.EvalQualitySubmitResult.Characteristic.SetValue(data.Characteristic), APDBDef.EvalQualitySubmitResult.AdjustScore.SetValue(data.AdjustScore), APDBDef.EvalQualitySubmitResult.AccesserCount.SetValue(data.AccesserCount), APDBDef.EvalQualitySubmitResult.GroupId.SetValue(data.GroupId), APDBDef.EvalQualitySubmitResult.Accesser.SetValue(data.Accesser), APDBDef.EvalQualitySubmitResult.AccessDate.SetValue(data.AccessDate)).where((APDBDef.EvalQualitySubmitResult.ResultId == data.ResultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long resultId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalQualitySubmitResult).values(APSqlSetPhraseSelector.Select(APDBDef.EvalQualitySubmitResult, metadata)).where((APDBDef.EvalQualitySubmitResult.ResultId == resultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long resultId) {
                var query = APQuery.delete(APDBDef.EvalQualitySubmitResult).where((APDBDef.EvalQualitySubmitResult.ResultId == resultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalQualitySubmitResult).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalQualitySubmitResult.Asterisk.Count()).from(APDBDef.EvalQualitySubmitResult).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalQualitySubmitResult PrimaryGet(long resultId) {
                var query = APQuery.select(APDBDef.EvalQualitySubmitResult.Asterisk).from(APDBDef.EvalQualitySubmitResult).where((APDBDef.EvalQualitySubmitResult.ResultId == resultId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalQualitySubmitResult.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalQualitySubmitResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalQualitySubmitResult.Asterisk).from(APDBDef.EvalQualitySubmitResult);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalQualitySubmitResult.ResultId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalQualitySubmitResult.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalQualitySubmitResult> GetInitData() {
                return new List<EvalQualitySubmitResult>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalQualitySubmitResult> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalQualitySubmitResult data = list[i];
                    if ((PrimaryGet(data.ResultId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 评价-质评-提交结果 Dal
        /// </summary>
        public partial class EvalQualitySubmitResultDal : EvalQualitySubmitResultDalBase {
            
            public EvalQualitySubmitResultDal() {
            }
            
            public EvalQualitySubmitResultDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 评价-质评-结果 DalBase
        /// </summary>
        public partial class EvalQualityResultDalBase : APDal {
            
            public EvalQualityResultDalBase() {
            }
            
            public EvalQualityResultDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalQualityResult data) {
                if ((data.ResultId == 0)) {
                    data.ResultId = ((long)(GetNewId(APDBDef.EvalQualityResult.ResultId)));
                }
                var query = APQuery.insert(APDBDef.EvalQualityResult).values(APDBDef.EvalQualityResult.ResultId.SetValue(data.ResultId), APDBDef.EvalQualityResult.PeriodId.SetValue(data.PeriodId), APDBDef.EvalQualityResult.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.EvalQualityResult.TeacherId.SetValue(data.TeacherId), APDBDef.EvalQualityResult.FullScore.SetValue(data.FullScore), APDBDef.EvalQualityResult.Score.SetValue(data.Score), APDBDef.EvalQualityResult.Characteristic.SetValue(data.Characteristic), APDBDef.EvalQualityResult.DynamicScore1.SetValue(data.DynamicScore1), APDBDef.EvalQualityResult.DynamicScore2.SetValue(data.DynamicScore2), APDBDef.EvalQualityResult.DynamicScore3.SetValue(data.DynamicScore3), APDBDef.EvalQualityResult.Comment.SetValue(data.Comment), APDBDef.EvalQualityResult.GroupId.SetValue(data.GroupId), APDBDef.EvalQualityResult.Accesser.SetValue(data.Accesser), APDBDef.EvalQualityResult.AccessDate.SetValue(data.AccessDate));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalQualityResult data) {
                var query = APQuery.update(APDBDef.EvalQualityResult).values(APDBDef.EvalQualityResult.PeriodId.SetValue(data.PeriodId), APDBDef.EvalQualityResult.DeclareTargetPKID.SetValue(data.DeclareTargetPKID), APDBDef.EvalQualityResult.TeacherId.SetValue(data.TeacherId), APDBDef.EvalQualityResult.FullScore.SetValue(data.FullScore), APDBDef.EvalQualityResult.Score.SetValue(data.Score), APDBDef.EvalQualityResult.Characteristic.SetValue(data.Characteristic), APDBDef.EvalQualityResult.DynamicScore1.SetValue(data.DynamicScore1), APDBDef.EvalQualityResult.DynamicScore2.SetValue(data.DynamicScore2), APDBDef.EvalQualityResult.DynamicScore3.SetValue(data.DynamicScore3), APDBDef.EvalQualityResult.Comment.SetValue(data.Comment), APDBDef.EvalQualityResult.GroupId.SetValue(data.GroupId), APDBDef.EvalQualityResult.Accesser.SetValue(data.Accesser), APDBDef.EvalQualityResult.AccessDate.SetValue(data.AccessDate)).where((APDBDef.EvalQualityResult.ResultId == data.ResultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long resultId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalQualityResult).values(APSqlSetPhraseSelector.Select(APDBDef.EvalQualityResult, metadata)).where((APDBDef.EvalQualityResult.ResultId == resultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long resultId) {
                var query = APQuery.delete(APDBDef.EvalQualityResult).where((APDBDef.EvalQualityResult.ResultId == resultId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalQualityResult).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalQualityResult.Asterisk.Count()).from(APDBDef.EvalQualityResult).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalQualityResult PrimaryGet(long resultId) {
                var query = APQuery.select(APDBDef.EvalQualityResult.Asterisk).from(APDBDef.EvalQualityResult).where((APDBDef.EvalQualityResult.ResultId == resultId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalQualityResult.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalQualityResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalQualityResult.Asterisk).from(APDBDef.EvalQualityResult);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalQualityResult.ResultId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalQualityResult.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalQualityResult> GetInitData() {
                return new List<EvalQualityResult>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalQualityResult> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalQualityResult data = list[i];
                    if ((PrimaryGet(data.ResultId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 评价-质评-结果 Dal
        /// </summary>
        public partial class EvalQualityResultDal : EvalQualityResultDalBase {
            
            public EvalQualityResultDal() {
            }
            
            public EvalQualityResultDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 评价-质评-结果项 DalBase
        /// </summary>
        public partial class EvalQualityResultItemDalBase : APDal {
            
            public EvalQualityResultItemDalBase() {
            }
            
            public EvalQualityResultItemDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(EvalQualityResultItem data) {
                if ((data.ResultItemId == 0)) {
                    data.ResultItemId = ((long)(GetNewId(APDBDef.EvalQualityResultItem.ResultItemId)));
                }
                var query = APQuery.insert(APDBDef.EvalQualityResultItem).values(APDBDef.EvalQualityResultItem.ResultItemId.SetValue(data.ResultItemId), APDBDef.EvalQualityResultItem.ResultId.SetValue(data.ResultId), APDBDef.EvalQualityResultItem.EvalItemKey.SetValue(data.EvalItemKey), APDBDef.EvalQualityResultItem.ChooseValue.SetValue(data.ChooseValue), APDBDef.EvalQualityResultItem.ResultValue.SetValue(data.ResultValue));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(EvalQualityResultItem data) {
                var query = APQuery.update(APDBDef.EvalQualityResultItem).values(APDBDef.EvalQualityResultItem.ResultId.SetValue(data.ResultId), APDBDef.EvalQualityResultItem.EvalItemKey.SetValue(data.EvalItemKey), APDBDef.EvalQualityResultItem.ChooseValue.SetValue(data.ChooseValue), APDBDef.EvalQualityResultItem.ResultValue.SetValue(data.ResultValue)).where((APDBDef.EvalQualityResultItem.ResultItemId == data.ResultItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long resultItemId, Object metadata) {
                var query = APQuery.update(APDBDef.EvalQualityResultItem).values(APSqlSetPhraseSelector.Select(APDBDef.EvalQualityResultItem, metadata)).where((APDBDef.EvalQualityResultItem.ResultItemId == resultItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long resultItemId) {
                var query = APQuery.delete(APDBDef.EvalQualityResultItem).where((APDBDef.EvalQualityResultItem.ResultItemId == resultItemId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.EvalQualityResultItem).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.EvalQualityResultItem.Asterisk.Count()).from(APDBDef.EvalQualityResultItem).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual EvalQualityResultItem PrimaryGet(long resultItemId) {
                var query = APQuery.select(APDBDef.EvalQualityResultItem.Asterisk).from(APDBDef.EvalQualityResultItem).where((APDBDef.EvalQualityResultItem.ResultItemId == resultItemId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.EvalQualityResultItem.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<EvalQualityResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.EvalQualityResultItem.Asterisk).from(APDBDef.EvalQualityResultItem);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.EvalQualityResultItem.ResultItemId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.EvalQualityResultItem.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<EvalQualityResultItem> GetInitData() {
                return new List<EvalQualityResultItem>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<EvalQualityResultItem> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    EvalQualityResultItem data = list[i];
                    if ((PrimaryGet(data.ResultItemId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 评价-质评-结果项 Dal
        /// </summary>
        public partial class EvalQualityResultItemDal : EvalQualityResultItemDalBase {
            
            public EvalQualityResultItemDal() {
            }
            
            public EvalQualityResultItemDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 新闻 DalBase
        /// </summary>
        public partial class NewsDalBase : APDal {
            
            public NewsDalBase() {
            }
            
            public NewsDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(News data) {
                if ((data.NewsId == 0)) {
                    data.NewsId = ((long)(GetNewId(APDBDef.News.NewsId)));
                }
                var query = APQuery.insert(APDBDef.News).values(APDBDef.News.NewsId.SetValue(data.NewsId), APDBDef.News.Title.SetValue(data.Title), APDBDef.News.Content.SetValue(data.Content), APDBDef.News.ThumbUrl.SetValue(data.ThumbUrl), APDBDef.News.Creator.SetValue(data.Creator), APDBDef.News.CreatedTime.SetValue(data.CreatedTime));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(News data) {
                var query = APQuery.update(APDBDef.News).values(APDBDef.News.Title.SetValue(data.Title), APDBDef.News.Content.SetValue(data.Content), APDBDef.News.ThumbUrl.SetValue(data.ThumbUrl), APDBDef.News.Creator.SetValue(data.Creator), APDBDef.News.CreatedTime.SetValue(data.CreatedTime)).where((APDBDef.News.NewsId == data.NewsId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long newsId, Object metadata) {
                var query = APQuery.update(APDBDef.News).values(APSqlSetPhraseSelector.Select(APDBDef.News, metadata)).where((APDBDef.News.NewsId == newsId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long newsId) {
                var query = APQuery.delete(APDBDef.News).where((APDBDef.News.NewsId == newsId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.News).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.News.Asterisk.Count()).from(APDBDef.News).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual News PrimaryGet(long newsId) {
                var query = APQuery.select(APDBDef.News.Asterisk).from(APDBDef.News).where((APDBDef.News.NewsId == newsId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.News.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<News> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.News.Asterisk).from(APDBDef.News);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.News.NewsId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.News.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<News> GetInitData() {
                return new List<News>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<News> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    News data = list[i];
                    if ((PrimaryGet(data.NewsId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 新闻 Dal
        /// </summary>
        public partial class NewsDal : NewsDalBase {
            
            public NewsDal() {
            }
            
            public NewsDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 首页图片 DalBase
        /// </summary>
        public partial class HomePageImageDalBase : APDal {
            
            public HomePageImageDalBase() {
            }
            
            public HomePageImageDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(HomePageImage data) {
                if ((data.ImgId == 0)) {
                    data.ImgId = ((long)(GetNewId(APDBDef.HomePageImage.ImgId)));
                }
                var query = APQuery.insert(APDBDef.HomePageImage).values(APDBDef.HomePageImage.ImgId.SetValue(data.ImgId), APDBDef.HomePageImage.ImgUrl.SetValue(data.ImgUrl), APDBDef.HomePageImage.ImgName.SetValue(data.ImgName), APDBDef.HomePageImage.UploadDate.SetValue(data.UploadDate), APDBDef.HomePageImage.UseDate.SetValue(data.UseDate), APDBDef.HomePageImage.ImgType.SetValue(data.ImgType));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(HomePageImage data) {
                var query = APQuery.update(APDBDef.HomePageImage).values(APDBDef.HomePageImage.ImgUrl.SetValue(data.ImgUrl), APDBDef.HomePageImage.ImgName.SetValue(data.ImgName), APDBDef.HomePageImage.UploadDate.SetValue(data.UploadDate), APDBDef.HomePageImage.UseDate.SetValue(data.UseDate), APDBDef.HomePageImage.ImgType.SetValue(data.ImgType)).where((APDBDef.HomePageImage.ImgId == data.ImgId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long imgId, Object metadata) {
                var query = APQuery.update(APDBDef.HomePageImage).values(APSqlSetPhraseSelector.Select(APDBDef.HomePageImage, metadata)).where((APDBDef.HomePageImage.ImgId == imgId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long imgId) {
                var query = APQuery.delete(APDBDef.HomePageImage).where((APDBDef.HomePageImage.ImgId == imgId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.HomePageImage).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.HomePageImage.Asterisk.Count()).from(APDBDef.HomePageImage).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual HomePageImage PrimaryGet(long imgId) {
                var query = APQuery.select(APDBDef.HomePageImage.Asterisk).from(APDBDef.HomePageImage).where((APDBDef.HomePageImage.ImgId == imgId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.HomePageImage.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<HomePageImage> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.HomePageImage.Asterisk).from(APDBDef.HomePageImage);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.HomePageImage.ImgId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.HomePageImage.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<HomePageImage> GetInitData() {
                return new List<HomePageImage>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<HomePageImage> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    HomePageImage data = list[i];
                    if ((PrimaryGet(data.ImgId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 首页图片 Dal
        /// </summary>
        public partial class HomePageImageDal : HomePageImageDalBase {
            
            public HomePageImageDal() {
            }
            
            public HomePageImageDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 附件 DalBase
        /// </summary>
        public partial class AttachmentsDalBase : APDal {
            
            public AttachmentsDalBase() {
            }
            
            public AttachmentsDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Attachments data) {
                if ((data.ID == 0)) {
                    data.ID = ((long)(GetNewId(APDBDef.Attachments.ID)));
                }
                var query = APQuery.insert(APDBDef.Attachments).values(APDBDef.Attachments.ID.SetValue(data.ID), APDBDef.Attachments.Type.SetValue(data.Type), APDBDef.Attachments.JoinId.SetValue(data.JoinId), APDBDef.Attachments.UserId.SetValue(data.UserId), APDBDef.Attachments.AttachmentUrl.SetValue(data.AttachmentUrl), APDBDef.Attachments.AttachmentName.SetValue(data.AttachmentName), APDBDef.Attachments.UploadDate.SetValue(data.UploadDate), APDBDef.Attachments.PreviewUrl.SetValue(data.PreviewUrl));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Attachments data) {
                var query = APQuery.update(APDBDef.Attachments).values(APDBDef.Attachments.Type.SetValue(data.Type), APDBDef.Attachments.JoinId.SetValue(data.JoinId), APDBDef.Attachments.UserId.SetValue(data.UserId), APDBDef.Attachments.AttachmentUrl.SetValue(data.AttachmentUrl), APDBDef.Attachments.AttachmentName.SetValue(data.AttachmentName), APDBDef.Attachments.UploadDate.SetValue(data.UploadDate), APDBDef.Attachments.PreviewUrl.SetValue(data.PreviewUrl)).where((APDBDef.Attachments.ID == data.ID));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long iD, Object metadata) {
                var query = APQuery.update(APDBDef.Attachments).values(APSqlSetPhraseSelector.Select(APDBDef.Attachments, metadata)).where((APDBDef.Attachments.ID == iD));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long iD) {
                var query = APQuery.delete(APDBDef.Attachments).where((APDBDef.Attachments.ID == iD));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Attachments).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Attachments.Asterisk.Count()).from(APDBDef.Attachments).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Attachments PrimaryGet(long iD) {
                var query = APQuery.select(APDBDef.Attachments.Asterisk).from(APDBDef.Attachments).where((APDBDef.Attachments.ID == iD));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Attachments.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Attachments> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Attachments.Asterisk).from(APDBDef.Attachments);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Attachments.ID);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Attachments.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Attachments> GetInitData() {
                return new List<Attachments>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Attachments> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Attachments data = list[i];
                    if ((PrimaryGet(data.ID) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 附件 Dal
        /// </summary>
        public partial class AttachmentsDal : AttachmentsDalBase {
            
            public AttachmentsDal() {
            }
            
            public AttachmentsDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 通知 DalBase
        /// </summary>
        public partial class NoticeDalBase : APDal {
            
            public NoticeDalBase() {
            }
            
            public NoticeDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Notice data) {
                if ((data.NoticeId == 0)) {
                    data.NoticeId = ((long)(GetNewId(APDBDef.Notice.NoticeId)));
                }
                var query = APQuery.insert(APDBDef.Notice).values(APDBDef.Notice.NoticeId.SetValue(data.NoticeId), APDBDef.Notice.Title.SetValue(data.Title), APDBDef.Notice.Content.SetValue(data.Content), APDBDef.Notice.IsSend.SetValue(data.IsSend), APDBDef.Notice.Creator.SetValue(data.Creator), APDBDef.Notice.CreatedTime.SetValue(data.CreatedTime));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Notice data) {
                var query = APQuery.update(APDBDef.Notice).values(APDBDef.Notice.Title.SetValue(data.Title), APDBDef.Notice.Content.SetValue(data.Content), APDBDef.Notice.IsSend.SetValue(data.IsSend), APDBDef.Notice.Creator.SetValue(data.Creator), APDBDef.Notice.CreatedTime.SetValue(data.CreatedTime)).where((APDBDef.Notice.NoticeId == data.NoticeId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long noticeId, Object metadata) {
                var query = APQuery.update(APDBDef.Notice).values(APSqlSetPhraseSelector.Select(APDBDef.Notice, metadata)).where((APDBDef.Notice.NoticeId == noticeId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long noticeId) {
                var query = APQuery.delete(APDBDef.Notice).where((APDBDef.Notice.NoticeId == noticeId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Notice).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Notice.Asterisk.Count()).from(APDBDef.Notice).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Notice PrimaryGet(long noticeId) {
                var query = APQuery.select(APDBDef.Notice.Asterisk).from(APDBDef.Notice).where((APDBDef.Notice.NoticeId == noticeId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Notice.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Notice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Notice.Asterisk).from(APDBDef.Notice);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Notice.NoticeId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Notice.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Notice> GetInitData() {
                return new List<Notice>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Notice> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Notice data = list[i];
                    if ((PrimaryGet(data.NoticeId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 通知 Dal
        /// </summary>
        public partial class NoticeDal : NoticeDalBase {
            
            public NoticeDal() {
            }
            
            public NoticeDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 阅读通知 DalBase
        /// </summary>
        public partial class ReadNoticeDalBase : APDal {
            
            public ReadNoticeDalBase() {
            }
            
            public ReadNoticeDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(ReadNotice data) {
                var query = APQuery.insert(APDBDef.ReadNotice).values(APDBDef.ReadNotice.NoticeId.SetValue(data.NoticeId), APDBDef.ReadNotice.UserId.SetValue(data.UserId), APDBDef.ReadNotice.ReadTime.SetValue(data.ReadTime));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(ReadNotice data) {
                var query = APQuery.update(APDBDef.ReadNotice).values(APDBDef.ReadNotice.ReadTime.SetValue(data.ReadTime)).where((APDBDef.ReadNotice.NoticeId == data.NoticeId), (APDBDef.ReadNotice.UserId == data.UserId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long noticeId, long userId, Object metadata) {
                var query = APQuery.update(APDBDef.ReadNotice).values(APSqlSetPhraseSelector.Select(APDBDef.ReadNotice, metadata)).where((APDBDef.ReadNotice.NoticeId == noticeId), (APDBDef.ReadNotice.UserId == userId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long noticeId, long userId) {
                var query = APQuery.delete(APDBDef.ReadNotice).where((APDBDef.ReadNotice.NoticeId == noticeId), (APDBDef.ReadNotice.UserId == userId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.ReadNotice).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.ReadNotice.Asterisk.Count()).from(APDBDef.ReadNotice).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual ReadNotice PrimaryGet(long noticeId, long userId) {
                var query = APQuery.select(APDBDef.ReadNotice.Asterisk).from(APDBDef.ReadNotice).where((APDBDef.ReadNotice.NoticeId == noticeId), (APDBDef.ReadNotice.UserId == userId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.ReadNotice.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<ReadNotice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.ReadNotice.Asterisk).from(APDBDef.ReadNotice);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.ReadNotice.NoticeId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.ReadNotice.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<ReadNotice> GetInitData() {
                return new List<ReadNotice>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<ReadNotice> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    ReadNotice data = list[i];
                    if ((PrimaryGet(data.NoticeId, data.UserId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 阅读通知 Dal
        /// </summary>
        public partial class ReadNoticeDal : ReadNoticeDalBase {
            
            public ReadNoticeDal() {
            }
            
            public ReadNoticeDal(APDatabase db) : 
                    base(db) {
            }
        }
        
        /// <summary>
        /// 共享 DalBase
        /// </summary>
        public partial class ShareDalBase : APDal {
            
            public ShareDalBase() {
            }
            
            public ShareDalBase(APDatabase db) : 
                    base(db) {
            }
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public virtual void Insert(Share data) {
                if ((data.ShareId == 0)) {
                    data.ShareId = ((long)(GetNewId(APDBDef.Share.ShareId)));
                }
                var query = APQuery.insert(APDBDef.Share).values(APDBDef.Share.ShareId.SetValue(data.ShareId), APDBDef.Share.UserId.SetValue(data.UserId), APDBDef.Share.ItemId.SetValue(data.ItemId), APDBDef.Share.Title.SetValue(data.Title), APDBDef.Share.ParentType.SetValue(data.ParentType), APDBDef.Share.Type.SetValue(data.Type), APDBDef.Share.CreateDate.SetValue(data.CreateDate), APDBDef.Share.PubishDate.SetValue(data.PubishDate));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void Update(Share data) {
                var query = APQuery.update(APDBDef.Share).values(APDBDef.Share.UserId.SetValue(data.UserId), APDBDef.Share.ItemId.SetValue(data.ItemId), APDBDef.Share.Title.SetValue(data.Title), APDBDef.Share.ParentType.SetValue(data.ParentType), APDBDef.Share.Type.SetValue(data.Type), APDBDef.Share.CreateDate.SetValue(data.CreateDate), APDBDef.Share.PubishDate.SetValue(data.PubishDate)).where((APDBDef.Share.ShareId == data.ShareId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public virtual void UpdatePartial(long shareId, Object metadata) {
                var query = APQuery.update(APDBDef.Share).values(APSqlSetPhraseSelector.Select(APDBDef.Share, metadata)).where((APDBDef.Share.ShareId == shareId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public virtual void PrimaryDelete(long shareId) {
                var query = APQuery.delete(APDBDef.Share).where((APDBDef.Share.ShareId == shareId));
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public virtual void ConditionDelete(APSqlWherePhrase condition) {
                var query = APQuery.delete(APDBDef.Share).where(condition);
                ExecuteNonQuery(query);
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public virtual int ConditionQueryCount(APSqlWherePhrase condition) {
                var query = APQuery.select(APDBDef.Share.Asterisk.Count()).from(APDBDef.Share).where(condition);
                return ExecuteCount(query);
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public virtual Share PrimaryGet(long shareId) {
                var query = APQuery.select(APDBDef.Share.Asterisk).from(APDBDef.Share).where((APDBDef.Share.ShareId == shareId));
                IDataReader reader = ExecuteReader(query);
                try {
                    if (reader.Read()) {
                        return APDBDef.Share.Map(reader);
                    }
                    return null;
                }
                finally {
                    reader.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public virtual List<Share> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                var query = APQuery.select(APDBDef.Share.Asterisk).from(APDBDef.Share);
                if ((condition != null)) {
                    query.where(condition);
                }
                if ((orderBy != null)) {
                    query.order_by(orderBy);
                }
                if ((take != null)) {
                    query.take(take);
                }
                if ((skip != null)) {
                    query.skip(skip);
                }
                query.primary(APDBDef.Share.ShareId);
                IDataReader reader = ExecuteReader(query);
                return APDBDef.Share.MapList(reader);
            }
            
            /// <summary>
            /// 获得表的初始化数据。
            /// </summary>
            public virtual List<Share> GetInitData() {
                return new List<Share>();
            }
            
            /// <summary>
            /// 初始化数据。
            /// </summary>
            public virtual void InitData(APDBDef db) {
                List<Share> list = GetInitData();
                for (int i = 0; (i < list.Count); i = (i + 1)) {
                    Share data = list[i];
                    if ((PrimaryGet(data.ShareId) == null)) {
                        Insert(data);
                    }
                }
            }
        }
        
        /// <summary>
        /// 共享 Dal
        /// </summary>
        public partial class ShareDal : ShareDalBase {
            
            public ShareDal() {
            }
            
            public ShareDal(APDatabase db) : 
                    base(db) {
            }
        }
    }
    
    /// <summary>
    /// APBplDef 是一个自动生成的具有 Partial 修饰的类，用于定义所有的 Bpl 类。你可以 添加同名的 Partial 类来扩充功能。
    /// </summary>
    public partial class APBplDef {
        
        /// <summary>
        /// 选项列表 BplBase
        /// </summary>
        public partial class PicklistBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Picklist data) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Picklist data) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long picklistId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistDal.UpdatePartial(picklistId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long picklistId) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistDal.PrimaryDelete(picklistId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Picklist PrimaryGet(long picklistId) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistDal.PrimaryGet(picklistId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Picklist> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Picklist> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Picklist> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Picklist> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 选项列表 Dal
        /// </summary>
        public partial class PicklistBpl : PicklistBplBase {
        }
        
        /// <summary>
        /// 选项列表项 BplBase
        /// </summary>
        public partial class PicklistItemBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(PicklistItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistItemDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(PicklistItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistItemDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long picklistItemId, long picklistId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistItemDal.UpdatePartial(picklistItemId, picklistId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long picklistItemId, long picklistId) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistItemDal.PrimaryDelete(picklistItemId, picklistId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.PicklistItemDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistItemDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static PicklistItem PrimaryGet(long picklistItemId, long picklistId) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistItemDal.PrimaryGet(picklistItemId, picklistId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<PicklistItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistItemDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<PicklistItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistItemDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<PicklistItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.PicklistItemDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<PicklistItem> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 选项列表项 Dal
        /// </summary>
        public partial class PicklistItemBpl : PicklistItemBplBase {
        }
        
        /// <summary>
        /// 学校基础数据表 BplBase
        /// </summary>
        public partial class School_InfoBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(School_Info data) {
                APDBDef db = new APDBDef();
                try {
                    db.School_InfoDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(School_Info data) {
                APDBDef db = new APDBDef();
                try {
                    db.School_InfoDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(string id, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.School_InfoDal.UpdatePartial(id, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(string id) {
                APDBDef db = new APDBDef();
                try {
                    db.School_InfoDal.PrimaryDelete(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.School_InfoDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.School_InfoDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static School_Info PrimaryGet(string id) {
                APDBDef db = new APDBDef();
                try {
                    return db.School_InfoDal.PrimaryGet(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<School_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.School_InfoDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<School_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.School_InfoDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<School_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.School_InfoDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<School_Info> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 学校基础数据表 Dal
        /// </summary>
        public partial class School_InfoBpl : School_InfoBplBase {
        }
        
        /// <summary>
        /// 教职工基础数据表 BplBase
        /// </summary>
        public partial class Staff_InfoBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Staff_Info data) {
                APDBDef db = new APDBDef();
                try {
                    db.Staff_InfoDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Staff_Info data) {
                APDBDef db = new APDBDef();
                try {
                    db.Staff_InfoDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(string id, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.Staff_InfoDal.UpdatePartial(id, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(string id) {
                APDBDef db = new APDBDef();
                try {
                    db.Staff_InfoDal.PrimaryDelete(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.Staff_InfoDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.Staff_InfoDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Staff_Info PrimaryGet(string id) {
                APDBDef db = new APDBDef();
                try {
                    return db.Staff_InfoDal.PrimaryGet(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Staff_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.Staff_InfoDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Staff_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.Staff_InfoDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Staff_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.Staff_InfoDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Staff_Info> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 教职工基础数据表 Dal
        /// </summary>
        public partial class Staff_InfoBpl : Staff_InfoBplBase {
        }
        
        /// <summary>
        /// 用户 BplBase
        /// </summary>
        public partial class BzUserBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(BzUser data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(BzUser data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long id, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserDal.UpdatePartial(id, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long id) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserDal.PrimaryDelete(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static BzUser PrimaryGet(long id) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserDal.PrimaryGet(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<BzUser> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 用户 Dal
        /// </summary>
        public partial class BzUserBpl : BzUserBplBase {
        }
        
        /// <summary>
        /// UserClaim BplBase
        /// </summary>
        public partial class BzUserClaimBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(BzUserClaim data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserClaimDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(BzUserClaim data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserClaimDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(int id, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserClaimDal.UpdatePartial(id, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(int id) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserClaimDal.PrimaryDelete(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserClaimDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserClaimDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static BzUserClaim PrimaryGet(int id) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserClaimDal.PrimaryGet(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserClaim> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserClaimDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserClaim> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserClaimDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserClaim> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserClaimDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<BzUserClaim> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// UserClaim Dal
        /// </summary>
        public partial class BzUserClaimBpl : BzUserClaimBplBase {
        }
        
        /// <summary>
        /// 用户简档 BplBase
        /// </summary>
        public partial class BzUserProfileBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(BzUserProfile data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserProfileDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(BzUserProfile data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserProfileDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long userId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserProfileDal.UpdatePartial(userId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long userId) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserProfileDal.PrimaryDelete(userId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserProfileDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserProfileDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static BzUserProfile PrimaryGet(long userId) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserProfileDal.PrimaryGet(userId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserProfileDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserProfileDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserProfileDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<BzUserProfile> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 用户简档 Dal
        /// </summary>
        public partial class BzUserProfileBpl : BzUserProfileBplBase {
        }
        
        /// <summary>
        /// 角色 BplBase
        /// </summary>
        public partial class BzRoleBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(BzRole data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzRoleDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(BzRole data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzRoleDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long id, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.BzRoleDal.UpdatePartial(id, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long id) {
                APDBDef db = new APDBDef();
                try {
                    db.BzRoleDal.PrimaryDelete(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.BzRoleDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzRoleDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static BzRole PrimaryGet(long id) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzRoleDal.PrimaryGet(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzRoleDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzRoleDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzRoleDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<BzRole> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 角色 Dal
        /// </summary>
        public partial class BzRoleBpl : BzRoleBplBase {
        }
        
        /// <summary>
        /// 用户角色 BplBase
        /// </summary>
        public partial class BzUserRoleBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(BzUserRole data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserRoleDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(BzUserRole data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserRoleDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long userRoleId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserRoleDal.UpdatePartial(userRoleId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long userRoleId) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserRoleDal.PrimaryDelete(userRoleId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserRoleDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserRoleDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static BzUserRole PrimaryGet(long userRoleId) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserRoleDal.PrimaryGet(userRoleId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserRoleDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserRoleDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserRoleDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<BzUserRole> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 用户角色 Dal
        /// </summary>
        public partial class BzUserRoleBpl : BzUserRoleBplBase {
        }
        
        /// <summary>
        /// 用户信息修改周期表 BplBase
        /// </summary>
        public partial class ProfileModifyPeriodBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(ProfileModifyPeriod data) {
                APDBDef db = new APDBDef();
                try {
                    db.ProfileModifyPeriodDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(ProfileModifyPeriod data) {
                APDBDef db = new APDBDef();
                try {
                    db.ProfileModifyPeriodDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long periodId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ProfileModifyPeriodDal.UpdatePartial(periodId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long periodId) {
                APDBDef db = new APDBDef();
                try {
                    db.ProfileModifyPeriodDal.PrimaryDelete(periodId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ProfileModifyPeriodDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProfileModifyPeriodDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static ProfileModifyPeriod PrimaryGet(long periodId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProfileModifyPeriodDal.PrimaryGet(periodId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ProfileModifyPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProfileModifyPeriodDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ProfileModifyPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProfileModifyPeriodDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ProfileModifyPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ProfileModifyPeriodDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<ProfileModifyPeriod> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 用户信息修改周期表 Dal
        /// </summary>
        public partial class ProfileModifyPeriodBpl : ProfileModifyPeriodBplBase {
        }
        
        /// <summary>
        /// 用户简档历史表 BplBase
        /// </summary>
        public partial class BzUserProfileHistoryBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(BzUserProfileHistory data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserProfileHistoryDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(BzUserProfileHistory data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserProfileHistoryDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long id, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserProfileHistoryDal.UpdatePartial(id, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long id) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserProfileHistoryDal.PrimaryDelete(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.BzUserProfileHistoryDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserProfileHistoryDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static BzUserProfileHistory PrimaryGet(long id) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserProfileHistoryDal.PrimaryGet(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserProfileHistory> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserProfileHistoryDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserProfileHistory> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserProfileHistoryDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzUserProfileHistory> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzUserProfileHistoryDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<BzUserProfileHistory> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 用户简档历史表 Dal
        /// </summary>
        public partial class BzUserProfileHistoryBpl : BzUserProfileHistoryBplBase {
        }
        
        /// <summary>
        /// 申报历史表 BplBase
        /// </summary>
        public partial class DeclareBaseHistoryBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(DeclareBaseHistory data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareBaseHistoryDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(DeclareBaseHistory data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareBaseHistoryDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long id, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareBaseHistoryDal.UpdatePartial(id, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long id) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareBaseHistoryDal.PrimaryDelete(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareBaseHistoryDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareBaseHistoryDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static DeclareBaseHistory PrimaryGet(long id) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareBaseHistoryDal.PrimaryGet(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareBaseHistory> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareBaseHistoryDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareBaseHistory> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareBaseHistoryDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareBaseHistory> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareBaseHistoryDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<DeclareBaseHistory> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报历史表 Dal
        /// </summary>
        public partial class DeclareBaseHistoryBpl : DeclareBaseHistoryBplBase {
        }
        
        /// <summary>
        /// 单位 BplBase
        /// </summary>
        public partial class CompanyBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Company data) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Company data) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long companyId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyDal.UpdatePartial(companyId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long companyId) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyDal.PrimaryDelete(companyId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Company PrimaryGet(long companyId) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyDal.PrimaryGet(companyId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Company> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Company> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Company> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Company> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 单位 Dal
        /// </summary>
        public partial class CompanyBpl : CompanyBplBase {
        }
        
        /// <summary>
        /// 单位-管理员 BplBase
        /// </summary>
        public partial class CompanyAccesserBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(CompanyAccesser data) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyAccesserDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(CompanyAccesser data) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyAccesserDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long companyId, long userId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyAccesserDal.UpdatePartial(companyId, userId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long companyId, long userId) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyAccesserDal.PrimaryDelete(companyId, userId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyAccesserDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyAccesserDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static CompanyAccesser PrimaryGet(long companyId, long userId) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyAccesserDal.PrimaryGet(companyId, userId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<CompanyAccesser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyAccesserDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<CompanyAccesser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyAccesserDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<CompanyAccesser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyAccesserDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<CompanyAccesser> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 单位-管理员 Dal
        /// </summary>
        public partial class CompanyAccesserBpl : CompanyAccesserBplBase {
        }
        
        /// <summary>
        /// 单位-申报教师 BplBase
        /// </summary>
        public partial class CompanyDeclareBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(CompanyDeclare data) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyDeclareDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(CompanyDeclare data) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyDeclareDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long companyId, long teacherId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyDeclareDal.UpdatePartial(companyId, teacherId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long companyId, long teacherId) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyDeclareDal.PrimaryDelete(companyId, teacherId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.CompanyDeclareDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyDeclareDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static CompanyDeclare PrimaryGet(long companyId, long teacherId) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyDeclareDal.PrimaryGet(companyId, teacherId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<CompanyDeclare> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyDeclareDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<CompanyDeclare> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyDeclareDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<CompanyDeclare> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.CompanyDeclareDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<CompanyDeclare> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 单位-申报教师 Dal
        /// </summary>
        public partial class CompanyDeclareBpl : CompanyDeclareBplBase {
        }
        
        /// <summary>
        /// 权限 BplBase
        /// </summary>
        public partial class BzPermissionBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(BzPermission data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzPermissionDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(BzPermission data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzPermissionDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long id, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.BzPermissionDal.UpdatePartial(id, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long id) {
                APDBDef db = new APDBDef();
                try {
                    db.BzPermissionDal.PrimaryDelete(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.BzPermissionDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzPermissionDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static BzPermission PrimaryGet(long id) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzPermissionDal.PrimaryGet(id);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzPermission> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzPermissionDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzPermission> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzPermissionDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzPermission> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzPermissionDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<BzPermission> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 权限 Dal
        /// </summary>
        public partial class BzPermissionBpl : BzPermissionBplBase {
        }
        
        /// <summary>
        /// 角色权限 BplBase
        /// </summary>
        public partial class BzRolePermissionBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(BzRolePermission data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzRolePermissionDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(BzRolePermission data) {
                APDBDef db = new APDBDef();
                try {
                    db.BzRolePermissionDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long rolePermissionId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.BzRolePermissionDal.UpdatePartial(rolePermissionId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long rolePermissionId) {
                APDBDef db = new APDBDef();
                try {
                    db.BzRolePermissionDal.PrimaryDelete(rolePermissionId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.BzRolePermissionDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzRolePermissionDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static BzRolePermission PrimaryGet(long rolePermissionId) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzRolePermissionDal.PrimaryGet(rolePermissionId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzRolePermission> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzRolePermissionDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzRolePermission> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzRolePermissionDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<BzRolePermission> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.BzRolePermissionDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<BzRolePermission> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 角色权限 Dal
        /// </summary>
        public partial class BzRolePermissionBpl : BzRolePermissionBplBase {
        }
        
        /// <summary>
        /// 申报 BplBase
        /// </summary>
        public partial class DeclareBaseBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(DeclareBase data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareBaseDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(DeclareBase data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareBaseDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long teacherId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareBaseDal.UpdatePartial(teacherId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long teacherId) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareBaseDal.PrimaryDelete(teacherId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareBaseDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareBaseDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static DeclareBase PrimaryGet(long teacherId) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareBaseDal.PrimaryGet(teacherId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareBase> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareBaseDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareBase> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareBaseDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareBase> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareBaseDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<DeclareBase> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报 Dal
        /// </summary>
        public partial class DeclareBaseBpl : DeclareBaseBplBase {
        }
        
        /// <summary>
        /// 申报-简历 BplBase
        /// </summary>
        public partial class DeclareResumeBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(DeclareResume data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareResumeDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(DeclareResume data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareResumeDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long declareResumeId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareResumeDal.UpdatePartial(declareResumeId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long declareResumeId) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareResumeDal.PrimaryDelete(declareResumeId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareResumeDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareResumeDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static DeclareResume PrimaryGet(long declareResumeId) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareResumeDal.PrimaryGet(declareResumeId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareResume> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareResumeDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareResume> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareResumeDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareResume> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareResumeDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<DeclareResume> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报-简历 Dal
        /// </summary>
        public partial class DeclareResumeBpl : DeclareResumeBplBase {
        }
        
        /// <summary>
        /// 申报-内容 BplBase
        /// </summary>
        public partial class DeclareContentBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(DeclareContent data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareContentDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(DeclareContent data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareContentDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long declareContentId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareContentDal.UpdatePartial(declareContentId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long declareContentId) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareContentDal.PrimaryDelete(declareContentId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareContentDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareContentDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static DeclareContent PrimaryGet(long declareContentId) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareContentDal.PrimaryGet(declareContentId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareContentDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareContentDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareContentDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<DeclareContent> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报-内容 Dal
        /// </summary>
        public partial class DeclareContentBpl : DeclareContentBplBase {
        }
        
        /// <summary>
        /// 申报-活动 BplBase
        /// </summary>
        public partial class DeclareActiveBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(DeclareActive data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareActiveDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(DeclareActive data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareActiveDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long declareActiveId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareActiveDal.UpdatePartial(declareActiveId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long declareActiveId) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareActiveDal.PrimaryDelete(declareActiveId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareActiveDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareActiveDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static DeclareActive PrimaryGet(long declareActiveId) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareActiveDal.PrimaryGet(declareActiveId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareActiveDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareActiveDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareActiveDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<DeclareActive> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报-活动 Dal
        /// </summary>
        public partial class DeclareActiveBpl : DeclareActiveBplBase {
        }
        
        /// <summary>
        /// 申报-科研成果 BplBase
        /// </summary>
        public partial class DeclareAchievementBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(DeclareAchievement data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareAchievementDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(DeclareAchievement data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareAchievementDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long declareAchievementId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareAchievementDal.UpdatePartial(declareAchievementId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long declareAchievementId) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareAchievementDal.PrimaryDelete(declareAchievementId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareAchievementDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareAchievementDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static DeclareAchievement PrimaryGet(long declareAchievementId) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareAchievementDal.PrimaryGet(declareAchievementId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareAchievement> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareAchievementDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareAchievement> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareAchievementDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareAchievement> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareAchievementDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<DeclareAchievement> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报-科研成果 Dal
        /// </summary>
        public partial class DeclareAchievementBpl : DeclareAchievementBplBase {
        }
        
        /// <summary>
        /// 申报-制度建设 BplBase
        /// </summary>
        public partial class DeclareOrgConstBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(DeclareOrgConst data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareOrgConstDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(DeclareOrgConst data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareOrgConstDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long declareOrgConstId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareOrgConstDal.UpdatePartial(declareOrgConstId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long declareOrgConstId) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareOrgConstDal.PrimaryDelete(declareOrgConstId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareOrgConstDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareOrgConstDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static DeclareOrgConst PrimaryGet(long declareOrgConstId) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareOrgConstDal.PrimaryGet(declareOrgConstId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareOrgConst> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareOrgConstDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareOrgConst> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareOrgConstDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareOrgConst> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareOrgConstDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<DeclareOrgConst> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报-制度建设 Dal
        /// </summary>
        public partial class DeclareOrgConstBpl : DeclareOrgConstBplBase {
        }
        
        /// <summary>
        /// 申报审核 BplBase
        /// </summary>
        public partial class DeclareReviewBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(DeclareReview data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareReviewDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(DeclareReview data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareReviewDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long declareReviewId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareReviewDal.UpdatePartial(declareReviewId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long declareReviewId) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareReviewDal.PrimaryDelete(declareReviewId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareReviewDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareReviewDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static DeclareReview PrimaryGet(long declareReviewId) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareReviewDal.PrimaryGet(declareReviewId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareReview> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareReviewDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareReview> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareReviewDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareReview> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareReviewDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<DeclareReview> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报审核 Dal
        /// </summary>
        public partial class DeclareReviewBpl : DeclareReviewBplBase {
        }
        
        /// <summary>
        /// 申报材料，用于申报流程 BplBase
        /// </summary>
        public partial class DeclareMaterialBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(DeclareMaterial data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareMaterialDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(DeclareMaterial data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareMaterialDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long materialId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareMaterialDal.UpdatePartial(materialId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long materialId) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareMaterialDal.PrimaryDelete(materialId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareMaterialDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareMaterialDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static DeclareMaterial PrimaryGet(long materialId) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareMaterialDal.PrimaryGet(materialId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareMaterial> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareMaterialDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareMaterial> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareMaterialDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareMaterial> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareMaterialDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<DeclareMaterial> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报材料，用于申报流程 Dal
        /// </summary>
        public partial class DeclareMaterialBpl : DeclareMaterialBplBase {
        }
        
        /// <summary>
        /// 申报材料，基本信息 BplBase
        /// </summary>
        public partial class DeclareProfileBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(DeclareProfile data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareProfileDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(DeclareProfile data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareProfileDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long declareProfileId, long userId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareProfileDal.UpdatePartial(declareProfileId, userId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long declareProfileId, long userId) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareProfileDal.PrimaryDelete(declareProfileId, userId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclareProfileDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareProfileDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static DeclareProfile PrimaryGet(long declareProfileId, long userId) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareProfileDal.PrimaryGet(declareProfileId, userId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareProfileDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareProfileDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclareProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclareProfileDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<DeclareProfile> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报材料，基本信息 Dal
        /// </summary>
        public partial class DeclareProfileBpl : DeclareProfileBplBase {
        }
        
        /// <summary>
        /// 申报周期 BplBase
        /// </summary>
        public partial class DeclarePeriodBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(DeclarePeriod data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclarePeriodDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(DeclarePeriod data) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclarePeriodDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long periodId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclarePeriodDal.UpdatePartial(periodId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long periodId) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclarePeriodDal.PrimaryDelete(periodId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.DeclarePeriodDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclarePeriodDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static DeclarePeriod PrimaryGet(long periodId) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclarePeriodDal.PrimaryGet(periodId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclarePeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclarePeriodDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclarePeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclarePeriodDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<DeclarePeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.DeclarePeriodDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<DeclarePeriod> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 申报周期 Dal
        /// </summary>
        public partial class DeclarePeriodBpl : DeclarePeriodBplBase {
        }
        
        /// <summary>
        /// 梯队-学员 BplBase
        /// </summary>
        public partial class TeamMemberBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(TeamMember data) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamMemberDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(TeamMember data) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamMemberDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long teamId, long memberId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamMemberDal.UpdatePartial(teamId, memberId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long teamId, long memberId) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamMemberDal.PrimaryDelete(teamId, memberId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamMemberDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamMemberDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static TeamMember PrimaryGet(long teamId, long memberId) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamMemberDal.PrimaryGet(teamId, memberId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamMemberDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamMemberDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamMemberDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<TeamMember> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 梯队-学员 Dal
        /// </summary>
        public partial class TeamMemberBpl : TeamMemberBplBase {
        }
        
        /// <summary>
        /// 梯队-内容 BplBase
        /// </summary>
        public partial class TeamContentBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(TeamContent data) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamContentDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(TeamContent data) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamContentDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long teamContentId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamContentDal.UpdatePartial(teamContentId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long teamContentId) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamContentDal.PrimaryDelete(teamContentId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamContentDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamContentDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static TeamContent PrimaryGet(long teamContentId) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamContentDal.PrimaryGet(teamContentId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamContentDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamContentDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamContentDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<TeamContent> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 梯队-内容 Dal
        /// </summary>
        public partial class TeamContentBpl : TeamContentBplBase {
        }
        
        /// <summary>
        /// 梯队-活动 BplBase
        /// </summary>
        public partial class TeamActiveBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(TeamActive data) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamActiveDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(TeamActive data) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamActiveDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long teamActiveId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamActiveDal.UpdatePartial(teamActiveId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long teamActiveId) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamActiveDal.PrimaryDelete(teamActiveId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamActiveDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamActiveDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static TeamActive PrimaryGet(long teamActiveId) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamActiveDal.PrimaryGet(teamActiveId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamActiveDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamActiveDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamActiveDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<TeamActive> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 梯队-活动 Dal
        /// </summary>
        public partial class TeamActiveBpl : TeamActiveBplBase {
        }
        
        /// <summary>
        /// 梯队-活动成果 BplBase
        /// </summary>
        public partial class TeamActiveResultBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(TeamActiveResult data) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamActiveResultDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(TeamActiveResult data) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamActiveResultDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long resultId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamActiveResultDal.UpdatePartial(resultId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long resultId) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamActiveResultDal.PrimaryDelete(resultId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamActiveResultDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamActiveResultDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static TeamActiveResult PrimaryGet(long resultId) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamActiveResultDal.PrimaryGet(resultId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamActiveResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamActiveResultDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamActiveResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamActiveResultDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamActiveResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamActiveResultDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<TeamActiveResult> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 梯队-活动成果 Dal
        /// </summary>
        public partial class TeamActiveResultBpl : TeamActiveResultBplBase {
        }
        
        /// <summary>
        /// 梯队-活动内容 BplBase
        /// </summary>
        public partial class TeamActiveItemBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(TeamActiveItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamActiveItemDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(TeamActiveItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamActiveItemDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long itemId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamActiveItemDal.UpdatePartial(itemId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long itemId) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamActiveItemDal.PrimaryDelete(itemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamActiveItemDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamActiveItemDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static TeamActiveItem PrimaryGet(long itemId) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamActiveItemDal.PrimaryGet(itemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamActiveItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamActiveItemDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamActiveItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamActiveItemDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamActiveItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamActiveItemDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<TeamActiveItem> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 梯队-活动内容 Dal
        /// </summary>
        public partial class TeamActiveItemBpl : TeamActiveItemBplBase {
        }
        
        /// <summary>
        /// 梯队-定向性课程开设登记表 BplBase
        /// </summary>
        public partial class TeamSpecialCourseBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(TeamSpecialCourse data) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamSpecialCourseDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(TeamSpecialCourse data) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamSpecialCourseDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long courseId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamSpecialCourseDal.UpdatePartial(courseId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long courseId) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamSpecialCourseDal.PrimaryDelete(courseId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamSpecialCourseDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamSpecialCourseDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static TeamSpecialCourse PrimaryGet(long courseId) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamSpecialCourseDal.PrimaryGet(courseId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamSpecialCourse> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamSpecialCourseDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamSpecialCourse> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamSpecialCourseDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamSpecialCourse> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamSpecialCourseDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<TeamSpecialCourse> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 梯队-定向性课程开设登记表 Dal
        /// </summary>
        public partial class TeamSpecialCourseBpl : TeamSpecialCourseBplBase {
        }
        
        /// <summary>
        /// 梯队-定向性课程实施安排表 BplBase
        /// </summary>
        public partial class TeamSpecialCourseItemBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(TeamSpecialCourseItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamSpecialCourseItemDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(TeamSpecialCourseItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamSpecialCourseItemDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long itemId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamSpecialCourseItemDal.UpdatePartial(itemId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long itemId) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamSpecialCourseItemDal.PrimaryDelete(itemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.TeamSpecialCourseItemDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamSpecialCourseItemDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static TeamSpecialCourseItem PrimaryGet(long itemId) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamSpecialCourseItemDal.PrimaryGet(itemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamSpecialCourseItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamSpecialCourseItemDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamSpecialCourseItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamSpecialCourseItemDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<TeamSpecialCourseItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.TeamSpecialCourseItemDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<TeamSpecialCourseItem> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 梯队-定向性课程实施安排表 Dal
        /// </summary>
        public partial class TeamSpecialCourseItemBpl : TeamSpecialCourseItemBplBase {
        }
        
        /// <summary>
        /// 专家组 BplBase
        /// </summary>
        public partial class ExpGroupBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(ExpGroup data) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpGroupDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(ExpGroup data) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpGroupDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long groupId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpGroupDal.UpdatePartial(groupId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long groupId) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpGroupDal.PrimaryDelete(groupId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpGroupDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpGroupDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static ExpGroup PrimaryGet(long groupId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpGroupDal.PrimaryGet(groupId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ExpGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpGroupDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ExpGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpGroupDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ExpGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpGroupDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<ExpGroup> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 专家组 Dal
        /// </summary>
        public partial class ExpGroupBpl : ExpGroupBplBase {
        }
        
        /// <summary>
        /// 专家组成员 BplBase
        /// </summary>
        public partial class ExpGroupMemberBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(ExpGroupMember data) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpGroupMemberDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(ExpGroupMember data) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpGroupMemberDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long groupMemberId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpGroupMemberDal.UpdatePartial(groupMemberId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long groupMemberId) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpGroupMemberDal.PrimaryDelete(groupMemberId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpGroupMemberDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpGroupMemberDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static ExpGroupMember PrimaryGet(long groupMemberId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpGroupMemberDal.PrimaryGet(groupMemberId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ExpGroupMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpGroupMemberDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ExpGroupMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpGroupMemberDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ExpGroupMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpGroupMemberDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<ExpGroupMember> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 专家组成员 Dal
        /// </summary>
        public partial class ExpGroupMemberBpl : ExpGroupMemberBplBase {
        }
        
        /// <summary>
        /// 专家 BplBase
        /// </summary>
        public partial class ExpectBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Expect data) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpectDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Expect data) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpectDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long expectId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpectDal.UpdatePartial(expectId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long expectId) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpectDal.PrimaryDelete(expectId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpectDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpectDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Expect PrimaryGet(long expectId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpectDal.PrimaryGet(expectId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Expect> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpectDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Expect> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpectDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Expect> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpectDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Expect> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 专家 Dal
        /// </summary>
        public partial class ExpectBpl : ExpectBplBase {
        }
        
        /// <summary>
        /// 专家组-学员 BplBase
        /// </summary>
        public partial class ExpGroupTargetBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(ExpGroupTarget data) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpGroupTargetDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(ExpGroupTarget data) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpGroupTargetDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long groupId, long memberId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpGroupTargetDal.UpdatePartial(groupId, memberId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long groupId, long memberId) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpGroupTargetDal.PrimaryDelete(groupId, memberId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ExpGroupTargetDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpGroupTargetDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static ExpGroupTarget PrimaryGet(long groupId, long memberId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpGroupTargetDal.PrimaryGet(groupId, memberId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ExpGroupTarget> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpGroupTargetDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ExpGroupTarget> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpGroupTargetDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ExpGroupTarget> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ExpGroupTargetDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<ExpGroupTarget> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 专家组-学员 Dal
        /// </summary>
        public partial class ExpGroupTargetBpl : ExpGroupTargetBplBase {
        }
        
        /// <summary>
        /// 评价-周期 BplBase
        /// </summary>
        public partial class EvalPeriodBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalPeriod data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalPeriodDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalPeriod data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalPeriodDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long periodId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalPeriodDal.UpdatePartial(periodId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long periodId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalPeriodDal.PrimaryDelete(periodId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalPeriodDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalPeriodDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalPeriod PrimaryGet(long periodId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalPeriodDal.PrimaryGet(periodId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalPeriodDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalPeriodDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalPeriodDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalPeriod> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 评价-周期 Dal
        /// </summary>
        public partial class EvalPeriodBpl : EvalPeriodBplBase {
        }
        
        /// <summary>
        /// 评价-校评-结果 BplBase
        /// </summary>
        public partial class EvalSchoolResultBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalSchoolResult data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalSchoolResultDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalSchoolResult data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalSchoolResultDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long resultId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalSchoolResultDal.UpdatePartial(resultId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long resultId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalSchoolResultDal.PrimaryDelete(resultId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalSchoolResultDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalSchoolResultDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalSchoolResult PrimaryGet(long resultId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalSchoolResultDal.PrimaryGet(resultId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalSchoolResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalSchoolResultDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalSchoolResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalSchoolResultDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalSchoolResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalSchoolResultDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalSchoolResult> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 评价-校评-结果 Dal
        /// </summary>
        public partial class EvalSchoolResultBpl : EvalSchoolResultBplBase {
        }
        
        /// <summary>
        /// 评价-校评-结果项 BplBase
        /// </summary>
        public partial class EvalSchoolResultItemBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalSchoolResultItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalSchoolResultItemDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalSchoolResultItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalSchoolResultItemDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long resultItemId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalSchoolResultItemDal.UpdatePartial(resultItemId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long resultItemId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalSchoolResultItemDal.PrimaryDelete(resultItemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalSchoolResultItemDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalSchoolResultItemDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalSchoolResultItem PrimaryGet(long resultItemId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalSchoolResultItemDal.PrimaryGet(resultItemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalSchoolResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalSchoolResultItemDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalSchoolResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalSchoolResultItemDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalSchoolResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalSchoolResultItemDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalSchoolResultItem> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 评价-校评-结果项 Dal
        /// </summary>
        public partial class EvalSchoolResultItemBpl : EvalSchoolResultItemBplBase {
        }
        
        /// <summary>
        /// 评价-量评-结果 BplBase
        /// </summary>
        public partial class EvalVolumnResultBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalVolumnResult data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalVolumnResultDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalVolumnResult data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalVolumnResultDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long resultId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalVolumnResultDal.UpdatePartial(resultId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long resultId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalVolumnResultDal.PrimaryDelete(resultId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalVolumnResultDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalVolumnResultDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalVolumnResult PrimaryGet(long resultId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalVolumnResultDal.PrimaryGet(resultId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalVolumnResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalVolumnResultDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalVolumnResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalVolumnResultDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalVolumnResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalVolumnResultDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalVolumnResult> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 评价-量评-结果 Dal
        /// </summary>
        public partial class EvalVolumnResultBpl : EvalVolumnResultBplBase {
        }
        
        /// <summary>
        /// 评价-量评-结果项 BplBase
        /// </summary>
        public partial class EvalVolumnResultItemBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalVolumnResultItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalVolumnResultItemDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalVolumnResultItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalVolumnResultItemDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long resultItemId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalVolumnResultItemDal.UpdatePartial(resultItemId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long resultItemId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalVolumnResultItemDal.PrimaryDelete(resultItemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalVolumnResultItemDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalVolumnResultItemDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalVolumnResultItem PrimaryGet(long resultItemId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalVolumnResultItemDal.PrimaryGet(resultItemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalVolumnResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalVolumnResultItemDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalVolumnResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalVolumnResultItemDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalVolumnResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalVolumnResultItemDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalVolumnResultItem> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 评价-量评-结果项 Dal
        /// </summary>
        public partial class EvalVolumnResultItemBpl : EvalVolumnResultItemBplBase {
        }
        
        /// <summary>
        /// 评价-质评-提交结果 BplBase
        /// </summary>
        public partial class EvalQualitySubmitResultBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalQualitySubmitResult data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalQualitySubmitResultDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalQualitySubmitResult data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalQualitySubmitResultDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long resultId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalQualitySubmitResultDal.UpdatePartial(resultId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long resultId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalQualitySubmitResultDal.PrimaryDelete(resultId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalQualitySubmitResultDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalQualitySubmitResultDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalQualitySubmitResult PrimaryGet(long resultId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalQualitySubmitResultDal.PrimaryGet(resultId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalQualitySubmitResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalQualitySubmitResultDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalQualitySubmitResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalQualitySubmitResultDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalQualitySubmitResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalQualitySubmitResultDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalQualitySubmitResult> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 评价-质评-提交结果 Dal
        /// </summary>
        public partial class EvalQualitySubmitResultBpl : EvalQualitySubmitResultBplBase {
        }
        
        /// <summary>
        /// 评价-质评-结果 BplBase
        /// </summary>
        public partial class EvalQualityResultBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalQualityResult data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalQualityResultDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalQualityResult data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalQualityResultDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long resultId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalQualityResultDal.UpdatePartial(resultId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long resultId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalQualityResultDal.PrimaryDelete(resultId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalQualityResultDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalQualityResultDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalQualityResult PrimaryGet(long resultId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalQualityResultDal.PrimaryGet(resultId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalQualityResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalQualityResultDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalQualityResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalQualityResultDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalQualityResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalQualityResultDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalQualityResult> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 评价-质评-结果 Dal
        /// </summary>
        public partial class EvalQualityResultBpl : EvalQualityResultBplBase {
        }
        
        /// <summary>
        /// 评价-质评-结果项 BplBase
        /// </summary>
        public partial class EvalQualityResultItemBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(EvalQualityResultItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalQualityResultItemDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(EvalQualityResultItem data) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalQualityResultItemDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long resultItemId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalQualityResultItemDal.UpdatePartial(resultItemId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long resultItemId) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalQualityResultItemDal.PrimaryDelete(resultItemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.EvalQualityResultItemDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalQualityResultItemDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static EvalQualityResultItem PrimaryGet(long resultItemId) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalQualityResultItemDal.PrimaryGet(resultItemId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalQualityResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalQualityResultItemDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalQualityResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalQualityResultItemDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<EvalQualityResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.EvalQualityResultItemDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<EvalQualityResultItem> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 评价-质评-结果项 Dal
        /// </summary>
        public partial class EvalQualityResultItemBpl : EvalQualityResultItemBplBase {
        }
        
        /// <summary>
        /// 新闻 BplBase
        /// </summary>
        public partial class NewsBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(News data) {
                APDBDef db = new APDBDef();
                try {
                    db.NewsDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(News data) {
                APDBDef db = new APDBDef();
                try {
                    db.NewsDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long newsId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.NewsDal.UpdatePartial(newsId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long newsId) {
                APDBDef db = new APDBDef();
                try {
                    db.NewsDal.PrimaryDelete(newsId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.NewsDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.NewsDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static News PrimaryGet(long newsId) {
                APDBDef db = new APDBDef();
                try {
                    return db.NewsDal.PrimaryGet(newsId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<News> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.NewsDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<News> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.NewsDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<News> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.NewsDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<News> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 新闻 Dal
        /// </summary>
        public partial class NewsBpl : NewsBplBase {
        }
        
        /// <summary>
        /// 首页图片 BplBase
        /// </summary>
        public partial class HomePageImageBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(HomePageImage data) {
                APDBDef db = new APDBDef();
                try {
                    db.HomePageImageDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(HomePageImage data) {
                APDBDef db = new APDBDef();
                try {
                    db.HomePageImageDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long imgId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.HomePageImageDal.UpdatePartial(imgId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long imgId) {
                APDBDef db = new APDBDef();
                try {
                    db.HomePageImageDal.PrimaryDelete(imgId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.HomePageImageDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.HomePageImageDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static HomePageImage PrimaryGet(long imgId) {
                APDBDef db = new APDBDef();
                try {
                    return db.HomePageImageDal.PrimaryGet(imgId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<HomePageImage> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.HomePageImageDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<HomePageImage> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.HomePageImageDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<HomePageImage> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.HomePageImageDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<HomePageImage> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 首页图片 Dal
        /// </summary>
        public partial class HomePageImageBpl : HomePageImageBplBase {
        }
        
        /// <summary>
        /// 附件 BplBase
        /// </summary>
        public partial class AttachmentsBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Attachments data) {
                APDBDef db = new APDBDef();
                try {
                    db.AttachmentsDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Attachments data) {
                APDBDef db = new APDBDef();
                try {
                    db.AttachmentsDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long iD, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.AttachmentsDal.UpdatePartial(iD, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long iD) {
                APDBDef db = new APDBDef();
                try {
                    db.AttachmentsDal.PrimaryDelete(iD);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.AttachmentsDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.AttachmentsDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Attachments PrimaryGet(long iD) {
                APDBDef db = new APDBDef();
                try {
                    return db.AttachmentsDal.PrimaryGet(iD);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Attachments> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.AttachmentsDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Attachments> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.AttachmentsDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Attachments> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.AttachmentsDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Attachments> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 附件 Dal
        /// </summary>
        public partial class AttachmentsBpl : AttachmentsBplBase {
        }
        
        /// <summary>
        /// 通知 BplBase
        /// </summary>
        public partial class NoticeBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Notice data) {
                APDBDef db = new APDBDef();
                try {
                    db.NoticeDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Notice data) {
                APDBDef db = new APDBDef();
                try {
                    db.NoticeDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long noticeId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.NoticeDal.UpdatePartial(noticeId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long noticeId) {
                APDBDef db = new APDBDef();
                try {
                    db.NoticeDal.PrimaryDelete(noticeId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.NoticeDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.NoticeDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Notice PrimaryGet(long noticeId) {
                APDBDef db = new APDBDef();
                try {
                    return db.NoticeDal.PrimaryGet(noticeId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Notice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.NoticeDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Notice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.NoticeDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Notice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.NoticeDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Notice> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 通知 Dal
        /// </summary>
        public partial class NoticeBpl : NoticeBplBase {
        }
        
        /// <summary>
        /// 阅读通知 BplBase
        /// </summary>
        public partial class ReadNoticeBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(ReadNotice data) {
                APDBDef db = new APDBDef();
                try {
                    db.ReadNoticeDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(ReadNotice data) {
                APDBDef db = new APDBDef();
                try {
                    db.ReadNoticeDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long noticeId, long userId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ReadNoticeDal.UpdatePartial(noticeId, userId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long noticeId, long userId) {
                APDBDef db = new APDBDef();
                try {
                    db.ReadNoticeDal.PrimaryDelete(noticeId, userId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ReadNoticeDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ReadNoticeDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static ReadNotice PrimaryGet(long noticeId, long userId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ReadNoticeDal.PrimaryGet(noticeId, userId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ReadNotice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ReadNoticeDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ReadNotice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ReadNoticeDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<ReadNotice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ReadNoticeDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<ReadNotice> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 阅读通知 Dal
        /// </summary>
        public partial class ReadNoticeBpl : ReadNoticeBplBase {
        }
        
        /// <summary>
        /// 共享 BplBase
        /// </summary>
        public partial class ShareBplBase {
            
            /// <summary>
            /// 添加数据。
            /// </summary>
            public static void Insert(Share data) {
                APDBDef db = new APDBDef();
                try {
                    db.ShareDal.Insert(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void Update(Share data) {
                APDBDef db = new APDBDef();
                try {
                    db.ShareDal.Update(data);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 更新数据。
            /// </summary>
            public static void UpdatePartial(long shareId, Object metadata) {
                APDBDef db = new APDBDef();
                try {
                    db.ShareDal.UpdatePartial(shareId, metadata);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 删除数据。
            /// </summary>
            public static void PrimaryDelete(long shareId) {
                APDBDef db = new APDBDef();
                try {
                    db.ShareDal.PrimaryDelete(shareId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 条件删除数据。
            /// </summary>
            public static void ConditionDelete(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    db.ShareDal.ConditionDelete(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据条件查询数量。
            /// </summary>
            public static int ConditionQueryCount(APSqlWherePhrase condition) {
                APDBDef db = new APDBDef();
                try {
                    return db.ShareDal.ConditionQueryCount(condition);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据主键获取数据。
            /// </summary>
            public static Share PrimaryGet(long shareId) {
                APDBDef db = new APDBDef();
                try {
                    return db.ShareDal.PrimaryGet(shareId);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Share> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take, System.Nullable<int> skip) {
                APDBDef db = new APDBDef();
                try {
                    return db.ShareDal.ConditionQuery(condition, orderBy, take, skip);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Share> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, System.Nullable<int> take) {
                APDBDef db = new APDBDef();
                try {
                    return db.ShareDal.ConditionQuery(condition, orderBy, take, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 根据指定条件查询数据。
            /// </summary>
            public static List<Share> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
                APDBDef db = new APDBDef();
                try {
                    return db.ShareDal.ConditionQuery(condition, orderBy, null, null);
                }
                finally {
                    db.Close();
                }
            }
            
            /// <summary>
            /// 获取所有数据。
            /// </summary>
            public static List<Share> GetAll() {
                return ConditionQuery(null, null);
            }
        }
        
        /// <summary>
        /// 共享 Dal
        /// </summary>
        public partial class ShareBpl : ShareBplBase {
        }
    }
    
    /// <summary>
    /// 选项列表 Base
    /// </summary>
    [Serializable()]
    public abstract partial class PicklistBase {
        
        /// <summary>
        /// PicklistId
        /// </summary>
        private long _picklistId;
        
        /// <summary>
        /// InnerKey
        /// </summary>
        private string _innerKey = string.Empty;
        
        /// <summary>
        /// Name
        /// </summary>
        private string _name = string.Empty;
        
        /// <summary>
        /// Adjustable
        /// </summary>
        private bool _adjustable;
        
        /// <summary>
        /// Strengthen
        /// </summary>
        private bool _strengthen;
        
        /// <summary>
        /// Description
        /// </summary>
        private string _description = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public PicklistBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public PicklistBase(long picklistId, string innerKey, string name, bool adjustable, bool strengthen, string description) {
            _picklistId = picklistId;
            _innerKey = innerKey;
            _name = name;
            _adjustable = adjustable;
            _strengthen = strengthen;
            _description = description;
        }
        
        /// <summary>
        /// PicklistId
        /// </summary>
        public virtual long PicklistId {
            get {
                return _picklistId;
            }
            set {
                _picklistId = value;
            }
        }
        
        /// <summary>
        /// PicklistId APColumnDef
        /// </summary>
        public static Int64APColumnDef PicklistIdDef {
            get {
                return APDBDef.Picklist.PicklistId;
            }
        }
        
        /// <summary>
        /// InnerKey
        /// </summary>
        [StringLength(40)]
        public virtual string InnerKey {
            get {
                return _innerKey;
            }
            set {
                _innerKey = value;
            }
        }
        
        /// <summary>
        /// InnerKey APColumnDef
        /// </summary>
        public static StringAPColumnDef InnerKeyDef {
            get {
                return APDBDef.Picklist.InnerKey;
            }
        }
        
        /// <summary>
        /// Name
        /// </summary>
        [StringLength(255)]
        public virtual string Name {
            get {
                return _name;
            }
            set {
                _name = value;
            }
        }
        
        /// <summary>
        /// Name APColumnDef
        /// </summary>
        public static StringAPColumnDef NameDef {
            get {
                return APDBDef.Picklist.Name;
            }
        }
        
        /// <summary>
        /// Adjustable
        /// </summary>
        public virtual bool Adjustable {
            get {
                return _adjustable;
            }
            set {
                _adjustable = value;
            }
        }
        
        /// <summary>
        /// Adjustable APColumnDef
        /// </summary>
        public static BooleanAPColumnDef AdjustableDef {
            get {
                return APDBDef.Picklist.Adjustable;
            }
        }
        
        /// <summary>
        /// Strengthen
        /// </summary>
        public virtual bool Strengthen {
            get {
                return _strengthen;
            }
            set {
                _strengthen = value;
            }
        }
        
        /// <summary>
        /// Strengthen APColumnDef
        /// </summary>
        public static BooleanAPColumnDef StrengthenDef {
            get {
                return APDBDef.Picklist.Strengthen;
            }
        }
        
        /// <summary>
        /// Description
        /// </summary>
        [StringLength(1000)]
        public virtual string Description {
            get {
                return _description;
            }
            set {
                _description = value;
            }
        }
        
        /// <summary>
        /// Description APColumnDef
        /// </summary>
        public static StringAPColumnDef DescriptionDef {
            get {
                return APDBDef.Picklist.Description;
            }
        }
        
        /// <summary>
        /// PicklistTableDef APTableDef
        /// </summary>
        public static APDBDef.PicklistTableDef TableDef {
            get {
                return APDBDef.Picklist;
            }
        }
        
        /// <summary>
        /// PicklistTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Picklist.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Picklist data) {
            PicklistId = data.PicklistId;
            InnerKey = data.InnerKey;
            Name = data.Name;
            Adjustable = data.Adjustable;
            Strengthen = data.Strengthen;
            Description = data.Description;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Picklist data) {
            if ((PicklistId != data.PicklistId)) {
                return false;
            }
            if ((InnerKey != data.InnerKey)) {
                return false;
            }
            if ((Name != data.Name)) {
                return false;
            }
            if ((Adjustable != data.Adjustable)) {
                return false;
            }
            if ((Strengthen != data.Strengthen)) {
                return false;
            }
            if ((Description != data.Description)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.PicklistBpl.Insert(((Picklist)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.PicklistBpl.Update(((Picklist)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long picklistId, Object metadata) {
            APBplDef.PicklistBpl.UpdatePartial(picklistId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long picklistId) {
            APBplDef.PicklistBpl.PrimaryDelete(picklistId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.PicklistBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.PicklistBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Picklist PrimaryGet(long picklistId) {
            return APBplDef.PicklistBpl.PrimaryGet(picklistId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Picklist> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.PicklistBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Picklist> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.PicklistBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Picklist> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.PicklistBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Picklist> GetAll() {
            return APBplDef.PicklistBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 选项列表
    /// </summary>
    [Serializable()]
    public partial class Picklist : PicklistBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Picklist() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Picklist(long picklistId, string innerKey, string name, bool adjustable, bool strengthen, string description) : 
                base(picklistId, innerKey, name, adjustable, strengthen, description) {
        }
    }
    
    /// <summary>
    /// 选项列表项 Base
    /// </summary>
    [Serializable()]
    public abstract partial class PicklistItemBase {
        
        /// <summary>
        /// PicklistItemId
        /// </summary>
        private long _picklistItemId;
        
        /// <summary>
        /// Associated with PickList.PickListId
        /// </summary>
        private long _picklistId;
        
        /// <summary>
        /// Name
        /// </summary>
        private string _name = string.Empty;
        
        /// <summary>
        /// StrengthenValue
        /// </summary>
        private long _strengthenValue;
        
        /// <summary>
        /// Code
        /// </summary>
        private string _code = string.Empty;
        
        /// <summary>
        /// IsDefault
        /// </summary>
        private bool _isDefault;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public PicklistItemBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public PicklistItemBase(long picklistItemId, long picklistId, string name, long strengthenValue, string code, bool isDefault) {
            _picklistItemId = picklistItemId;
            _picklistId = picklistId;
            _name = name;
            _strengthenValue = strengthenValue;
            _code = code;
            _isDefault = isDefault;
        }
        
        /// <summary>
        /// PicklistItemId
        /// </summary>
        public virtual long PicklistItemId {
            get {
                return _picklistItemId;
            }
            set {
                _picklistItemId = value;
            }
        }
        
        /// <summary>
        /// PicklistItemId APColumnDef
        /// </summary>
        public static Int64APColumnDef PicklistItemIdDef {
            get {
                return APDBDef.PicklistItem.PicklistItemId;
            }
        }
        
        /// <summary>
        /// Associated with PickList.PickListId
        /// </summary>
        public virtual long PicklistId {
            get {
                return _picklistId;
            }
            set {
                _picklistId = value;
            }
        }
        
        /// <summary>
        /// Associated with PickList.PickListId APColumnDef
        /// </summary>
        public static Int64APColumnDef PicklistIdDef {
            get {
                return APDBDef.PicklistItem.PicklistId;
            }
        }
        
        /// <summary>
        /// Name
        /// </summary>
        [StringLength(255)]
        public virtual string Name {
            get {
                return _name;
            }
            set {
                _name = value;
            }
        }
        
        /// <summary>
        /// Name APColumnDef
        /// </summary>
        public static StringAPColumnDef NameDef {
            get {
                return APDBDef.PicklistItem.Name;
            }
        }
        
        /// <summary>
        /// StrengthenValue
        /// </summary>
        public virtual long StrengthenValue {
            get {
                return _strengthenValue;
            }
            set {
                _strengthenValue = value;
            }
        }
        
        /// <summary>
        /// StrengthenValue APColumnDef
        /// </summary>
        public static Int64APColumnDef StrengthenValueDef {
            get {
                return APDBDef.PicklistItem.StrengthenValue;
            }
        }
        
        /// <summary>
        /// Code
        /// </summary>
        [StringLength(100)]
        public virtual string Code {
            get {
                return _code;
            }
            set {
                _code = value;
            }
        }
        
        /// <summary>
        /// Code APColumnDef
        /// </summary>
        public static StringAPColumnDef CodeDef {
            get {
                return APDBDef.PicklistItem.Code;
            }
        }
        
        /// <summary>
        /// IsDefault
        /// </summary>
        public virtual bool IsDefault {
            get {
                return _isDefault;
            }
            set {
                _isDefault = value;
            }
        }
        
        /// <summary>
        /// IsDefault APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsDefaultDef {
            get {
                return APDBDef.PicklistItem.IsDefault;
            }
        }
        
        /// <summary>
        /// PicklistItemTableDef APTableDef
        /// </summary>
        public static APDBDef.PicklistItemTableDef TableDef {
            get {
                return APDBDef.PicklistItem;
            }
        }
        
        /// <summary>
        /// PicklistItemTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.PicklistItem.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(PicklistItem data) {
            PicklistItemId = data.PicklistItemId;
            PicklistId = data.PicklistId;
            Name = data.Name;
            StrengthenValue = data.StrengthenValue;
            Code = data.Code;
            IsDefault = data.IsDefault;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(PicklistItem data) {
            if ((PicklistItemId != data.PicklistItemId)) {
                return false;
            }
            if ((PicklistId != data.PicklistId)) {
                return false;
            }
            if ((Name != data.Name)) {
                return false;
            }
            if ((StrengthenValue != data.StrengthenValue)) {
                return false;
            }
            if ((Code != data.Code)) {
                return false;
            }
            if ((IsDefault != data.IsDefault)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.PicklistItemBpl.Insert(((PicklistItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.PicklistItemBpl.Update(((PicklistItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long picklistItemId, long picklistId, Object metadata) {
            APBplDef.PicklistItemBpl.UpdatePartial(picklistItemId, picklistId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long picklistItemId, long picklistId) {
            APBplDef.PicklistItemBpl.PrimaryDelete(picklistItemId, picklistId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.PicklistItemBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.PicklistItemBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static PicklistItem PrimaryGet(long picklistItemId, long picklistId) {
            return APBplDef.PicklistItemBpl.PrimaryGet(picklistItemId, picklistId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<PicklistItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.PicklistItemBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<PicklistItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.PicklistItemBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<PicklistItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.PicklistItemBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<PicklistItem> GetAll() {
            return APBplDef.PicklistItemBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 选项列表项
    /// </summary>
    [Serializable()]
    public partial class PicklistItem : PicklistItemBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public PicklistItem() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public PicklistItem(long picklistItemId, long picklistId, string name, long strengthenValue, string code, bool isDefault) : 
                base(picklistItemId, picklistId, name, strengthenValue, code, isDefault) {
        }
    }
    
    /// <summary>
    /// 学校基础数据表 Base
    /// </summary>
    [Serializable()]
    public abstract partial class School_InfoBase {
        
        /// <summary>
        /// id
        /// </summary>
        private string _id = string.Empty;
        
        /// <summary>
        /// xxmc
        /// </summary>
        private string _xxmc = string.Empty;
        
        /// <summary>
        /// xxdm
        /// </summary>
        private string _xxdm = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public School_InfoBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public School_InfoBase(string id, string xxmc, string xxdm) {
            _id = id;
            _xxmc = xxmc;
            _xxdm = xxdm;
        }
        
        /// <summary>
        /// id
        /// </summary>
        [Display(Name="学校ID")]
        [StringLength(36)]
        public virtual string id {
            get {
                return _id;
            }
            set {
                _id = value;
            }
        }
        
        /// <summary>
        /// id APColumnDef
        /// </summary>
        public static StringAPColumnDef idDef {
            get {
                return APDBDef.School_Info.id;
            }
        }
        
        /// <summary>
        /// xxmc
        /// </summary>
        [Display(Name="学校名称")]
        [StringLength(60)]
        public virtual string xxmc {
            get {
                return _xxmc;
            }
            set {
                _xxmc = value;
            }
        }
        
        /// <summary>
        /// xxmc APColumnDef
        /// </summary>
        public static StringAPColumnDef xxmcDef {
            get {
                return APDBDef.School_Info.xxmc;
            }
        }
        
        /// <summary>
        /// xxdm
        /// </summary>
        [Display(Name="学校代码")]
        [StringLength(10)]
        public virtual string xxdm {
            get {
                return _xxdm;
            }
            set {
                _xxdm = value;
            }
        }
        
        /// <summary>
        /// xxdm APColumnDef
        /// </summary>
        public static StringAPColumnDef xxdmDef {
            get {
                return APDBDef.School_Info.xxdm;
            }
        }
        
        /// <summary>
        /// School_InfoTableDef APTableDef
        /// </summary>
        public static APDBDef.School_InfoTableDef TableDef {
            get {
                return APDBDef.School_Info;
            }
        }
        
        /// <summary>
        /// School_InfoTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.School_Info.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(School_Info data) {
            id = data.id;
            xxmc = data.xxmc;
            xxdm = data.xxdm;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(School_Info data) {
            if ((id != data.id)) {
                return false;
            }
            if ((xxmc != data.xxmc)) {
                return false;
            }
            if ((xxdm != data.xxdm)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.School_InfoBpl.Insert(((School_Info)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.School_InfoBpl.Update(((School_Info)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(string id, Object metadata) {
            APBplDef.School_InfoBpl.UpdatePartial(id, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(string id) {
            APBplDef.School_InfoBpl.PrimaryDelete(id);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.School_InfoBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.School_InfoBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static School_Info PrimaryGet(string id) {
            return APBplDef.School_InfoBpl.PrimaryGet(id);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<School_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.School_InfoBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<School_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.School_InfoBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<School_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.School_InfoBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<School_Info> GetAll() {
            return APBplDef.School_InfoBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 学校基础数据表
    /// </summary>
    [Serializable()]
    public partial class School_Info : School_InfoBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public School_Info() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public School_Info(string id, string xxmc, string xxdm) : 
                base(id, xxmc, xxdm) {
        }
    }
    
    /// <summary>
    /// 教职工基础数据表 Base
    /// </summary>
    [Serializable()]
    public abstract partial class Staff_InfoBase {
        
        /// <summary>
        /// id
        /// </summary>
        private string _id = string.Empty;
        
        /// <summary>
        /// yhm
        /// </summary>
        private string _yhm;
        
        /// <summary>
        /// xxdm
        /// </summary>
        private string _xxdm;
        
        /// <summary>
        /// xm
        /// </summary>
        private string _xm;
        
        /// <summary>
        /// sfzjh
        /// </summary>
        private string _sfzjh;
        
        /// <summary>
        /// sxh
        /// </summary>
        private string _sxh;
        
        /// <summary>
        /// csrq
        /// </summary>
        private string _csrq;
        
        /// <summary>
        /// xb
        /// </summary>
        private string _xb;
        
        /// <summary>
        /// xl
        /// </summary>
        private string _xl;
        
        /// <summary>
        /// xw
        /// </summary>
        private string _xw;
        
        /// <summary>
        /// byxx
        /// </summary>
        private string _byxx;
        
        /// <summary>
        /// zy
        /// </summary>
        private string _zy;
        
        /// <summary>
        /// zw
        /// </summary>
        private string _zw;
        
        /// <summary>
        /// zc
        /// </summary>
        private string _zc;
        
        /// <summary>
        /// rjxk
        /// </summary>
        private string _rjxk;
        
        /// <summary>
        /// dw
        /// </summary>
        private string _dw;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Staff_InfoBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Staff_InfoBase(
                    string id, 
                    string yhm, 
                    string xxdm, 
                    string xm, 
                    string sfzjh, 
                    string sxh, 
                    string csrq, 
                    string xb, 
                    string xl, 
                    string xw, 
                    string byxx, 
                    string zy, 
                    string zw, 
                    string zc, 
                    string rjxk, 
                    string dw) {
            _id = id;
            _yhm = yhm;
            _xxdm = xxdm;
            _xm = xm;
            _sfzjh = sfzjh;
            _sxh = sxh;
            _csrq = csrq;
            _xb = xb;
            _xl = xl;
            _xw = xw;
            _byxx = byxx;
            _zy = zy;
            _zw = zw;
            _zc = zc;
            _rjxk = rjxk;
            _dw = dw;
        }
        
        /// <summary>
        /// id
        /// </summary>
        [Display(Name="教职工ID")]
        [StringLength(36)]
        public virtual string id {
            get {
                return _id;
            }
            set {
                _id = value;
            }
        }
        
        /// <summary>
        /// id APColumnDef
        /// </summary>
        public static StringAPColumnDef idDef {
            get {
                return APDBDef.Staff_Info.id;
            }
        }
        
        /// <summary>
        /// yhm
        /// </summary>
        [Display(Name="用户登录名")]
        [StringLength(36)]
        public virtual string yhm {
            get {
                return _yhm;
            }
            set {
                _yhm = value;
            }
        }
        
        /// <summary>
        /// yhm APColumnDef
        /// </summary>
        public static StringAPColumnDef yhmDef {
            get {
                return APDBDef.Staff_Info.yhm;
            }
        }
        
        /// <summary>
        /// xxdm
        /// </summary>
        [Display(Name="学校代码")]
        [StringLength(10)]
        public virtual string xxdm {
            get {
                return _xxdm;
            }
            set {
                _xxdm = value;
            }
        }
        
        /// <summary>
        /// xxdm APColumnDef
        /// </summary>
        public static StringAPColumnDef xxdmDef {
            get {
                return APDBDef.Staff_Info.xxdm;
            }
        }
        
        /// <summary>
        /// xm
        /// </summary>
        [Display(Name="真实姓名")]
        [StringLength(50)]
        public virtual string xm {
            get {
                return _xm;
            }
            set {
                _xm = value;
            }
        }
        
        /// <summary>
        /// xm APColumnDef
        /// </summary>
        public static StringAPColumnDef xmDef {
            get {
                return APDBDef.Staff_Info.xm;
            }
        }
        
        /// <summary>
        /// sfzjh
        /// </summary>
        [Display(Name="身份证件号")]
        [StringLength(50)]
        public virtual string sfzjh {
            get {
                return _sfzjh;
            }
            set {
                _sfzjh = value;
            }
        }
        
        /// <summary>
        /// sfzjh APColumnDef
        /// </summary>
        public static StringAPColumnDef sfzjhDef {
            get {
                return APDBDef.Staff_Info.sfzjh;
            }
        }
        
        /// <summary>
        /// sxh
        /// </summary>
        [Display(Name="师训号")]
        [StringLength(20)]
        public virtual string sxh {
            get {
                return _sxh;
            }
            set {
                _sxh = value;
            }
        }
        
        /// <summary>
        /// sxh APColumnDef
        /// </summary>
        public static StringAPColumnDef sxhDef {
            get {
                return APDBDef.Staff_Info.sxh;
            }
        }
        
        /// <summary>
        /// csrq
        /// </summary>
        [Display(Name="出生日期")]
        [StringLength(8)]
        public virtual string csrq {
            get {
                return _csrq;
            }
            set {
                _csrq = value;
            }
        }
        
        /// <summary>
        /// csrq APColumnDef
        /// </summary>
        public static StringAPColumnDef csrqDef {
            get {
                return APDBDef.Staff_Info.csrq;
            }
        }
        
        /// <summary>
        /// xb
        /// </summary>
        [Display(Name="性别ID")]
        [StringLength(1)]
        public virtual string xb {
            get {
                return _xb;
            }
            set {
                _xb = value;
            }
        }
        
        /// <summary>
        /// xb APColumnDef
        /// </summary>
        public static StringAPColumnDef xbDef {
            get {
                return APDBDef.Staff_Info.xb;
            }
        }
        
        /// <summary>
        /// xl
        /// </summary>
        [Display(Name="学历ID")]
        [StringLength(2)]
        public virtual string xl {
            get {
                return _xl;
            }
            set {
                _xl = value;
            }
        }
        
        /// <summary>
        /// xl APColumnDef
        /// </summary>
        public static StringAPColumnDef xlDef {
            get {
                return APDBDef.Staff_Info.xl;
            }
        }
        
        /// <summary>
        /// xw
        /// </summary>
        [Display(Name="学位ID")]
        [StringLength(3)]
        public virtual string xw {
            get {
                return _xw;
            }
            set {
                _xw = value;
            }
        }
        
        /// <summary>
        /// xw APColumnDef
        /// </summary>
        public static StringAPColumnDef xwDef {
            get {
                return APDBDef.Staff_Info.xw;
            }
        }
        
        /// <summary>
        /// byxx
        /// </summary>
        [Display(Name="毕业学校")]
        [StringLength(100)]
        public virtual string byxx {
            get {
                return _byxx;
            }
            set {
                _byxx = value;
            }
        }
        
        /// <summary>
        /// byxx APColumnDef
        /// </summary>
        public static StringAPColumnDef byxxDef {
            get {
                return APDBDef.Staff_Info.byxx;
            }
        }
        
        /// <summary>
        /// zy
        /// </summary>
        [Display(Name="专业")]
        [StringLength(50)]
        public virtual string zy {
            get {
                return _zy;
            }
            set {
                _zy = value;
            }
        }
        
        /// <summary>
        /// zy APColumnDef
        /// </summary>
        public static StringAPColumnDef zyDef {
            get {
                return APDBDef.Staff_Info.zy;
            }
        }
        
        /// <summary>
        /// zw
        /// </summary>
        [Display(Name="职务ID")]
        [StringLength(3)]
        public virtual string zw {
            get {
                return _zw;
            }
            set {
                _zw = value;
            }
        }
        
        /// <summary>
        /// zw APColumnDef
        /// </summary>
        public static StringAPColumnDef zwDef {
            get {
                return APDBDef.Staff_Info.zw;
            }
        }
        
        /// <summary>
        /// zc
        /// </summary>
        [Display(Name="职称ID")]
        [StringLength(1)]
        public virtual string zc {
            get {
                return _zc;
            }
            set {
                _zc = value;
            }
        }
        
        /// <summary>
        /// zc APColumnDef
        /// </summary>
        public static StringAPColumnDef zcDef {
            get {
                return APDBDef.Staff_Info.zc;
            }
        }
        
        /// <summary>
        /// rjxk
        /// </summary>
        [Display(Name="任教学科ID")]
        [StringLength(2)]
        public virtual string rjxk {
            get {
                return _rjxk;
            }
            set {
                _rjxk = value;
            }
        }
        
        /// <summary>
        /// rjxk APColumnDef
        /// </summary>
        public static StringAPColumnDef rjxkDef {
            get {
                return APDBDef.Staff_Info.rjxk;
            }
        }
        
        /// <summary>
        /// dw
        /// </summary>
        [Display(Name="单位")]
        [StringLength(800)]
        public virtual string dw {
            get {
                return _dw;
            }
            set {
                _dw = value;
            }
        }
        
        /// <summary>
        /// dw APColumnDef
        /// </summary>
        public static StringAPColumnDef dwDef {
            get {
                return APDBDef.Staff_Info.dw;
            }
        }
        
        /// <summary>
        /// Staff_InfoTableDef APTableDef
        /// </summary>
        public static APDBDef.Staff_InfoTableDef TableDef {
            get {
                return APDBDef.Staff_Info;
            }
        }
        
        /// <summary>
        /// Staff_InfoTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Staff_Info.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Staff_Info data) {
            id = data.id;
            yhm = data.yhm;
            xxdm = data.xxdm;
            xm = data.xm;
            sfzjh = data.sfzjh;
            sxh = data.sxh;
            csrq = data.csrq;
            xb = data.xb;
            xl = data.xl;
            xw = data.xw;
            byxx = data.byxx;
            zy = data.zy;
            zw = data.zw;
            zc = data.zc;
            rjxk = data.rjxk;
            dw = data.dw;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Staff_Info data) {
            if ((id != data.id)) {
                return false;
            }
            if ((yhm != data.yhm)) {
                return false;
            }
            if ((xxdm != data.xxdm)) {
                return false;
            }
            if ((xm != data.xm)) {
                return false;
            }
            if ((sfzjh != data.sfzjh)) {
                return false;
            }
            if ((sxh != data.sxh)) {
                return false;
            }
            if ((csrq != data.csrq)) {
                return false;
            }
            if ((xb != data.xb)) {
                return false;
            }
            if ((xl != data.xl)) {
                return false;
            }
            if ((xw != data.xw)) {
                return false;
            }
            if ((byxx != data.byxx)) {
                return false;
            }
            if ((zy != data.zy)) {
                return false;
            }
            if ((zw != data.zw)) {
                return false;
            }
            if ((zc != data.zc)) {
                return false;
            }
            if ((rjxk != data.rjxk)) {
                return false;
            }
            if ((dw != data.dw)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.Staff_InfoBpl.Insert(((Staff_Info)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.Staff_InfoBpl.Update(((Staff_Info)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(string id, Object metadata) {
            APBplDef.Staff_InfoBpl.UpdatePartial(id, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(string id) {
            APBplDef.Staff_InfoBpl.PrimaryDelete(id);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.Staff_InfoBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.Staff_InfoBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Staff_Info PrimaryGet(string id) {
            return APBplDef.Staff_InfoBpl.PrimaryGet(id);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Staff_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.Staff_InfoBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Staff_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.Staff_InfoBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Staff_Info> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.Staff_InfoBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Staff_Info> GetAll() {
            return APBplDef.Staff_InfoBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 教职工基础数据表
    /// </summary>
    [Serializable()]
    public partial class Staff_Info : Staff_InfoBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Staff_Info() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Staff_Info(
                    string id, 
                    string yhm, 
                    string xxdm, 
                    string xm, 
                    string sfzjh, 
                    string sxh, 
                    string csrq, 
                    string xb, 
                    string xl, 
                    string xw, 
                    string byxx, 
                    string zy, 
                    string zw, 
                    string zc, 
                    string rjxk, 
                    string dw) : 
                base(id, yhm, xxdm, xm, sfzjh, sxh, csrq, xb, xl, xw, byxx, zy, zw, zc, rjxk, dw) {
        }
    }
    
    /// <summary>
    /// 用户 Base
    /// </summary>
    [Serializable()]
    public abstract partial class BzUserBase : IdentityUser<long> {
        
        /// <summary>
        /// UserId
        /// </summary>
        private long _id;
        
        /// <summary>
        /// UserName
        /// </summary>
        private string _userName = string.Empty;
        
        /// <summary>
        /// PasswordHash
        /// </summary>
        private string _passwordHash = string.Empty;
        
        /// <summary>
        /// SecurityStamp
        /// </summary>
        private string _securityStamp = string.Empty;
        
        /// <summary>
        /// 尝试实现用户名或邮箱双模式登录
        /// </summary>
        private string _email = string.Empty;
        
        /// <summary>
        /// EmailConfirmed
        /// </summary>
        private bool _emailConfirmed;
        
        /// <summary>
        /// 为短信服务预留
        /// </summary>
        private string _phoneNumber = string.Empty;
        
        /// <summary>
        /// PhoneNumberConfirmed
        /// </summary>
        private bool _phoneNumberConfirmed;
        
        /// <summary>
        /// TwoFactorEnabled
        /// </summary>
        private bool _twoFactorEnabled;
        
        /// <summary>
        /// LockoutEndDtc
        /// </summary>
        private System.Nullable<System.DateTime> _lockoutEndDtc;
        
        /// <summary>
        /// LockoutEnabled
        /// </summary>
        private bool _lockoutEnabled;
        
        /// <summary>
        /// AccessFailedCount
        /// </summary>
        private int _accessFailedCount;
        
        /// <summary>
        /// Actived
        /// </summary>
        private bool _actived;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUserBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUserBase(long id, string userName, string passwordHash, string securityStamp, string email, bool emailConfirmed, string phoneNumber, bool phoneNumberConfirmed, bool twoFactorEnabled, System.Nullable<System.DateTime> lockoutEndDtc, bool lockoutEnabled, int accessFailedCount, bool actived) {
            _id = id;
            _userName = userName;
            _passwordHash = passwordHash;
            _securityStamp = securityStamp;
            _email = email;
            _emailConfirmed = emailConfirmed;
            _phoneNumber = phoneNumber;
            _phoneNumberConfirmed = phoneNumberConfirmed;
            _twoFactorEnabled = twoFactorEnabled;
            _lockoutEndDtc = lockoutEndDtc;
            _lockoutEnabled = lockoutEnabled;
            _accessFailedCount = accessFailedCount;
            _actived = actived;
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        [Display(Name="用户ID")]
        public override long Id {
            get {
                return _id;
            }
            set {
                _id = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static Int64APColumnDef IdDef {
            get {
                return APDBDef.BzUser.Id;
            }
        }
        
        /// <summary>
        /// UserName
        /// </summary>
        [Display(Name="用户名")]
        [Required()]
        [StringLength(255)]
        public override string UserName {
            get {
                return _userName;
            }
            set {
                _userName = value;
            }
        }
        
        /// <summary>
        /// UserName APColumnDef
        /// </summary>
        public static StringAPColumnDef UserNameDef {
            get {
                return APDBDef.BzUser.UserName;
            }
        }
        
        /// <summary>
        /// PasswordHash
        /// </summary>
        [Display(Name="密码哈希")]
        [StringLength(255)]
        public override string PasswordHash {
            get {
                return _passwordHash;
            }
            set {
                _passwordHash = value;
            }
        }
        
        /// <summary>
        /// PasswordHash APColumnDef
        /// </summary>
        public static StringAPColumnDef PasswordHashDef {
            get {
                return APDBDef.BzUser.PasswordHash;
            }
        }
        
        /// <summary>
        /// SecurityStamp
        /// </summary>
        [Display(Name="Salt")]
        [StringLength(255)]
        public override string SecurityStamp {
            get {
                return _securityStamp;
            }
            set {
                _securityStamp = value;
            }
        }
        
        /// <summary>
        /// SecurityStamp APColumnDef
        /// </summary>
        public static StringAPColumnDef SecurityStampDef {
            get {
                return APDBDef.BzUser.SecurityStamp;
            }
        }
        
        /// <summary>
        /// 尝试实现用户名或邮箱双模式登录
        /// </summary>
        [Display(Name="电子邮箱")]
        [StringLength(255)]
        public override string Email {
            get {
                return _email;
            }
            set {
                _email = value;
            }
        }
        
        /// <summary>
        /// 尝试实现用户名或邮箱双模式登录 APColumnDef
        /// </summary>
        public static StringAPColumnDef EmailDef {
            get {
                return APDBDef.BzUser.Email;
            }
        }
        
        /// <summary>
        /// EmailConfirmed
        /// </summary>
        [Display(Name="电子邮箱确认")]
        public override bool EmailConfirmed {
            get {
                return _emailConfirmed;
            }
            set {
                _emailConfirmed = value;
            }
        }
        
        /// <summary>
        /// EmailConfirmed APColumnDef
        /// </summary>
        public static BooleanAPColumnDef EmailConfirmedDef {
            get {
                return APDBDef.BzUser.EmailConfirmed;
            }
        }
        
        /// <summary>
        /// 为短信服务预留
        /// </summary>
        [Display(Name="电话")]
        [StringLength(255)]
        public override string PhoneNumber {
            get {
                return _phoneNumber;
            }
            set {
                _phoneNumber = value;
            }
        }
        
        /// <summary>
        /// 为短信服务预留 APColumnDef
        /// </summary>
        public static StringAPColumnDef PhoneNumberDef {
            get {
                return APDBDef.BzUser.PhoneNumber;
            }
        }
        
        /// <summary>
        /// PhoneNumberConfirmed
        /// </summary>
        [Display(Name="电话确认")]
        public override bool PhoneNumberConfirmed {
            get {
                return _phoneNumberConfirmed;
            }
            set {
                _phoneNumberConfirmed = value;
            }
        }
        
        /// <summary>
        /// PhoneNumberConfirmed APColumnDef
        /// </summary>
        public static BooleanAPColumnDef PhoneNumberConfirmedDef {
            get {
                return APDBDef.BzUser.PhoneNumberConfirmed;
            }
        }
        
        /// <summary>
        /// TwoFactorEnabled
        /// </summary>
        [Display(Name="双模式")]
        public override bool TwoFactorEnabled {
            get {
                return _twoFactorEnabled;
            }
            set {
                _twoFactorEnabled = value;
            }
        }
        
        /// <summary>
        /// TwoFactorEnabled APColumnDef
        /// </summary>
        public static BooleanAPColumnDef TwoFactorEnabledDef {
            get {
                return APDBDef.BzUser.TwoFactorEnabled;
            }
        }
        
        /// <summary>
        /// LockoutEndDtc
        /// </summary>
        [Display(Name="锁定时间")]
        public virtual System.Nullable<System.DateTime> LockoutEndDtc {
            get {
                return _lockoutEndDtc;
            }
            set {
                _lockoutEndDtc = value;
            }
        }
        
        /// <summary>
        /// LockoutEndDtc APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef LockoutEndDtcDef {
            get {
                return APDBDef.BzUser.LockoutEndDtc;
            }
        }
        
        /// <summary>
        /// LockoutEnabled
        /// </summary>
        [Display(Name="锁定")]
        public override bool LockoutEnabled {
            get {
                return _lockoutEnabled;
            }
            set {
                _lockoutEnabled = value;
            }
        }
        
        /// <summary>
        /// LockoutEnabled APColumnDef
        /// </summary>
        public static BooleanAPColumnDef LockoutEnabledDef {
            get {
                return APDBDef.BzUser.LockoutEnabled;
            }
        }
        
        /// <summary>
        /// AccessFailedCount
        /// </summary>
        [Display(Name="错误次数")]
        public override int AccessFailedCount {
            get {
                return _accessFailedCount;
            }
            set {
                _accessFailedCount = value;
            }
        }
        
        /// <summary>
        /// AccessFailedCount APColumnDef
        /// </summary>
        public static Int32APColumnDef AccessFailedCountDef {
            get {
                return APDBDef.BzUser.AccessFailedCount;
            }
        }
        
        /// <summary>
        /// Actived
        /// </summary>
        [Display(Name="有效")]
        public virtual bool Actived {
            get {
                return _actived;
            }
            set {
                _actived = value;
            }
        }
        
        /// <summary>
        /// Actived APColumnDef
        /// </summary>
        public static BooleanAPColumnDef ActivedDef {
            get {
                return APDBDef.BzUser.Actived;
            }
        }
        
        /// <summary>
        /// BzUserTableDef APTableDef
        /// </summary>
        public static APDBDef.BzUserTableDef TableDef {
            get {
                return APDBDef.BzUser;
            }
        }
        
        /// <summary>
        /// BzUserTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.BzUser.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(BzUser data) {
            Id = data.Id;
            UserName = data.UserName;
            PasswordHash = data.PasswordHash;
            SecurityStamp = data.SecurityStamp;
            Email = data.Email;
            EmailConfirmed = data.EmailConfirmed;
            PhoneNumber = data.PhoneNumber;
            PhoneNumberConfirmed = data.PhoneNumberConfirmed;
            TwoFactorEnabled = data.TwoFactorEnabled;
            LockoutEndDtc = data.LockoutEndDtc;
            LockoutEnabled = data.LockoutEnabled;
            AccessFailedCount = data.AccessFailedCount;
            Actived = data.Actived;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(BzUser data) {
            if ((Id != data.Id)) {
                return false;
            }
            if ((UserName != data.UserName)) {
                return false;
            }
            if ((PasswordHash != data.PasswordHash)) {
                return false;
            }
            if ((SecurityStamp != data.SecurityStamp)) {
                return false;
            }
            if ((Email != data.Email)) {
                return false;
            }
            if ((EmailConfirmed != data.EmailConfirmed)) {
                return false;
            }
            if ((PhoneNumber != data.PhoneNumber)) {
                return false;
            }
            if ((PhoneNumberConfirmed != data.PhoneNumberConfirmed)) {
                return false;
            }
            if ((TwoFactorEnabled != data.TwoFactorEnabled)) {
                return false;
            }
            if ((LockoutEndDtc != data.LockoutEndDtc)) {
                return false;
            }
            if ((LockoutEnabled != data.LockoutEnabled)) {
                return false;
            }
            if ((AccessFailedCount != data.AccessFailedCount)) {
                return false;
            }
            if ((Actived != data.Actived)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.BzUserBpl.Insert(((BzUser)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.BzUserBpl.Update(((BzUser)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long id, Object metadata) {
            APBplDef.BzUserBpl.UpdatePartial(id, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long id) {
            APBplDef.BzUserBpl.PrimaryDelete(id);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.BzUserBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.BzUserBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static BzUser PrimaryGet(long id) {
            return APBplDef.BzUserBpl.PrimaryGet(id);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.BzUserBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.BzUserBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.BzUserBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<BzUser> GetAll() {
            return APBplDef.BzUserBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 用户
    /// </summary>
    [Serializable()]
    public partial class BzUser : BzUserBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUser() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUser(long id, string userName, string passwordHash, string securityStamp, string email, bool emailConfirmed, string phoneNumber, bool phoneNumberConfirmed, bool twoFactorEnabled, System.Nullable<System.DateTime> lockoutEndDtc, bool lockoutEnabled, int accessFailedCount, bool actived) : 
                base(id, userName, passwordHash, securityStamp, email, emailConfirmed, phoneNumber, phoneNumberConfirmed, twoFactorEnabled, lockoutEndDtc, lockoutEnabled, accessFailedCount, actived) {
        }
    }
    
    /// <summary>
    /// UserClaim Base
    /// </summary>
    [Serializable()]
    public abstract partial class BzUserClaimBase : IdentityUserClaim<long> {
        
        /// <summary>
        /// Id
        /// </summary>
        private int _id;
        
        /// <summary>
        /// UserId
        /// </summary>
        private long _userId;
        
        /// <summary>
        /// ClaimType
        /// </summary>
        private string _claimType = string.Empty;
        
        /// <summary>
        /// ClaimValue
        /// </summary>
        private string _claimValue = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUserClaimBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUserClaimBase(int id, long userId, string claimType, string claimValue) {
            _id = id;
            _userId = userId;
            _claimType = claimType;
            _claimValue = claimValue;
        }
        
        /// <summary>
        /// Id
        /// </summary>
        [Display(Name="ID")]
        public override int Id {
            get {
                return _id;
            }
            set {
                _id = value;
            }
        }
        
        /// <summary>
        /// Id APColumnDef
        /// </summary>
        public static Int32APColumnDef IdDef {
            get {
                return APDBDef.BzUserClaim.Id;
            }
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        public override long UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static Int64APColumnDef UserIdDef {
            get {
                return APDBDef.BzUserClaim.UserId;
            }
        }
        
        /// <summary>
        /// ClaimType
        /// </summary>
        [StringLength(100)]
        public override string ClaimType {
            get {
                return _claimType;
            }
            set {
                _claimType = value;
            }
        }
        
        /// <summary>
        /// ClaimType APColumnDef
        /// </summary>
        public static StringAPColumnDef ClaimTypeDef {
            get {
                return APDBDef.BzUserClaim.ClaimType;
            }
        }
        
        /// <summary>
        /// ClaimValue
        /// </summary>
        [StringLength(100)]
        public override string ClaimValue {
            get {
                return _claimValue;
            }
            set {
                _claimValue = value;
            }
        }
        
        /// <summary>
        /// ClaimValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ClaimValueDef {
            get {
                return APDBDef.BzUserClaim.ClaimValue;
            }
        }
        
        /// <summary>
        /// BzUserClaimTableDef APTableDef
        /// </summary>
        public static APDBDef.BzUserClaimTableDef TableDef {
            get {
                return APDBDef.BzUserClaim;
            }
        }
        
        /// <summary>
        /// BzUserClaimTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.BzUserClaim.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(BzUserClaim data) {
            Id = data.Id;
            UserId = data.UserId;
            ClaimType = data.ClaimType;
            ClaimValue = data.ClaimValue;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(BzUserClaim data) {
            if ((Id != data.Id)) {
                return false;
            }
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((ClaimType != data.ClaimType)) {
                return false;
            }
            if ((ClaimValue != data.ClaimValue)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.BzUserClaimBpl.Insert(((BzUserClaim)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.BzUserClaimBpl.Update(((BzUserClaim)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(int id, Object metadata) {
            APBplDef.BzUserClaimBpl.UpdatePartial(id, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(int id) {
            APBplDef.BzUserClaimBpl.PrimaryDelete(id);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.BzUserClaimBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.BzUserClaimBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static BzUserClaim PrimaryGet(int id) {
            return APBplDef.BzUserClaimBpl.PrimaryGet(id);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserClaim> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.BzUserClaimBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserClaim> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.BzUserClaimBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserClaim> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.BzUserClaimBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<BzUserClaim> GetAll() {
            return APBplDef.BzUserClaimBpl.GetAll();
        }
    }
    
    /// <summary>
    /// UserClaim
    /// </summary>
    [Serializable()]
    public partial class BzUserClaim : BzUserClaimBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUserClaim() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUserClaim(int id, long userId, string claimType, string claimValue) : 
                base(id, userId, claimType, claimValue) {
        }
    }
    
    /// <summary>
    /// 用户简档 Base
    /// </summary>
    [Serializable()]
    public abstract partial class BzUserProfileBase {
        
        /// <summary>
        /// UserId
        /// </summary>
        private long _userId;
        
        /// <summary>
        /// UUID
        /// </summary>
        private string _uUID = string.Empty;
        
        /// <summary>
        /// CompanyId
        /// </summary>
        private long _companyId;
        
        /// <summary>
        /// id+name 双重 id 为了提供数据迁移的的灵活性
        /// </summary>
        private string _userName = string.Empty;
        
        /// <summary>
        /// 管理员，学校管理员，教师
        /// </summary>
        private string _userType = string.Empty;
        
        /// <summary>
        /// RealName
        /// </summary>
        private string _realName = string.Empty;
        
        /// <summary>
        /// IDCard
        /// </summary>
        private string _iDCard = string.Empty;
        
        /// <summary>
        /// TrainNo
        /// </summary>
        private string _trainNo = string.Empty;
        
        /// <summary>
        /// PickList - Gender
        /// </summary>
        private long _genderPKID;
        
        /// <summary>
        /// Birthday
        /// </summary>
        private System.DateTime _birthday;
        
        /// <summary>
        /// PickList - PoliticalStatus
        /// </summary>
        private long _politicalStatusPKID;
        
        /// <summary>
        /// PickList - Nationality
        /// </summary>
        private long _nationalityPKID;
        
        /// <summary>
        /// PickList - EduSubject
        /// </summary>
        private long _eduSubjectPKID;
        
        /// <summary>
        /// PickList - DeclareSubject
        /// </summary>
        private long _declareSubjectPKID;
        
        /// <summary>
        /// PickList - EduStage
        /// </summary>
        private long _eduStagePKID;
        
        /// <summary>
        /// JobDate
        /// </summary>
        private System.Nullable<System.DateTime> _jobDate;
        
        /// <summary>
        /// PickList - SkillTitle
        /// </summary>
        private long _skillTitlePKID;
        
        /// <summary>
        /// SkillDate
        /// </summary>
        private System.Nullable<System.DateTime> _skillDate;
        
        /// <summary>
        /// CompanyName
        /// </summary>
        private string _companyName = string.Empty;
        
        /// <summary>
        /// CompanyNameOuter
        /// </summary>
        private string _companyNameOuter = string.Empty;
        
        /// <summary>
        /// Companyaddress
        /// </summary>
        private string _companyaddress = string.Empty;
        
        /// <summary>
        /// PickList - RankTitle
        /// </summary>
        private long _rankTitlePKID;
        
        /// <summary>
        /// CourseCountPerWeek
        /// </summary>
        private string _courseCountPerWeek;
        
        /// <summary>
        /// Hiredate
        /// </summary>
        private System.DateTime _hiredate;
        
        /// <summary>
        /// PickList - EduBg
        /// </summary>
        private long _eduBgPKID;
        
        /// <summary>
        /// PickList - EduDegree
        /// </summary>
        private long _eduDegreePKID;
        
        /// <summary>
        /// GraduateSchool
        /// </summary>
        private string _graduateSchool;
        
        /// <summary>
        /// GraduateDate
        /// </summary>
        private System.Nullable<System.DateTime> _graduateDate;
        
        /// <summary>
        /// Phonemobile
        /// </summary>
        private string _phonemobile;
        
        /// <summary>
        /// 用于联系的电子邮箱
        /// </summary>
        private string _email;
        
        /// <summary>
        /// Phone
        /// </summary>
        private string _phone;
        
        /// <summary>
        /// 2016学年考核情况
        /// </summary>
        private string _dynamic1;
        
        /// <summary>
        /// 2017学年考核情况
        /// </summary>
        private string _dynamic2;
        
        /// <summary>
        /// 2018学年考核情况
        /// </summary>
        private string _dynamic3;
        
        /// <summary>
        /// 上一轮梯队任职情况
        /// </summary>
        private string _dynamic4;
        
        /// <summary>
        /// 目前在市(区)级及以上专业委员会任职情况
        /// </summary>
        private string _dynamic5;
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private long _periodId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUserProfileBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUserProfileBase(
                    long userId, 
                    string uUID, 
                    long companyId, 
                    string userName, 
                    string userType, 
                    string realName, 
                    string iDCard, 
                    string trainNo, 
                    long genderPKID, 
                    System.DateTime birthday, 
                    long politicalStatusPKID, 
                    long nationalityPKID, 
                    long eduSubjectPKID, 
                    long declareSubjectPKID, 
                    long eduStagePKID, 
                    System.Nullable<System.DateTime> jobDate, 
                    long skillTitlePKID, 
                    System.Nullable<System.DateTime> skillDate, 
                    string companyName, 
                    string companyNameOuter, 
                    string companyaddress, 
                    long rankTitlePKID, 
                    string courseCountPerWeek, 
                    System.DateTime hiredate, 
                    long eduBgPKID, 
                    long eduDegreePKID, 
                    string graduateSchool, 
                    System.Nullable<System.DateTime> graduateDate, 
                    string phonemobile, 
                    string email, 
                    string phone, 
                    string dynamic1, 
                    string dynamic2, 
                    string dynamic3, 
                    string dynamic4, 
                    string dynamic5, 
                    long periodId) {
            _userId = userId;
            _uUID = uUID;
            _companyId = companyId;
            _userName = userName;
            _userType = userType;
            _realName = realName;
            _iDCard = iDCard;
            _trainNo = trainNo;
            _genderPKID = genderPKID;
            _birthday = birthday;
            _politicalStatusPKID = politicalStatusPKID;
            _nationalityPKID = nationalityPKID;
            _eduSubjectPKID = eduSubjectPKID;
            _declareSubjectPKID = declareSubjectPKID;
            _eduStagePKID = eduStagePKID;
            _jobDate = jobDate;
            _skillTitlePKID = skillTitlePKID;
            _skillDate = skillDate;
            _companyName = companyName;
            _companyNameOuter = companyNameOuter;
            _companyaddress = companyaddress;
            _rankTitlePKID = rankTitlePKID;
            _courseCountPerWeek = courseCountPerWeek;
            _hiredate = hiredate;
            _eduBgPKID = eduBgPKID;
            _eduDegreePKID = eduDegreePKID;
            _graduateSchool = graduateSchool;
            _graduateDate = graduateDate;
            _phonemobile = phonemobile;
            _email = email;
            _phone = phone;
            _dynamic1 = dynamic1;
            _dynamic2 = dynamic2;
            _dynamic3 = dynamic3;
            _dynamic4 = dynamic4;
            _dynamic5 = dynamic5;
            _periodId = periodId;
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        [Display(Name="用户ID")]
        public virtual long UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static Int64APColumnDef UserIdDef {
            get {
                return APDBDef.BzUserProfile.UserId;
            }
        }
        
        /// <summary>
        /// UUID
        /// </summary>
        [Display(Name="UUID")]
        [StringLength(100)]
        public virtual string UUID {
            get {
                return _uUID;
            }
            set {
                _uUID = value;
            }
        }
        
        /// <summary>
        /// UUID APColumnDef
        /// </summary>
        public static StringAPColumnDef UUIDDef {
            get {
                return APDBDef.BzUserProfile.UUID;
            }
        }
        
        /// <summary>
        /// CompanyId
        /// </summary>
        [Display(Name="单位ID")]
        public virtual long CompanyId {
            get {
                return _companyId;
            }
            set {
                _companyId = value;
            }
        }
        
        /// <summary>
        /// CompanyId APColumnDef
        /// </summary>
        public static Int64APColumnDef CompanyIdDef {
            get {
                return APDBDef.BzUserProfile.CompanyId;
            }
        }
        
        /// <summary>
        /// id+name 双重 id 为了提供数据迁移的的灵活性
        /// </summary>
        [Display(Name="用户名")]
        [Required()]
        [StringLength(255)]
        public virtual string UserName {
            get {
                return _userName;
            }
            set {
                _userName = value;
            }
        }
        
        /// <summary>
        /// id+name 双重 id 为了提供数据迁移的的灵活性 APColumnDef
        /// </summary>
        public static StringAPColumnDef UserNameDef {
            get {
                return APDBDef.BzUserProfile.UserName;
            }
        }
        
        /// <summary>
        /// 管理员，学校管理员，教师
        /// </summary>
        [Display(Name="用户类型")]
        [StringLength(255)]
        public virtual string UserType {
            get {
                return _userType;
            }
            set {
                _userType = value;
            }
        }
        
        /// <summary>
        /// 管理员，学校管理员，教师 APColumnDef
        /// </summary>
        public static StringAPColumnDef UserTypeDef {
            get {
                return APDBDef.BzUserProfile.UserType;
            }
        }
        
        /// <summary>
        /// RealName
        /// </summary>
        [Display(Name="真实姓名")]
        [Required()]
        [StringLength(40)]
        public virtual string RealName {
            get {
                return _realName;
            }
            set {
                _realName = value;
            }
        }
        
        /// <summary>
        /// RealName APColumnDef
        /// </summary>
        public static StringAPColumnDef RealNameDef {
            get {
                return APDBDef.BzUserProfile.RealName;
            }
        }
        
        /// <summary>
        /// IDCard
        /// </summary>
        [Display(Name="身份证件号")]
        [Required()]
        [StringLength(18)]
        public virtual string IDCard {
            get {
                return _iDCard;
            }
            set {
                _iDCard = value;
            }
        }
        
        /// <summary>
        /// IDCard APColumnDef
        /// </summary>
        public static StringAPColumnDef IDCardDef {
            get {
                return APDBDef.BzUserProfile.IDCard;
            }
        }
        
        /// <summary>
        /// TrainNo
        /// </summary>
        [Display(Name="师训编号")]
        [StringLength(20)]
        public virtual string TrainNo {
            get {
                return _trainNo;
            }
            set {
                _trainNo = value;
            }
        }
        
        /// <summary>
        /// TrainNo APColumnDef
        /// </summary>
        public static StringAPColumnDef TrainNoDef {
            get {
                return APDBDef.BzUserProfile.TrainNo;
            }
        }
        
        /// <summary>
        /// PickList - Gender
        /// </summary>
        [Display(Name="性别")]
        [Required()]
        public virtual long GenderPKID {
            get {
                return _genderPKID;
            }
            set {
                _genderPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - Gender APColumnDef
        /// </summary>
        public static Int64APColumnDef GenderPKIDDef {
            get {
                return APDBDef.BzUserProfile.GenderPKID;
            }
        }
        
        /// <summary>
        /// Birthday
        /// </summary>
        [Display(Name="出生年月")]
        [Required()]
        public virtual System.DateTime Birthday {
            get {
                return _birthday;
            }
            set {
                _birthday = value;
            }
        }
        
        /// <summary>
        /// Birthday APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef BirthdayDef {
            get {
                return APDBDef.BzUserProfile.Birthday;
            }
        }
        
        /// <summary>
        /// PickList - PoliticalStatus
        /// </summary>
        [Display(Name="政治面貌")]
        [Required()]
        public virtual long PoliticalStatusPKID {
            get {
                return _politicalStatusPKID;
            }
            set {
                _politicalStatusPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PoliticalStatus APColumnDef
        /// </summary>
        public static Int64APColumnDef PoliticalStatusPKIDDef {
            get {
                return APDBDef.BzUserProfile.PoliticalStatusPKID;
            }
        }
        
        /// <summary>
        /// PickList - Nationality
        /// </summary>
        [Display(Name="民族")]
        [Required()]
        public virtual long NationalityPKID {
            get {
                return _nationalityPKID;
            }
            set {
                _nationalityPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - Nationality APColumnDef
        /// </summary>
        public static Int64APColumnDef NationalityPKIDDef {
            get {
                return APDBDef.BzUserProfile.NationalityPKID;
            }
        }
        
        /// <summary>
        /// PickList - EduSubject
        /// </summary>
        [Display(Name="任教学科")]
        public virtual long EduSubjectPKID {
            get {
                return _eduSubjectPKID;
            }
            set {
                _eduSubjectPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - EduSubject APColumnDef
        /// </summary>
        public static Int64APColumnDef EduSubjectPKIDDef {
            get {
                return APDBDef.BzUserProfile.EduSubjectPKID;
            }
        }
        
        /// <summary>
        /// PickList - DeclareSubject
        /// </summary>
        [Display(Name="申报学科")]
        public virtual long DeclareSubjectPKID {
            get {
                return _declareSubjectPKID;
            }
            set {
                _declareSubjectPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - DeclareSubject APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareSubjectPKIDDef {
            get {
                return APDBDef.BzUserProfile.DeclareSubjectPKID;
            }
        }
        
        /// <summary>
        /// PickList - EduStage
        /// </summary>
        [Display(Name="任教学段")]
        public virtual long EduStagePKID {
            get {
                return _eduStagePKID;
            }
            set {
                _eduStagePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - EduStage APColumnDef
        /// </summary>
        public static Int64APColumnDef EduStagePKIDDef {
            get {
                return APDBDef.BzUserProfile.EduStagePKID;
            }
        }
        
        /// <summary>
        /// JobDate
        /// </summary>
        [Display(Name="参加教育工作年月")]
        [Required()]
        public virtual System.Nullable<System.DateTime> JobDate {
            get {
                return _jobDate;
            }
            set {
                _jobDate = value;
            }
        }
        
        /// <summary>
        /// JobDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef JobDateDef {
            get {
                return APDBDef.BzUserProfile.JobDate;
            }
        }
        
        /// <summary>
        /// PickList - SkillTitle
        /// </summary>
        [Display(Name="现任专技职称")]
        public virtual long SkillTitlePKID {
            get {
                return _skillTitlePKID;
            }
            set {
                _skillTitlePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - SkillTitle APColumnDef
        /// </summary>
        public static Int64APColumnDef SkillTitlePKIDDef {
            get {
                return APDBDef.BzUserProfile.SkillTitlePKID;
            }
        }
        
        /// <summary>
        /// SkillDate
        /// </summary>
        [Display(Name="职称通过年月")]
        [Required()]
        public virtual System.Nullable<System.DateTime> SkillDate {
            get {
                return _skillDate;
            }
            set {
                _skillDate = value;
            }
        }
        
        /// <summary>
        /// SkillDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef SkillDateDef {
            get {
                return APDBDef.BzUserProfile.SkillDate;
            }
        }
        
        /// <summary>
        /// CompanyName
        /// </summary>
        [Display(Name="单位")]
        [Required()]
        [StringLength(100)]
        public virtual string CompanyName {
            get {
                return _companyName;
            }
            set {
                _companyName = value;
            }
        }
        
        /// <summary>
        /// CompanyName APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyNameDef {
            get {
                return APDBDef.BzUserProfile.CompanyName;
            }
        }
        
        /// <summary>
        /// CompanyNameOuter
        /// </summary>
        [Display(Name="单位(数据同步)")]
        [StringLength(800)]
        public virtual string CompanyNameOuter {
            get {
                return _companyNameOuter;
            }
            set {
                _companyNameOuter = value;
            }
        }
        
        /// <summary>
        /// CompanyNameOuter APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyNameOuterDef {
            get {
                return APDBDef.BzUserProfile.CompanyNameOuter;
            }
        }
        
        /// <summary>
        /// Companyaddress
        /// </summary>
        [Display(Name="单位地址")]
        [Required()]
        [StringLength(255)]
        public virtual string Companyaddress {
            get {
                return _companyaddress;
            }
            set {
                _companyaddress = value;
            }
        }
        
        /// <summary>
        /// Companyaddress APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyaddressDef {
            get {
                return APDBDef.BzUserProfile.Companyaddress;
            }
        }
        
        /// <summary>
        /// PickList - RankTitle
        /// </summary>
        [Display(Name="行政职务")]
        public virtual long RankTitlePKID {
            get {
                return _rankTitlePKID;
            }
            set {
                _rankTitlePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - RankTitle APColumnDef
        /// </summary>
        public static Int64APColumnDef RankTitlePKIDDef {
            get {
                return APDBDef.BzUserProfile.RankTitlePKID;
            }
        }
        
        /// <summary>
        /// CourseCountPerWeek
        /// </summary>
        [Display(Name="周课时数")]
        [StringLength(20)]
        public virtual string CourseCountPerWeek {
            get {
                return _courseCountPerWeek;
            }
            set {
                _courseCountPerWeek = value;
            }
        }
        
        /// <summary>
        /// CourseCountPerWeek APColumnDef
        /// </summary>
        public static StringAPColumnDef CourseCountPerWeekDef {
            get {
                return APDBDef.BzUserProfile.CourseCountPerWeek;
            }
        }
        
        /// <summary>
        /// Hiredate
        /// </summary>
        [Display(Name="评聘日期")]
        public virtual System.DateTime Hiredate {
            get {
                return _hiredate;
            }
            set {
                _hiredate = value;
            }
        }
        
        /// <summary>
        /// Hiredate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef HiredateDef {
            get {
                return APDBDef.BzUserProfile.Hiredate;
            }
        }
        
        /// <summary>
        /// PickList - EduBg
        /// </summary>
        [Display(Name="学历")]
        public virtual long EduBgPKID {
            get {
                return _eduBgPKID;
            }
            set {
                _eduBgPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - EduBg APColumnDef
        /// </summary>
        public static Int64APColumnDef EduBgPKIDDef {
            get {
                return APDBDef.BzUserProfile.EduBgPKID;
            }
        }
        
        /// <summary>
        /// PickList - EduDegree
        /// </summary>
        [Display(Name="学位")]
        public virtual long EduDegreePKID {
            get {
                return _eduDegreePKID;
            }
            set {
                _eduDegreePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - EduDegree APColumnDef
        /// </summary>
        public static Int64APColumnDef EduDegreePKIDDef {
            get {
                return APDBDef.BzUserProfile.EduDegreePKID;
            }
        }
        
        /// <summary>
        /// GraduateSchool
        /// </summary>
        [Display(Name="毕业院校与专业")]
        [StringLength(100)]
        public virtual string GraduateSchool {
            get {
                return _graduateSchool;
            }
            set {
                _graduateSchool = value;
            }
        }
        
        /// <summary>
        /// GraduateSchool APColumnDef
        /// </summary>
        public static StringAPColumnDef GraduateSchoolDef {
            get {
                return APDBDef.BzUserProfile.GraduateSchool;
            }
        }
        
        /// <summary>
        /// GraduateDate
        /// </summary>
        [Display(Name="毕业年月")]
        public virtual System.Nullable<System.DateTime> GraduateDate {
            get {
                return _graduateDate;
            }
            set {
                _graduateDate = value;
            }
        }
        
        /// <summary>
        /// GraduateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef GraduateDateDef {
            get {
                return APDBDef.BzUserProfile.GraduateDate;
            }
        }
        
        /// <summary>
        /// Phonemobile
        /// </summary>
        [Display(Name="手机号码")]
        [StringLength(20)]
        public virtual string Phonemobile {
            get {
                return _phonemobile;
            }
            set {
                _phonemobile = value;
            }
        }
        
        /// <summary>
        /// Phonemobile APColumnDef
        /// </summary>
        public static StringAPColumnDef PhonemobileDef {
            get {
                return APDBDef.BzUserProfile.Phonemobile;
            }
        }
        
        /// <summary>
        /// 用于联系的电子邮箱
        /// </summary>
        [Display(Name="电子邮箱")]
        [StringLength(255)]
        public virtual string Email {
            get {
                return _email;
            }
            set {
                _email = value;
            }
        }
        
        /// <summary>
        /// 用于联系的电子邮箱 APColumnDef
        /// </summary>
        public static StringAPColumnDef EmailDef {
            get {
                return APDBDef.BzUserProfile.Email;
            }
        }
        
        /// <summary>
        /// Phone
        /// </summary>
        [Display(Name="办公室电话")]
        [StringLength(20)]
        public virtual string Phone {
            get {
                return _phone;
            }
            set {
                _phone = value;
            }
        }
        
        /// <summary>
        /// Phone APColumnDef
        /// </summary>
        public static StringAPColumnDef PhoneDef {
            get {
                return APDBDef.BzUserProfile.Phone;
            }
        }
        
        /// <summary>
        /// 2016学年考核情况
        /// </summary>
        [Display(Name="2016学年")]
        [StringLength(255)]
        public virtual string Dynamic1 {
            get {
                return _dynamic1;
            }
            set {
                _dynamic1 = value;
            }
        }
        
        /// <summary>
        /// 2016学年考核情况 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic1Def {
            get {
                return APDBDef.BzUserProfile.Dynamic1;
            }
        }
        
        /// <summary>
        /// 2017学年考核情况
        /// </summary>
        [Display(Name="2017学年")]
        [StringLength(255)]
        public virtual string Dynamic2 {
            get {
                return _dynamic2;
            }
            set {
                _dynamic2 = value;
            }
        }
        
        /// <summary>
        /// 2017学年考核情况 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic2Def {
            get {
                return APDBDef.BzUserProfile.Dynamic2;
            }
        }
        
        /// <summary>
        /// 2018学年考核情况
        /// </summary>
        [Display(Name="2018学年")]
        [StringLength(255)]
        public virtual string Dynamic3 {
            get {
                return _dynamic3;
            }
            set {
                _dynamic3 = value;
            }
        }
        
        /// <summary>
        /// 2018学年考核情况 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic3Def {
            get {
                return APDBDef.BzUserProfile.Dynamic3;
            }
        }
        
        /// <summary>
        /// 上一轮梯队任职情况
        /// </summary>
        [StringLength(255)]
        public virtual string Dynamic4 {
            get {
                return _dynamic4;
            }
            set {
                _dynamic4 = value;
            }
        }
        
        /// <summary>
        /// 上一轮梯队任职情况 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic4Def {
            get {
                return APDBDef.BzUserProfile.Dynamic4;
            }
        }
        
        /// <summary>
        /// 目前在市(区)级及以上专业委员会任职情况
        /// </summary>
        [StringLength(300)]
        public virtual string Dynamic5 {
            get {
                return _dynamic5;
            }
            set {
                _dynamic5 = value;
            }
        }
        
        /// <summary>
        /// 目前在市(区)级及以上专业委员会任职情况 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic5Def {
            get {
                return APDBDef.BzUserProfile.Dynamic5;
            }
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="修改周期ID")]
        public virtual long PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static Int64APColumnDef PeriodIdDef {
            get {
                return APDBDef.BzUserProfile.PeriodId;
            }
        }
        
        /// <summary>
        /// BzUserProfileTableDef APTableDef
        /// </summary>
        public static APDBDef.BzUserProfileTableDef TableDef {
            get {
                return APDBDef.BzUserProfile;
            }
        }
        
        /// <summary>
        /// BzUserProfileTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.BzUserProfile.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(BzUserProfile data) {
            UserId = data.UserId;
            UUID = data.UUID;
            CompanyId = data.CompanyId;
            UserName = data.UserName;
            UserType = data.UserType;
            RealName = data.RealName;
            IDCard = data.IDCard;
            TrainNo = data.TrainNo;
            GenderPKID = data.GenderPKID;
            Birthday = data.Birthday;
            PoliticalStatusPKID = data.PoliticalStatusPKID;
            NationalityPKID = data.NationalityPKID;
            EduSubjectPKID = data.EduSubjectPKID;
            DeclareSubjectPKID = data.DeclareSubjectPKID;
            EduStagePKID = data.EduStagePKID;
            JobDate = data.JobDate;
            SkillTitlePKID = data.SkillTitlePKID;
            SkillDate = data.SkillDate;
            CompanyName = data.CompanyName;
            CompanyNameOuter = data.CompanyNameOuter;
            Companyaddress = data.Companyaddress;
            RankTitlePKID = data.RankTitlePKID;
            CourseCountPerWeek = data.CourseCountPerWeek;
            Hiredate = data.Hiredate;
            EduBgPKID = data.EduBgPKID;
            EduDegreePKID = data.EduDegreePKID;
            GraduateSchool = data.GraduateSchool;
            GraduateDate = data.GraduateDate;
            Phonemobile = data.Phonemobile;
            Email = data.Email;
            Phone = data.Phone;
            Dynamic1 = data.Dynamic1;
            Dynamic2 = data.Dynamic2;
            Dynamic3 = data.Dynamic3;
            Dynamic4 = data.Dynamic4;
            Dynamic5 = data.Dynamic5;
            PeriodId = data.PeriodId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(BzUserProfile data) {
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((UUID != data.UUID)) {
                return false;
            }
            if ((CompanyId != data.CompanyId)) {
                return false;
            }
            if ((UserName != data.UserName)) {
                return false;
            }
            if ((UserType != data.UserType)) {
                return false;
            }
            if ((RealName != data.RealName)) {
                return false;
            }
            if ((IDCard != data.IDCard)) {
                return false;
            }
            if ((TrainNo != data.TrainNo)) {
                return false;
            }
            if ((GenderPKID != data.GenderPKID)) {
                return false;
            }
            if ((Birthday != data.Birthday)) {
                return false;
            }
            if ((PoliticalStatusPKID != data.PoliticalStatusPKID)) {
                return false;
            }
            if ((NationalityPKID != data.NationalityPKID)) {
                return false;
            }
            if ((EduSubjectPKID != data.EduSubjectPKID)) {
                return false;
            }
            if ((DeclareSubjectPKID != data.DeclareSubjectPKID)) {
                return false;
            }
            if ((EduStagePKID != data.EduStagePKID)) {
                return false;
            }
            if ((JobDate != data.JobDate)) {
                return false;
            }
            if ((SkillTitlePKID != data.SkillTitlePKID)) {
                return false;
            }
            if ((SkillDate != data.SkillDate)) {
                return false;
            }
            if ((CompanyName != data.CompanyName)) {
                return false;
            }
            if ((CompanyNameOuter != data.CompanyNameOuter)) {
                return false;
            }
            if ((Companyaddress != data.Companyaddress)) {
                return false;
            }
            if ((RankTitlePKID != data.RankTitlePKID)) {
                return false;
            }
            if ((CourseCountPerWeek != data.CourseCountPerWeek)) {
                return false;
            }
            if ((Hiredate != data.Hiredate)) {
                return false;
            }
            if ((EduBgPKID != data.EduBgPKID)) {
                return false;
            }
            if ((EduDegreePKID != data.EduDegreePKID)) {
                return false;
            }
            if ((GraduateSchool != data.GraduateSchool)) {
                return false;
            }
            if ((GraduateDate != data.GraduateDate)) {
                return false;
            }
            if ((Phonemobile != data.Phonemobile)) {
                return false;
            }
            if ((Email != data.Email)) {
                return false;
            }
            if ((Phone != data.Phone)) {
                return false;
            }
            if ((Dynamic1 != data.Dynamic1)) {
                return false;
            }
            if ((Dynamic2 != data.Dynamic2)) {
                return false;
            }
            if ((Dynamic3 != data.Dynamic3)) {
                return false;
            }
            if ((Dynamic4 != data.Dynamic4)) {
                return false;
            }
            if ((Dynamic5 != data.Dynamic5)) {
                return false;
            }
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.BzUserProfileBpl.Insert(((BzUserProfile)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.BzUserProfileBpl.Update(((BzUserProfile)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long userId, Object metadata) {
            APBplDef.BzUserProfileBpl.UpdatePartial(userId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long userId) {
            APBplDef.BzUserProfileBpl.PrimaryDelete(userId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.BzUserProfileBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.BzUserProfileBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static BzUserProfile PrimaryGet(long userId) {
            return APBplDef.BzUserProfileBpl.PrimaryGet(userId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.BzUserProfileBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.BzUserProfileBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.BzUserProfileBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<BzUserProfile> GetAll() {
            return APBplDef.BzUserProfileBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 用户简档
    /// </summary>
    [Serializable()]
    public partial class BzUserProfile : BzUserProfileBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUserProfile() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUserProfile(
                    long userId, 
                    string uUID, 
                    long companyId, 
                    string userName, 
                    string userType, 
                    string realName, 
                    string iDCard, 
                    string trainNo, 
                    long genderPKID, 
                    System.DateTime birthday, 
                    long politicalStatusPKID, 
                    long nationalityPKID, 
                    long eduSubjectPKID, 
                    long declareSubjectPKID, 
                    long eduStagePKID, 
                    System.Nullable<System.DateTime> jobDate, 
                    long skillTitlePKID, 
                    System.Nullable<System.DateTime> skillDate, 
                    string companyName, 
                    string companyNameOuter, 
                    string companyaddress, 
                    long rankTitlePKID, 
                    string courseCountPerWeek, 
                    System.DateTime hiredate, 
                    long eduBgPKID, 
                    long eduDegreePKID, 
                    string graduateSchool, 
                    System.Nullable<System.DateTime> graduateDate, 
                    string phonemobile, 
                    string email, 
                    string phone, 
                    string dynamic1, 
                    string dynamic2, 
                    string dynamic3, 
                    string dynamic4, 
                    string dynamic5, 
                    long periodId) : 
                base(userId, uUID, companyId, userName, userType, realName, iDCard, trainNo, genderPKID, birthday, politicalStatusPKID, nationalityPKID, eduSubjectPKID, declareSubjectPKID, eduStagePKID, jobDate, skillTitlePKID, skillDate, companyName, companyNameOuter, companyaddress, rankTitlePKID, courseCountPerWeek, hiredate, eduBgPKID, eduDegreePKID, graduateSchool, graduateDate, phonemobile, email, phone, dynamic1, dynamic2, dynamic3, dynamic4, dynamic5, periodId) {
        }
    }
    
    /// <summary>
    /// 角色 Base
    /// </summary>
    [Serializable()]
    public abstract partial class BzRoleBase : IdentityRole<long> {
        
        /// <summary>
        /// RoleId
        /// </summary>
        private long _id;
        
        /// <summary>
        /// Name
        /// </summary>
        private string _name = string.Empty;
        
        /// <summary>
        /// NormalizedName
        /// </summary>
        private string _normalizedName = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzRoleBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzRoleBase(long id, string name, string normalizedName) {
            _id = id;
            _name = name;
            _normalizedName = normalizedName;
        }
        
        /// <summary>
        /// RoleId
        /// </summary>
        [Display(Name="角色ID")]
        public override long Id {
            get {
                return _id;
            }
            set {
                _id = value;
            }
        }
        
        /// <summary>
        /// RoleId APColumnDef
        /// </summary>
        public static Int64APColumnDef IdDef {
            get {
                return APDBDef.BzRole.Id;
            }
        }
        
        /// <summary>
        /// Name
        /// </summary>
        [Display(Name="角色名")]
        [Required()]
        [StringLength(255)]
        public override string Name {
            get {
                return _name;
            }
            set {
                _name = value;
            }
        }
        
        /// <summary>
        /// Name APColumnDef
        /// </summary>
        public static StringAPColumnDef NameDef {
            get {
                return APDBDef.BzRole.Name;
            }
        }
        
        /// <summary>
        /// NormalizedName
        /// </summary>
        [Display(Name="常名")]
        [StringLength(255)]
        public override string NormalizedName {
            get {
                return _normalizedName;
            }
            set {
                _normalizedName = value;
            }
        }
        
        /// <summary>
        /// NormalizedName APColumnDef
        /// </summary>
        public static StringAPColumnDef NormalizedNameDef {
            get {
                return APDBDef.BzRole.NormalizedName;
            }
        }
        
        /// <summary>
        /// BzRoleTableDef APTableDef
        /// </summary>
        public static APDBDef.BzRoleTableDef TableDef {
            get {
                return APDBDef.BzRole;
            }
        }
        
        /// <summary>
        /// BzRoleTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.BzRole.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(BzRole data) {
            Id = data.Id;
            Name = data.Name;
            NormalizedName = data.NormalizedName;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(BzRole data) {
            if ((Id != data.Id)) {
                return false;
            }
            if ((Name != data.Name)) {
                return false;
            }
            if ((NormalizedName != data.NormalizedName)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.BzRoleBpl.Insert(((BzRole)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.BzRoleBpl.Update(((BzRole)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long id, Object metadata) {
            APBplDef.BzRoleBpl.UpdatePartial(id, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long id) {
            APBplDef.BzRoleBpl.PrimaryDelete(id);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.BzRoleBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.BzRoleBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static BzRole PrimaryGet(long id) {
            return APBplDef.BzRoleBpl.PrimaryGet(id);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.BzRoleBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.BzRoleBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.BzRoleBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<BzRole> GetAll() {
            return APBplDef.BzRoleBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 角色
    /// </summary>
    [Serializable()]
    public partial class BzRole : BzRoleBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzRole() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzRole(long id, string name, string normalizedName) : 
                base(id, name, normalizedName) {
        }
    }
    
    /// <summary>
    /// 用户角色 Base
    /// </summary>
    [Serializable()]
    public abstract partial class BzUserRoleBase {
        
        /// <summary>
        /// UserRoleId
        /// </summary>
        private long _userRoleId;
        
        /// <summary>
        /// UserId
        /// </summary>
        private long _userId;
        
        /// <summary>
        /// RoleId
        /// </summary>
        private long _roleId;
        
        /// <summary>
        /// ScopeType
        /// </summary>
        private string _scopeType = string.Empty;
        
        /// <summary>
        /// ScopeId
        /// </summary>
        private long _scopeId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUserRoleBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUserRoleBase(long userRoleId, long userId, long roleId, string scopeType, long scopeId) {
            _userRoleId = userRoleId;
            _userId = userId;
            _roleId = roleId;
            _scopeType = scopeType;
            _scopeId = scopeId;
        }
        
        /// <summary>
        /// UserRoleId
        /// </summary>
        [Display(Name="ID")]
        public virtual long UserRoleId {
            get {
                return _userRoleId;
            }
            set {
                _userRoleId = value;
            }
        }
        
        /// <summary>
        /// UserRoleId APColumnDef
        /// </summary>
        public static Int64APColumnDef UserRoleIdDef {
            get {
                return APDBDef.BzUserRole.UserRoleId;
            }
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        [Display(Name="用户ID")]
        public virtual long UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static Int64APColumnDef UserIdDef {
            get {
                return APDBDef.BzUserRole.UserId;
            }
        }
        
        /// <summary>
        /// RoleId
        /// </summary>
        [Display(Name="角色ID")]
        public virtual long RoleId {
            get {
                return _roleId;
            }
            set {
                _roleId = value;
            }
        }
        
        /// <summary>
        /// RoleId APColumnDef
        /// </summary>
        public static Int64APColumnDef RoleIdDef {
            get {
                return APDBDef.BzUserRole.RoleId;
            }
        }
        
        /// <summary>
        /// ScopeType
        /// </summary>
        [Display(Name="作用域类型")]
        [StringLength(30)]
        public virtual string ScopeType {
            get {
                return _scopeType;
            }
            set {
                _scopeType = value;
            }
        }
        
        /// <summary>
        /// ScopeType APColumnDef
        /// </summary>
        public static StringAPColumnDef ScopeTypeDef {
            get {
                return APDBDef.BzUserRole.ScopeType;
            }
        }
        
        /// <summary>
        /// ScopeId
        /// </summary>
        [Display(Name="作用域ID")]
        public virtual long ScopeId {
            get {
                return _scopeId;
            }
            set {
                _scopeId = value;
            }
        }
        
        /// <summary>
        /// ScopeId APColumnDef
        /// </summary>
        public static Int64APColumnDef ScopeIdDef {
            get {
                return APDBDef.BzUserRole.ScopeId;
            }
        }
        
        /// <summary>
        /// BzUserRoleTableDef APTableDef
        /// </summary>
        public static APDBDef.BzUserRoleTableDef TableDef {
            get {
                return APDBDef.BzUserRole;
            }
        }
        
        /// <summary>
        /// BzUserRoleTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.BzUserRole.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(BzUserRole data) {
            UserRoleId = data.UserRoleId;
            UserId = data.UserId;
            RoleId = data.RoleId;
            ScopeType = data.ScopeType;
            ScopeId = data.ScopeId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(BzUserRole data) {
            if ((UserRoleId != data.UserRoleId)) {
                return false;
            }
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((RoleId != data.RoleId)) {
                return false;
            }
            if ((ScopeType != data.ScopeType)) {
                return false;
            }
            if ((ScopeId != data.ScopeId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.BzUserRoleBpl.Insert(((BzUserRole)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.BzUserRoleBpl.Update(((BzUserRole)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long userRoleId, Object metadata) {
            APBplDef.BzUserRoleBpl.UpdatePartial(userRoleId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long userRoleId) {
            APBplDef.BzUserRoleBpl.PrimaryDelete(userRoleId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.BzUserRoleBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.BzUserRoleBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static BzUserRole PrimaryGet(long userRoleId) {
            return APBplDef.BzUserRoleBpl.PrimaryGet(userRoleId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.BzUserRoleBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.BzUserRoleBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserRole> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.BzUserRoleBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<BzUserRole> GetAll() {
            return APBplDef.BzUserRoleBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 用户角色
    /// </summary>
    [Serializable()]
    public partial class BzUserRole : BzUserRoleBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUserRole() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUserRole(long userRoleId, long userId, long roleId, string scopeType, long scopeId) : 
                base(userRoleId, userId, roleId, scopeType, scopeId) {
        }
    }
    
    /// <summary>
    /// 用户信息修改周期表 Base
    /// </summary>
    [Serializable()]
    public abstract partial class ProfileModifyPeriodBase {
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private long _periodId;
        
        /// <summary>
        /// Name
        /// </summary>
        private string _name = string.Empty;
        
        /// <summary>
        /// BeginDate
        /// </summary>
        private System.DateTime _beginDate;
        
        /// <summary>
        /// EndDate
        /// </summary>
        private System.DateTime _endDate;
        
        /// <summary>
        /// IsCurrent
        /// </summary>
        private bool _isCurrent;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ProfileModifyPeriodBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ProfileModifyPeriodBase(long periodId, string name, System.DateTime beginDate, System.DateTime endDate, bool isCurrent) {
            _periodId = periodId;
            _name = name;
            _beginDate = beginDate;
            _endDate = endDate;
            _isCurrent = isCurrent;
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="周期ID")]
        public virtual long PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static Int64APColumnDef PeriodIdDef {
            get {
                return APDBDef.ProfileModifyPeriod.PeriodId;
            }
        }
        
        /// <summary>
        /// Name
        /// </summary>
        [Display(Name="周期名称")]
        [StringLength(100)]
        public virtual string Name {
            get {
                return _name;
            }
            set {
                _name = value;
            }
        }
        
        /// <summary>
        /// Name APColumnDef
        /// </summary>
        public static StringAPColumnDef NameDef {
            get {
                return APDBDef.ProfileModifyPeriod.Name;
            }
        }
        
        /// <summary>
        /// BeginDate
        /// </summary>
        [Display(Name="开始时间（修改区间）")]
        public virtual System.DateTime BeginDate {
            get {
                return _beginDate;
            }
            set {
                _beginDate = value;
            }
        }
        
        /// <summary>
        /// BeginDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef BeginDateDef {
            get {
                return APDBDef.ProfileModifyPeriod.BeginDate;
            }
        }
        
        /// <summary>
        /// EndDate
        /// </summary>
        [Display(Name="结束时间（修改区间）")]
        public virtual System.DateTime EndDate {
            get {
                return _endDate;
            }
            set {
                _endDate = value;
            }
        }
        
        /// <summary>
        /// EndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef EndDateDef {
            get {
                return APDBDef.ProfileModifyPeriod.EndDate;
            }
        }
        
        /// <summary>
        /// IsCurrent
        /// </summary>
        [Display(Name="是否当前修改期")]
        public virtual bool IsCurrent {
            get {
                return _isCurrent;
            }
            set {
                _isCurrent = value;
            }
        }
        
        /// <summary>
        /// IsCurrent APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsCurrentDef {
            get {
                return APDBDef.ProfileModifyPeriod.IsCurrent;
            }
        }
        
        /// <summary>
        /// ProfileModifyPeriodTableDef APTableDef
        /// </summary>
        public static APDBDef.ProfileModifyPeriodTableDef TableDef {
            get {
                return APDBDef.ProfileModifyPeriod;
            }
        }
        
        /// <summary>
        /// ProfileModifyPeriodTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.ProfileModifyPeriod.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(ProfileModifyPeriod data) {
            PeriodId = data.PeriodId;
            Name = data.Name;
            BeginDate = data.BeginDate;
            EndDate = data.EndDate;
            IsCurrent = data.IsCurrent;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(ProfileModifyPeriod data) {
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            if ((Name != data.Name)) {
                return false;
            }
            if ((BeginDate != data.BeginDate)) {
                return false;
            }
            if ((EndDate != data.EndDate)) {
                return false;
            }
            if ((IsCurrent != data.IsCurrent)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ProfileModifyPeriodBpl.Insert(((ProfileModifyPeriod)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ProfileModifyPeriodBpl.Update(((ProfileModifyPeriod)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long periodId, Object metadata) {
            APBplDef.ProfileModifyPeriodBpl.UpdatePartial(periodId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long periodId) {
            APBplDef.ProfileModifyPeriodBpl.PrimaryDelete(periodId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ProfileModifyPeriodBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ProfileModifyPeriodBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static ProfileModifyPeriod PrimaryGet(long periodId) {
            return APBplDef.ProfileModifyPeriodBpl.PrimaryGet(periodId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ProfileModifyPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ProfileModifyPeriodBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ProfileModifyPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ProfileModifyPeriodBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ProfileModifyPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ProfileModifyPeriodBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<ProfileModifyPeriod> GetAll() {
            return APBplDef.ProfileModifyPeriodBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 用户信息修改周期表
    /// </summary>
    [Serializable()]
    public partial class ProfileModifyPeriod : ProfileModifyPeriodBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ProfileModifyPeriod() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ProfileModifyPeriod(long periodId, string name, System.DateTime beginDate, System.DateTime endDate, bool isCurrent) : 
                base(periodId, name, beginDate, endDate, isCurrent) {
        }
    }
    
    /// <summary>
    /// 用户简档历史表 Base
    /// </summary>
    [Serializable()]
    public abstract partial class BzUserProfileHistoryBase {
        
        /// <summary>
        /// Id
        /// </summary>
        private long _id;
        
        /// <summary>
        /// UserId
        /// </summary>
        private long _userId;
        
        /// <summary>
        /// CompanyId
        /// </summary>
        private long _companyId;
        
        /// <summary>
        /// id+name 双重 id 为了提供数据迁移的的灵活性
        /// </summary>
        private string _userName = string.Empty;
        
        /// <summary>
        /// 管理员，学校管理员，教师
        /// </summary>
        private string _userType = string.Empty;
        
        /// <summary>
        /// RealName
        /// </summary>
        private string _realName = string.Empty;
        
        /// <summary>
        /// IDCard
        /// </summary>
        private string _iDCard = string.Empty;
        
        /// <summary>
        /// TrainNo
        /// </summary>
        private string _trainNo = string.Empty;
        
        /// <summary>
        /// PickList - Gender
        /// </summary>
        private long _genderPKID;
        
        /// <summary>
        /// Birthday
        /// </summary>
        private System.DateTime _birthday;
        
        /// <summary>
        /// PickList - PoliticalStatus
        /// </summary>
        private long _politicalStatusPKID;
        
        /// <summary>
        /// PickList - Nationality
        /// </summary>
        private long _nationalityPKID;
        
        /// <summary>
        /// PickList - EduSubject
        /// </summary>
        private long _eduSubjectPKID;
        
        /// <summary>
        /// PickList - EduStage
        /// </summary>
        private long _eduStagePKID;
        
        /// <summary>
        /// JobDate
        /// </summary>
        private System.Nullable<System.DateTime> _jobDate;
        
        /// <summary>
        /// PickList - SkillTitle
        /// </summary>
        private long _skillTitlePKID;
        
        /// <summary>
        /// SkillDate
        /// </summary>
        private System.Nullable<System.DateTime> _skillDate;
        
        /// <summary>
        /// CompanyName
        /// </summary>
        private string _companyName = string.Empty;
        
        /// <summary>
        /// CompanyNameOuter
        /// </summary>
        private string _companyNameOuter = string.Empty;
        
        /// <summary>
        /// Companyaddress
        /// </summary>
        private string _companyaddress = string.Empty;
        
        /// <summary>
        /// PickList - RankTitle
        /// </summary>
        private long _rankTitlePKID;
        
        /// <summary>
        /// PickList - EduBg
        /// </summary>
        private long _eduBgPKID;
        
        /// <summary>
        /// PickList - EduDegree
        /// </summary>
        private long _eduDegreePKID;
        
        /// <summary>
        /// GraduateSchool
        /// </summary>
        private string _graduateSchool = string.Empty;
        
        /// <summary>
        /// GraduateDate
        /// </summary>
        private System.Nullable<System.DateTime> _graduateDate;
        
        /// <summary>
        /// Phonemobile
        /// </summary>
        private string _phonemobile = string.Empty;
        
        /// <summary>
        /// 用于联系的电子邮箱
        /// </summary>
        private string _email = string.Empty;
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private long _periodId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUserProfileHistoryBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUserProfileHistoryBase(
                    long id, 
                    long userId, 
                    long companyId, 
                    string userName, 
                    string userType, 
                    string realName, 
                    string iDCard, 
                    string trainNo, 
                    long genderPKID, 
                    System.DateTime birthday, 
                    long politicalStatusPKID, 
                    long nationalityPKID, 
                    long eduSubjectPKID, 
                    long eduStagePKID, 
                    System.Nullable<System.DateTime> jobDate, 
                    long skillTitlePKID, 
                    System.Nullable<System.DateTime> skillDate, 
                    string companyName, 
                    string companyNameOuter, 
                    string companyaddress, 
                    long rankTitlePKID, 
                    long eduBgPKID, 
                    long eduDegreePKID, 
                    string graduateSchool, 
                    System.Nullable<System.DateTime> graduateDate, 
                    string phonemobile, 
                    string email, 
                    long periodId) {
            _id = id;
            _userId = userId;
            _companyId = companyId;
            _userName = userName;
            _userType = userType;
            _realName = realName;
            _iDCard = iDCard;
            _trainNo = trainNo;
            _genderPKID = genderPKID;
            _birthday = birthday;
            _politicalStatusPKID = politicalStatusPKID;
            _nationalityPKID = nationalityPKID;
            _eduSubjectPKID = eduSubjectPKID;
            _eduStagePKID = eduStagePKID;
            _jobDate = jobDate;
            _skillTitlePKID = skillTitlePKID;
            _skillDate = skillDate;
            _companyName = companyName;
            _companyNameOuter = companyNameOuter;
            _companyaddress = companyaddress;
            _rankTitlePKID = rankTitlePKID;
            _eduBgPKID = eduBgPKID;
            _eduDegreePKID = eduDegreePKID;
            _graduateSchool = graduateSchool;
            _graduateDate = graduateDate;
            _phonemobile = phonemobile;
            _email = email;
            _periodId = periodId;
        }
        
        /// <summary>
        /// Id
        /// </summary>
        [Display(Name="ID")]
        public virtual long Id {
            get {
                return _id;
            }
            set {
                _id = value;
            }
        }
        
        /// <summary>
        /// Id APColumnDef
        /// </summary>
        public static Int64APColumnDef IdDef {
            get {
                return APDBDef.BzUserProfileHistory.Id;
            }
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        [Display(Name="用户ID")]
        public virtual long UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static Int64APColumnDef UserIdDef {
            get {
                return APDBDef.BzUserProfileHistory.UserId;
            }
        }
        
        /// <summary>
        /// CompanyId
        /// </summary>
        [Display(Name="单位ID")]
        public virtual long CompanyId {
            get {
                return _companyId;
            }
            set {
                _companyId = value;
            }
        }
        
        /// <summary>
        /// CompanyId APColumnDef
        /// </summary>
        public static Int64APColumnDef CompanyIdDef {
            get {
                return APDBDef.BzUserProfileHistory.CompanyId;
            }
        }
        
        /// <summary>
        /// id+name 双重 id 为了提供数据迁移的的灵活性
        /// </summary>
        [Display(Name="用户名")]
        [Required()]
        [StringLength(255)]
        public virtual string UserName {
            get {
                return _userName;
            }
            set {
                _userName = value;
            }
        }
        
        /// <summary>
        /// id+name 双重 id 为了提供数据迁移的的灵活性 APColumnDef
        /// </summary>
        public static StringAPColumnDef UserNameDef {
            get {
                return APDBDef.BzUserProfileHistory.UserName;
            }
        }
        
        /// <summary>
        /// 管理员，学校管理员，教师
        /// </summary>
        [Display(Name="用户类型")]
        [StringLength(255)]
        public virtual string UserType {
            get {
                return _userType;
            }
            set {
                _userType = value;
            }
        }
        
        /// <summary>
        /// 管理员，学校管理员，教师 APColumnDef
        /// </summary>
        public static StringAPColumnDef UserTypeDef {
            get {
                return APDBDef.BzUserProfileHistory.UserType;
            }
        }
        
        /// <summary>
        /// RealName
        /// </summary>
        [Display(Name="真实姓名")]
        [Required()]
        [StringLength(40)]
        public virtual string RealName {
            get {
                return _realName;
            }
            set {
                _realName = value;
            }
        }
        
        /// <summary>
        /// RealName APColumnDef
        /// </summary>
        public static StringAPColumnDef RealNameDef {
            get {
                return APDBDef.BzUserProfileHistory.RealName;
            }
        }
        
        /// <summary>
        /// IDCard
        /// </summary>
        [Display(Name="身份证件号")]
        [Required()]
        [StringLength(18)]
        public virtual string IDCard {
            get {
                return _iDCard;
            }
            set {
                _iDCard = value;
            }
        }
        
        /// <summary>
        /// IDCard APColumnDef
        /// </summary>
        public static StringAPColumnDef IDCardDef {
            get {
                return APDBDef.BzUserProfileHistory.IDCard;
            }
        }
        
        /// <summary>
        /// TrainNo
        /// </summary>
        [Display(Name="师训编号")]
        [StringLength(20)]
        public virtual string TrainNo {
            get {
                return _trainNo;
            }
            set {
                _trainNo = value;
            }
        }
        
        /// <summary>
        /// TrainNo APColumnDef
        /// </summary>
        public static StringAPColumnDef TrainNoDef {
            get {
                return APDBDef.BzUserProfileHistory.TrainNo;
            }
        }
        
        /// <summary>
        /// PickList - Gender
        /// </summary>
        [Display(Name="性别")]
        public virtual long GenderPKID {
            get {
                return _genderPKID;
            }
            set {
                _genderPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - Gender APColumnDef
        /// </summary>
        public static Int64APColumnDef GenderPKIDDef {
            get {
                return APDBDef.BzUserProfileHistory.GenderPKID;
            }
        }
        
        /// <summary>
        /// Birthday
        /// </summary>
        [Display(Name="出生年月")]
        [Required()]
        public virtual System.DateTime Birthday {
            get {
                return _birthday;
            }
            set {
                _birthday = value;
            }
        }
        
        /// <summary>
        /// Birthday APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef BirthdayDef {
            get {
                return APDBDef.BzUserProfileHistory.Birthday;
            }
        }
        
        /// <summary>
        /// PickList - PoliticalStatus
        /// </summary>
        [Display(Name="政治面貌")]
        public virtual long PoliticalStatusPKID {
            get {
                return _politicalStatusPKID;
            }
            set {
                _politicalStatusPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PoliticalStatus APColumnDef
        /// </summary>
        public static Int64APColumnDef PoliticalStatusPKIDDef {
            get {
                return APDBDef.BzUserProfileHistory.PoliticalStatusPKID;
            }
        }
        
        /// <summary>
        /// PickList - Nationality
        /// </summary>
        [Display(Name="民族")]
        public virtual long NationalityPKID {
            get {
                return _nationalityPKID;
            }
            set {
                _nationalityPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - Nationality APColumnDef
        /// </summary>
        public static Int64APColumnDef NationalityPKIDDef {
            get {
                return APDBDef.BzUserProfileHistory.NationalityPKID;
            }
        }
        
        /// <summary>
        /// PickList - EduSubject
        /// </summary>
        [Display(Name="任教学科")]
        public virtual long EduSubjectPKID {
            get {
                return _eduSubjectPKID;
            }
            set {
                _eduSubjectPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - EduSubject APColumnDef
        /// </summary>
        public static Int64APColumnDef EduSubjectPKIDDef {
            get {
                return APDBDef.BzUserProfileHistory.EduSubjectPKID;
            }
        }
        
        /// <summary>
        /// PickList - EduStage
        /// </summary>
        [Display(Name="任教学段")]
        public virtual long EduStagePKID {
            get {
                return _eduStagePKID;
            }
            set {
                _eduStagePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - EduStage APColumnDef
        /// </summary>
        public static Int64APColumnDef EduStagePKIDDef {
            get {
                return APDBDef.BzUserProfileHistory.EduStagePKID;
            }
        }
        
        /// <summary>
        /// JobDate
        /// </summary>
        [Display(Name="参加教育工作年月")]
        public virtual System.Nullable<System.DateTime> JobDate {
            get {
                return _jobDate;
            }
            set {
                _jobDate = value;
            }
        }
        
        /// <summary>
        /// JobDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef JobDateDef {
            get {
                return APDBDef.BzUserProfileHistory.JobDate;
            }
        }
        
        /// <summary>
        /// PickList - SkillTitle
        /// </summary>
        [Display(Name="现任专技职称")]
        public virtual long SkillTitlePKID {
            get {
                return _skillTitlePKID;
            }
            set {
                _skillTitlePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - SkillTitle APColumnDef
        /// </summary>
        public static Int64APColumnDef SkillTitlePKIDDef {
            get {
                return APDBDef.BzUserProfileHistory.SkillTitlePKID;
            }
        }
        
        /// <summary>
        /// SkillDate
        /// </summary>
        [Display(Name="职称通过年月")]
        public virtual System.Nullable<System.DateTime> SkillDate {
            get {
                return _skillDate;
            }
            set {
                _skillDate = value;
            }
        }
        
        /// <summary>
        /// SkillDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef SkillDateDef {
            get {
                return APDBDef.BzUserProfileHistory.SkillDate;
            }
        }
        
        /// <summary>
        /// CompanyName
        /// </summary>
        [Display(Name="单位")]
        [StringLength(100)]
        public virtual string CompanyName {
            get {
                return _companyName;
            }
            set {
                _companyName = value;
            }
        }
        
        /// <summary>
        /// CompanyName APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyNameDef {
            get {
                return APDBDef.BzUserProfileHistory.CompanyName;
            }
        }
        
        /// <summary>
        /// CompanyNameOuter
        /// </summary>
        [Display(Name="单位(数据同步)")]
        [StringLength(800)]
        public virtual string CompanyNameOuter {
            get {
                return _companyNameOuter;
            }
            set {
                _companyNameOuter = value;
            }
        }
        
        /// <summary>
        /// CompanyNameOuter APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyNameOuterDef {
            get {
                return APDBDef.BzUserProfileHistory.CompanyNameOuter;
            }
        }
        
        /// <summary>
        /// Companyaddress
        /// </summary>
        [Display(Name="单位地址")]
        [StringLength(255)]
        public virtual string Companyaddress {
            get {
                return _companyaddress;
            }
            set {
                _companyaddress = value;
            }
        }
        
        /// <summary>
        /// Companyaddress APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyaddressDef {
            get {
                return APDBDef.BzUserProfileHistory.Companyaddress;
            }
        }
        
        /// <summary>
        /// PickList - RankTitle
        /// </summary>
        [Display(Name="行政职务")]
        public virtual long RankTitlePKID {
            get {
                return _rankTitlePKID;
            }
            set {
                _rankTitlePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - RankTitle APColumnDef
        /// </summary>
        public static Int64APColumnDef RankTitlePKIDDef {
            get {
                return APDBDef.BzUserProfileHistory.RankTitlePKID;
            }
        }
        
        /// <summary>
        /// PickList - EduBg
        /// </summary>
        [Display(Name="学历")]
        public virtual long EduBgPKID {
            get {
                return _eduBgPKID;
            }
            set {
                _eduBgPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - EduBg APColumnDef
        /// </summary>
        public static Int64APColumnDef EduBgPKIDDef {
            get {
                return APDBDef.BzUserProfileHistory.EduBgPKID;
            }
        }
        
        /// <summary>
        /// PickList - EduDegree
        /// </summary>
        [Display(Name="学位")]
        public virtual long EduDegreePKID {
            get {
                return _eduDegreePKID;
            }
            set {
                _eduDegreePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - EduDegree APColumnDef
        /// </summary>
        public static Int64APColumnDef EduDegreePKIDDef {
            get {
                return APDBDef.BzUserProfileHistory.EduDegreePKID;
            }
        }
        
        /// <summary>
        /// GraduateSchool
        /// </summary>
        [Display(Name="毕业院校与专业")]
        [StringLength(100)]
        public virtual string GraduateSchool {
            get {
                return _graduateSchool;
            }
            set {
                _graduateSchool = value;
            }
        }
        
        /// <summary>
        /// GraduateSchool APColumnDef
        /// </summary>
        public static StringAPColumnDef GraduateSchoolDef {
            get {
                return APDBDef.BzUserProfileHistory.GraduateSchool;
            }
        }
        
        /// <summary>
        /// GraduateDate
        /// </summary>
        [Display(Name="毕业年月")]
        public virtual System.Nullable<System.DateTime> GraduateDate {
            get {
                return _graduateDate;
            }
            set {
                _graduateDate = value;
            }
        }
        
        /// <summary>
        /// GraduateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef GraduateDateDef {
            get {
                return APDBDef.BzUserProfileHistory.GraduateDate;
            }
        }
        
        /// <summary>
        /// Phonemobile
        /// </summary>
        [Display(Name="手机号码")]
        [StringLength(20)]
        public virtual string Phonemobile {
            get {
                return _phonemobile;
            }
            set {
                _phonemobile = value;
            }
        }
        
        /// <summary>
        /// Phonemobile APColumnDef
        /// </summary>
        public static StringAPColumnDef PhonemobileDef {
            get {
                return APDBDef.BzUserProfileHistory.Phonemobile;
            }
        }
        
        /// <summary>
        /// 用于联系的电子邮箱
        /// </summary>
        [Display(Name="电子邮箱")]
        [StringLength(255)]
        public virtual string Email {
            get {
                return _email;
            }
            set {
                _email = value;
            }
        }
        
        /// <summary>
        /// 用于联系的电子邮箱 APColumnDef
        /// </summary>
        public static StringAPColumnDef EmailDef {
            get {
                return APDBDef.BzUserProfileHistory.Email;
            }
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="修改周期ID")]
        public virtual long PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static Int64APColumnDef PeriodIdDef {
            get {
                return APDBDef.BzUserProfileHistory.PeriodId;
            }
        }
        
        /// <summary>
        /// BzUserProfileHistoryTableDef APTableDef
        /// </summary>
        public static APDBDef.BzUserProfileHistoryTableDef TableDef {
            get {
                return APDBDef.BzUserProfileHistory;
            }
        }
        
        /// <summary>
        /// BzUserProfileHistoryTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.BzUserProfileHistory.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(BzUserProfileHistory data) {
            Id = data.Id;
            UserId = data.UserId;
            CompanyId = data.CompanyId;
            UserName = data.UserName;
            UserType = data.UserType;
            RealName = data.RealName;
            IDCard = data.IDCard;
            TrainNo = data.TrainNo;
            GenderPKID = data.GenderPKID;
            Birthday = data.Birthday;
            PoliticalStatusPKID = data.PoliticalStatusPKID;
            NationalityPKID = data.NationalityPKID;
            EduSubjectPKID = data.EduSubjectPKID;
            EduStagePKID = data.EduStagePKID;
            JobDate = data.JobDate;
            SkillTitlePKID = data.SkillTitlePKID;
            SkillDate = data.SkillDate;
            CompanyName = data.CompanyName;
            CompanyNameOuter = data.CompanyNameOuter;
            Companyaddress = data.Companyaddress;
            RankTitlePKID = data.RankTitlePKID;
            EduBgPKID = data.EduBgPKID;
            EduDegreePKID = data.EduDegreePKID;
            GraduateSchool = data.GraduateSchool;
            GraduateDate = data.GraduateDate;
            Phonemobile = data.Phonemobile;
            Email = data.Email;
            PeriodId = data.PeriodId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(BzUserProfileHistory data) {
            if ((Id != data.Id)) {
                return false;
            }
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((CompanyId != data.CompanyId)) {
                return false;
            }
            if ((UserName != data.UserName)) {
                return false;
            }
            if ((UserType != data.UserType)) {
                return false;
            }
            if ((RealName != data.RealName)) {
                return false;
            }
            if ((IDCard != data.IDCard)) {
                return false;
            }
            if ((TrainNo != data.TrainNo)) {
                return false;
            }
            if ((GenderPKID != data.GenderPKID)) {
                return false;
            }
            if ((Birthday != data.Birthday)) {
                return false;
            }
            if ((PoliticalStatusPKID != data.PoliticalStatusPKID)) {
                return false;
            }
            if ((NationalityPKID != data.NationalityPKID)) {
                return false;
            }
            if ((EduSubjectPKID != data.EduSubjectPKID)) {
                return false;
            }
            if ((EduStagePKID != data.EduStagePKID)) {
                return false;
            }
            if ((JobDate != data.JobDate)) {
                return false;
            }
            if ((SkillTitlePKID != data.SkillTitlePKID)) {
                return false;
            }
            if ((SkillDate != data.SkillDate)) {
                return false;
            }
            if ((CompanyName != data.CompanyName)) {
                return false;
            }
            if ((CompanyNameOuter != data.CompanyNameOuter)) {
                return false;
            }
            if ((Companyaddress != data.Companyaddress)) {
                return false;
            }
            if ((RankTitlePKID != data.RankTitlePKID)) {
                return false;
            }
            if ((EduBgPKID != data.EduBgPKID)) {
                return false;
            }
            if ((EduDegreePKID != data.EduDegreePKID)) {
                return false;
            }
            if ((GraduateSchool != data.GraduateSchool)) {
                return false;
            }
            if ((GraduateDate != data.GraduateDate)) {
                return false;
            }
            if ((Phonemobile != data.Phonemobile)) {
                return false;
            }
            if ((Email != data.Email)) {
                return false;
            }
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.BzUserProfileHistoryBpl.Insert(((BzUserProfileHistory)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.BzUserProfileHistoryBpl.Update(((BzUserProfileHistory)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long id, Object metadata) {
            APBplDef.BzUserProfileHistoryBpl.UpdatePartial(id, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long id) {
            APBplDef.BzUserProfileHistoryBpl.PrimaryDelete(id);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.BzUserProfileHistoryBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.BzUserProfileHistoryBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static BzUserProfileHistory PrimaryGet(long id) {
            return APBplDef.BzUserProfileHistoryBpl.PrimaryGet(id);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserProfileHistory> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.BzUserProfileHistoryBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserProfileHistory> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.BzUserProfileHistoryBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzUserProfileHistory> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.BzUserProfileHistoryBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<BzUserProfileHistory> GetAll() {
            return APBplDef.BzUserProfileHistoryBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 用户简档历史表
    /// </summary>
    [Serializable()]
    public partial class BzUserProfileHistory : BzUserProfileHistoryBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzUserProfileHistory() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzUserProfileHistory(
                    long id, 
                    long userId, 
                    long companyId, 
                    string userName, 
                    string userType, 
                    string realName, 
                    string iDCard, 
                    string trainNo, 
                    long genderPKID, 
                    System.DateTime birthday, 
                    long politicalStatusPKID, 
                    long nationalityPKID, 
                    long eduSubjectPKID, 
                    long eduStagePKID, 
                    System.Nullable<System.DateTime> jobDate, 
                    long skillTitlePKID, 
                    System.Nullable<System.DateTime> skillDate, 
                    string companyName, 
                    string companyNameOuter, 
                    string companyaddress, 
                    long rankTitlePKID, 
                    long eduBgPKID, 
                    long eduDegreePKID, 
                    string graduateSchool, 
                    System.Nullable<System.DateTime> graduateDate, 
                    string phonemobile, 
                    string email, 
                    long periodId) : 
                base(id, userId, companyId, userName, userType, realName, iDCard, trainNo, genderPKID, birthday, politicalStatusPKID, nationalityPKID, eduSubjectPKID, eduStagePKID, jobDate, skillTitlePKID, skillDate, companyName, companyNameOuter, companyaddress, rankTitlePKID, eduBgPKID, eduDegreePKID, graduateSchool, graduateDate, phonemobile, email, periodId) {
        }
    }
    
    /// <summary>
    /// 申报历史表 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclareBaseHistoryBase {
        
        /// <summary>
        /// Id
        /// </summary>
        private long _id;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        private long _declareTargetPKID;
        
        /// <summary>
        /// PickList - PLKey_DeclareSubject
        /// </summary>
        private long _declareSubjectPKID;
        
        /// <summary>
        /// PickList - PLKey_DeclareStage
        /// </summary>
        private long _declareStagePKID;
        
        /// <summary>
        /// AllowFlowToSchool
        /// </summary>
        private bool _allowFlowToSchool;
        
        /// <summary>
        /// AllowFitResearcher
        /// </summary>
        private bool _allowFitResearcher;
        
        /// <summary>
        /// HasTeam
        /// </summary>
        private bool _hasTeam;
        
        /// <summary>
        /// 工作室之类的名称
        /// </summary>
        private string _teamName = string.Empty;
        
        /// <summary>
        /// 冗余字段
        /// </summary>
        private int _memberCount;
        
        /// <summary>
        /// 冗余字段
        /// </summary>
        private int _activeCount;
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private long _periodId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareBaseHistoryBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareBaseHistoryBase(long id, long teacherId, long declareTargetPKID, long declareSubjectPKID, long declareStagePKID, bool allowFlowToSchool, bool allowFitResearcher, bool hasTeam, string teamName, int memberCount, int activeCount, long periodId) {
            _id = id;
            _teacherId = teacherId;
            _declareTargetPKID = declareTargetPKID;
            _declareSubjectPKID = declareSubjectPKID;
            _declareStagePKID = declareStagePKID;
            _allowFlowToSchool = allowFlowToSchool;
            _allowFitResearcher = allowFitResearcher;
            _hasTeam = hasTeam;
            _teamName = teamName;
            _memberCount = memberCount;
            _activeCount = activeCount;
            _periodId = periodId;
        }
        
        /// <summary>
        /// Id
        /// </summary>
        [Display(Name="ID")]
        public virtual long Id {
            get {
                return _id;
            }
            set {
                _id = value;
            }
        }
        
        /// <summary>
        /// Id APColumnDef
        /// </summary>
        public static Int64APColumnDef IdDef {
            get {
                return APDBDef.DeclareBaseHistory.Id;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.DeclareBaseHistory.TeacherId;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        [Display(Name="申报（担任）称号")]
        public virtual long DeclareTargetPKID {
            get {
                return _declareTargetPKID;
            }
            set {
                _declareTargetPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareTargetPKIDDef {
            get {
                return APDBDef.DeclareBaseHistory.DeclareTargetPKID;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareSubject
        /// </summary>
        [Display(Name="申报学科")]
        public virtual long DeclareSubjectPKID {
            get {
                return _declareSubjectPKID;
            }
            set {
                _declareSubjectPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareSubject APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareSubjectPKIDDef {
            get {
                return APDBDef.DeclareBaseHistory.DeclareSubjectPKID;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareStage
        /// </summary>
        [Display(Name="申报学段")]
        public virtual long DeclareStagePKID {
            get {
                return _declareStagePKID;
            }
            set {
                _declareStagePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareStage APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareStagePKIDDef {
            get {
                return APDBDef.DeclareBaseHistory.DeclareStagePKID;
            }
        }
        
        /// <summary>
        /// AllowFlowToSchool
        /// </summary>
        [Display(Name="流入学校开展工作")]
        public virtual bool AllowFlowToSchool {
            get {
                return _allowFlowToSchool;
            }
            set {
                _allowFlowToSchool = value;
            }
        }
        
        /// <summary>
        /// AllowFlowToSchool APColumnDef
        /// </summary>
        public static BooleanAPColumnDef AllowFlowToSchoolDef {
            get {
                return APDBDef.DeclareBaseHistory.AllowFlowToSchool;
            }
        }
        
        /// <summary>
        /// AllowFitResearcher
        /// </summary>
        [Display(Name="配合教研员开展工作")]
        public virtual bool AllowFitResearcher {
            get {
                return _allowFitResearcher;
            }
            set {
                _allowFitResearcher = value;
            }
        }
        
        /// <summary>
        /// AllowFitResearcher APColumnDef
        /// </summary>
        public static BooleanAPColumnDef AllowFitResearcherDef {
            get {
                return APDBDef.DeclareBaseHistory.AllowFitResearcher;
            }
        }
        
        /// <summary>
        /// HasTeam
        /// </summary>
        [Display(Name="拥有工作室")]
        public virtual bool HasTeam {
            get {
                return _hasTeam;
            }
            set {
                _hasTeam = value;
            }
        }
        
        /// <summary>
        /// HasTeam APColumnDef
        /// </summary>
        public static BooleanAPColumnDef HasTeamDef {
            get {
                return APDBDef.DeclareBaseHistory.HasTeam;
            }
        }
        
        /// <summary>
        /// 工作室之类的名称
        /// </summary>
        [Display(Name="梯队名称")]
        [StringLength(100)]
        public virtual string TeamName {
            get {
                return _teamName;
            }
            set {
                _teamName = value;
            }
        }
        
        /// <summary>
        /// 工作室之类的名称 APColumnDef
        /// </summary>
        public static StringAPColumnDef TeamNameDef {
            get {
                return APDBDef.DeclareBaseHistory.TeamName;
            }
        }
        
        /// <summary>
        /// 冗余字段
        /// </summary>
        [Display(Name="学员数量")]
        public virtual int MemberCount {
            get {
                return _memberCount;
            }
            set {
                _memberCount = value;
            }
        }
        
        /// <summary>
        /// 冗余字段 APColumnDef
        /// </summary>
        public static Int32APColumnDef MemberCountDef {
            get {
                return APDBDef.DeclareBaseHistory.MemberCount;
            }
        }
        
        /// <summary>
        /// 冗余字段
        /// </summary>
        [Display(Name="活动数量")]
        public virtual int ActiveCount {
            get {
                return _activeCount;
            }
            set {
                _activeCount = value;
            }
        }
        
        /// <summary>
        /// 冗余字段 APColumnDef
        /// </summary>
        public static Int32APColumnDef ActiveCountDef {
            get {
                return APDBDef.DeclareBaseHistory.ActiveCount;
            }
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="修改周期ID")]
        public virtual long PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static Int64APColumnDef PeriodIdDef {
            get {
                return APDBDef.DeclareBaseHistory.PeriodId;
            }
        }
        
        /// <summary>
        /// DeclareBaseHistoryTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclareBaseHistoryTableDef TableDef {
            get {
                return APDBDef.DeclareBaseHistory;
            }
        }
        
        /// <summary>
        /// DeclareBaseHistoryTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.DeclareBaseHistory.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(DeclareBaseHistory data) {
            Id = data.Id;
            TeacherId = data.TeacherId;
            DeclareTargetPKID = data.DeclareTargetPKID;
            DeclareSubjectPKID = data.DeclareSubjectPKID;
            DeclareStagePKID = data.DeclareStagePKID;
            AllowFlowToSchool = data.AllowFlowToSchool;
            AllowFitResearcher = data.AllowFitResearcher;
            HasTeam = data.HasTeam;
            TeamName = data.TeamName;
            MemberCount = data.MemberCount;
            ActiveCount = data.ActiveCount;
            PeriodId = data.PeriodId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(DeclareBaseHistory data) {
            if ((Id != data.Id)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((DeclareTargetPKID != data.DeclareTargetPKID)) {
                return false;
            }
            if ((DeclareSubjectPKID != data.DeclareSubjectPKID)) {
                return false;
            }
            if ((DeclareStagePKID != data.DeclareStagePKID)) {
                return false;
            }
            if ((AllowFlowToSchool != data.AllowFlowToSchool)) {
                return false;
            }
            if ((AllowFitResearcher != data.AllowFitResearcher)) {
                return false;
            }
            if ((HasTeam != data.HasTeam)) {
                return false;
            }
            if ((TeamName != data.TeamName)) {
                return false;
            }
            if ((MemberCount != data.MemberCount)) {
                return false;
            }
            if ((ActiveCount != data.ActiveCount)) {
                return false;
            }
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclareBaseHistoryBpl.Insert(((DeclareBaseHistory)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclareBaseHistoryBpl.Update(((DeclareBaseHistory)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long id, Object metadata) {
            APBplDef.DeclareBaseHistoryBpl.UpdatePartial(id, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long id) {
            APBplDef.DeclareBaseHistoryBpl.PrimaryDelete(id);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclareBaseHistoryBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclareBaseHistoryBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static DeclareBaseHistory PrimaryGet(long id) {
            return APBplDef.DeclareBaseHistoryBpl.PrimaryGet(id);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareBaseHistory> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclareBaseHistoryBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareBaseHistory> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclareBaseHistoryBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareBaseHistory> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclareBaseHistoryBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<DeclareBaseHistory> GetAll() {
            return APBplDef.DeclareBaseHistoryBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报历史表
    /// </summary>
    [Serializable()]
    public partial class DeclareBaseHistory : DeclareBaseHistoryBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareBaseHistory() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareBaseHistory(long id, long teacherId, long declareTargetPKID, long declareSubjectPKID, long declareStagePKID, bool allowFlowToSchool, bool allowFitResearcher, bool hasTeam, string teamName, int memberCount, int activeCount, long periodId) : 
                base(id, teacherId, declareTargetPKID, declareSubjectPKID, declareStagePKID, allowFlowToSchool, allowFitResearcher, hasTeam, teamName, memberCount, activeCount, periodId) {
        }
    }
    
    /// <summary>
    /// 单位 Base
    /// </summary>
    [Serializable()]
    public abstract partial class CompanyBase {
        
        /// <summary>
        /// CompanyId
        /// </summary>
        private long _companyId;
        
        /// <summary>
        /// CompanyName
        /// </summary>
        private string _companyName = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public CompanyBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public CompanyBase(long companyId, string companyName) {
            _companyId = companyId;
            _companyName = companyName;
        }
        
        /// <summary>
        /// CompanyId
        /// </summary>
        [Display(Name="单位ID")]
        public virtual long CompanyId {
            get {
                return _companyId;
            }
            set {
                _companyId = value;
            }
        }
        
        /// <summary>
        /// CompanyId APColumnDef
        /// </summary>
        public static Int64APColumnDef CompanyIdDef {
            get {
                return APDBDef.Company.CompanyId;
            }
        }
        
        /// <summary>
        /// CompanyName
        /// </summary>
        [Display(Name="单位名称")]
        [Required()]
        [StringLength(255)]
        public virtual string CompanyName {
            get {
                return _companyName;
            }
            set {
                _companyName = value;
            }
        }
        
        /// <summary>
        /// CompanyName APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyNameDef {
            get {
                return APDBDef.Company.CompanyName;
            }
        }
        
        /// <summary>
        /// CompanyTableDef APTableDef
        /// </summary>
        public static APDBDef.CompanyTableDef TableDef {
            get {
                return APDBDef.Company;
            }
        }
        
        /// <summary>
        /// CompanyTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Company.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Company data) {
            CompanyId = data.CompanyId;
            CompanyName = data.CompanyName;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Company data) {
            if ((CompanyId != data.CompanyId)) {
                return false;
            }
            if ((CompanyName != data.CompanyName)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.CompanyBpl.Insert(((Company)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.CompanyBpl.Update(((Company)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long companyId, Object metadata) {
            APBplDef.CompanyBpl.UpdatePartial(companyId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long companyId) {
            APBplDef.CompanyBpl.PrimaryDelete(companyId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.CompanyBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.CompanyBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Company PrimaryGet(long companyId) {
            return APBplDef.CompanyBpl.PrimaryGet(companyId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Company> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.CompanyBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Company> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.CompanyBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Company> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.CompanyBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Company> GetAll() {
            return APBplDef.CompanyBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 单位
    /// </summary>
    [Serializable()]
    public partial class Company : CompanyBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Company() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Company(long companyId, string companyName) : 
                base(companyId, companyName) {
        }
    }
    
    /// <summary>
    /// 单位-管理员 Base
    /// </summary>
    [Serializable()]
    public abstract partial class CompanyAccesserBase {
        
        /// <summary>
        /// CompanyId
        /// </summary>
        private long _companyId;
        
        /// <summary>
        /// UserId
        /// </summary>
        private long _userId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public CompanyAccesserBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public CompanyAccesserBase(long companyId, long userId) {
            _companyId = companyId;
            _userId = userId;
        }
        
        /// <summary>
        /// CompanyId
        /// </summary>
        [Display(Name="单位ID")]
        public virtual long CompanyId {
            get {
                return _companyId;
            }
            set {
                _companyId = value;
            }
        }
        
        /// <summary>
        /// CompanyId APColumnDef
        /// </summary>
        public static Int64APColumnDef CompanyIdDef {
            get {
                return APDBDef.CompanyAccesser.CompanyId;
            }
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        [Display(Name="用户ID")]
        public virtual long UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static Int64APColumnDef UserIdDef {
            get {
                return APDBDef.CompanyAccesser.UserId;
            }
        }
        
        /// <summary>
        /// CompanyAccesserTableDef APTableDef
        /// </summary>
        public static APDBDef.CompanyAccesserTableDef TableDef {
            get {
                return APDBDef.CompanyAccesser;
            }
        }
        
        /// <summary>
        /// CompanyAccesserTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.CompanyAccesser.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(CompanyAccesser data) {
            CompanyId = data.CompanyId;
            UserId = data.UserId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(CompanyAccesser data) {
            if ((CompanyId != data.CompanyId)) {
                return false;
            }
            if ((UserId != data.UserId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.CompanyAccesserBpl.Insert(((CompanyAccesser)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.CompanyAccesserBpl.Update(((CompanyAccesser)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long companyId, long userId, Object metadata) {
            APBplDef.CompanyAccesserBpl.UpdatePartial(companyId, userId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long companyId, long userId) {
            APBplDef.CompanyAccesserBpl.PrimaryDelete(companyId, userId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.CompanyAccesserBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.CompanyAccesserBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static CompanyAccesser PrimaryGet(long companyId, long userId) {
            return APBplDef.CompanyAccesserBpl.PrimaryGet(companyId, userId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<CompanyAccesser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.CompanyAccesserBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<CompanyAccesser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.CompanyAccesserBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<CompanyAccesser> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.CompanyAccesserBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<CompanyAccesser> GetAll() {
            return APBplDef.CompanyAccesserBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 单位-管理员
    /// </summary>
    [Serializable()]
    public partial class CompanyAccesser : CompanyAccesserBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public CompanyAccesser() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public CompanyAccesser(long companyId, long userId) : 
                base(companyId, userId) {
        }
    }
    
    /// <summary>
    /// 单位-申报教师 Base
    /// </summary>
    [Serializable()]
    public abstract partial class CompanyDeclareBase {
        
        /// <summary>
        /// CompanyId
        /// </summary>
        private long _companyId;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public CompanyDeclareBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public CompanyDeclareBase(long companyId, long teacherId) {
            _companyId = companyId;
            _teacherId = teacherId;
        }
        
        /// <summary>
        /// CompanyId
        /// </summary>
        [Display(Name="单位ID")]
        public virtual long CompanyId {
            get {
                return _companyId;
            }
            set {
                _companyId = value;
            }
        }
        
        /// <summary>
        /// CompanyId APColumnDef
        /// </summary>
        public static Int64APColumnDef CompanyIdDef {
            get {
                return APDBDef.CompanyDeclare.CompanyId;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.CompanyDeclare.TeacherId;
            }
        }
        
        /// <summary>
        /// CompanyDeclareTableDef APTableDef
        /// </summary>
        public static APDBDef.CompanyDeclareTableDef TableDef {
            get {
                return APDBDef.CompanyDeclare;
            }
        }
        
        /// <summary>
        /// CompanyDeclareTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.CompanyDeclare.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(CompanyDeclare data) {
            CompanyId = data.CompanyId;
            TeacherId = data.TeacherId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(CompanyDeclare data) {
            if ((CompanyId != data.CompanyId)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.CompanyDeclareBpl.Insert(((CompanyDeclare)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.CompanyDeclareBpl.Update(((CompanyDeclare)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long companyId, long teacherId, Object metadata) {
            APBplDef.CompanyDeclareBpl.UpdatePartial(companyId, teacherId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long companyId, long teacherId) {
            APBplDef.CompanyDeclareBpl.PrimaryDelete(companyId, teacherId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.CompanyDeclareBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.CompanyDeclareBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static CompanyDeclare PrimaryGet(long companyId, long teacherId) {
            return APBplDef.CompanyDeclareBpl.PrimaryGet(companyId, teacherId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<CompanyDeclare> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.CompanyDeclareBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<CompanyDeclare> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.CompanyDeclareBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<CompanyDeclare> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.CompanyDeclareBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<CompanyDeclare> GetAll() {
            return APBplDef.CompanyDeclareBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 单位-申报教师
    /// </summary>
    [Serializable()]
    public partial class CompanyDeclare : CompanyDeclareBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public CompanyDeclare() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public CompanyDeclare(long companyId, long teacherId) : 
                base(companyId, teacherId) {
        }
    }
    
    /// <summary>
    /// 权限 Base
    /// </summary>
    [Serializable()]
    public abstract partial class BzPermissionBase {
        
        /// <summary>
        /// PermissionId
        /// </summary>
        private long _id;
        
        /// <summary>
        /// Name
        /// </summary>
        private string _name = string.Empty;
        
        /// <summary>
        /// Status
        /// </summary>
        private int _status = 0;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzPermissionBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzPermissionBase(long id, string name, int status) {
            _id = id;
            _name = name;
            _status = status;
        }
        
        /// <summary>
        /// PermissionId
        /// </summary>
        [Display(Name="权限ID")]
        public virtual long Id {
            get {
                return _id;
            }
            set {
                _id = value;
            }
        }
        
        /// <summary>
        /// PermissionId APColumnDef
        /// </summary>
        public static Int64APColumnDef IdDef {
            get {
                return APDBDef.BzPermission.Id;
            }
        }
        
        /// <summary>
        /// Name
        /// </summary>
        [Display(Name="权限名称")]
        [Required()]
        [StringLength(255)]
        public virtual string Name {
            get {
                return _name;
            }
            set {
                _name = value;
            }
        }
        
        /// <summary>
        /// Name APColumnDef
        /// </summary>
        public static StringAPColumnDef NameDef {
            get {
                return APDBDef.BzPermission.Name;
            }
        }
        
        /// <summary>
        /// Status
        /// </summary>
        [Display(Name="权限状态")]
        public virtual int Status {
            get {
                return _status;
            }
            set {
                _status = value;
            }
        }
        
        /// <summary>
        /// Status APColumnDef
        /// </summary>
        public static Int32APColumnDef StatusDef {
            get {
                return APDBDef.BzPermission.Status;
            }
        }
        
        /// <summary>
        /// BzPermissionTableDef APTableDef
        /// </summary>
        public static APDBDef.BzPermissionTableDef TableDef {
            get {
                return APDBDef.BzPermission;
            }
        }
        
        /// <summary>
        /// BzPermissionTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.BzPermission.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(BzPermission data) {
            Id = data.Id;
            Name = data.Name;
            Status = data.Status;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(BzPermission data) {
            if ((Id != data.Id)) {
                return false;
            }
            if ((Name != data.Name)) {
                return false;
            }
            if ((Status != data.Status)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.BzPermissionBpl.Insert(((BzPermission)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.BzPermissionBpl.Update(((BzPermission)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long id, Object metadata) {
            APBplDef.BzPermissionBpl.UpdatePartial(id, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long id) {
            APBplDef.BzPermissionBpl.PrimaryDelete(id);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.BzPermissionBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.BzPermissionBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static BzPermission PrimaryGet(long id) {
            return APBplDef.BzPermissionBpl.PrimaryGet(id);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzPermission> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.BzPermissionBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzPermission> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.BzPermissionBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzPermission> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.BzPermissionBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<BzPermission> GetAll() {
            return APBplDef.BzPermissionBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 权限
    /// </summary>
    [Serializable()]
    public partial class BzPermission : BzPermissionBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzPermission() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzPermission(long id, string name, int status) : 
                base(id, name, status) {
        }
    }
    
    /// <summary>
    /// 角色权限 Base
    /// </summary>
    [Serializable()]
    public abstract partial class BzRolePermissionBase {
        
        /// <summary>
        /// RolePermissionId
        /// </summary>
        private long _rolePermissionId;
        
        /// <summary>
        /// RoleId
        /// </summary>
        private long _roleId;
        
        /// <summary>
        /// PermissionId
        /// </summary>
        private long _permissionId;
        
        /// <summary>
        /// IsGrant
        /// </summary>
        private bool _isGrant = true;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzRolePermissionBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzRolePermissionBase(long rolePermissionId, long roleId, long permissionId, bool isGrant) {
            _rolePermissionId = rolePermissionId;
            _roleId = roleId;
            _permissionId = permissionId;
            _isGrant = isGrant;
        }
        
        /// <summary>
        /// RolePermissionId
        /// </summary>
        [Display(Name="ID")]
        public virtual long RolePermissionId {
            get {
                return _rolePermissionId;
            }
            set {
                _rolePermissionId = value;
            }
        }
        
        /// <summary>
        /// RolePermissionId APColumnDef
        /// </summary>
        public static Int64APColumnDef RolePermissionIdDef {
            get {
                return APDBDef.BzRolePermission.RolePermissionId;
            }
        }
        
        /// <summary>
        /// RoleId
        /// </summary>
        [Display(Name="角色ID")]
        public virtual long RoleId {
            get {
                return _roleId;
            }
            set {
                _roleId = value;
            }
        }
        
        /// <summary>
        /// RoleId APColumnDef
        /// </summary>
        public static Int64APColumnDef RoleIdDef {
            get {
                return APDBDef.BzRolePermission.RoleId;
            }
        }
        
        /// <summary>
        /// PermissionId
        /// </summary>
        [Display(Name="权限ID")]
        public virtual long PermissionId {
            get {
                return _permissionId;
            }
            set {
                _permissionId = value;
            }
        }
        
        /// <summary>
        /// PermissionId APColumnDef
        /// </summary>
        public static Int64APColumnDef PermissionIdDef {
            get {
                return APDBDef.BzRolePermission.PermissionId;
            }
        }
        
        /// <summary>
        /// IsGrant
        /// </summary>
        [Display(Name="是否授权")]
        public virtual bool IsGrant {
            get {
                return _isGrant;
            }
            set {
                _isGrant = value;
            }
        }
        
        /// <summary>
        /// IsGrant APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsGrantDef {
            get {
                return APDBDef.BzRolePermission.IsGrant;
            }
        }
        
        /// <summary>
        /// BzRolePermissionTableDef APTableDef
        /// </summary>
        public static APDBDef.BzRolePermissionTableDef TableDef {
            get {
                return APDBDef.BzRolePermission;
            }
        }
        
        /// <summary>
        /// BzRolePermissionTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.BzRolePermission.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(BzRolePermission data) {
            RolePermissionId = data.RolePermissionId;
            RoleId = data.RoleId;
            PermissionId = data.PermissionId;
            IsGrant = data.IsGrant;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(BzRolePermission data) {
            if ((RolePermissionId != data.RolePermissionId)) {
                return false;
            }
            if ((RoleId != data.RoleId)) {
                return false;
            }
            if ((PermissionId != data.PermissionId)) {
                return false;
            }
            if ((IsGrant != data.IsGrant)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.BzRolePermissionBpl.Insert(((BzRolePermission)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.BzRolePermissionBpl.Update(((BzRolePermission)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long rolePermissionId, Object metadata) {
            APBplDef.BzRolePermissionBpl.UpdatePartial(rolePermissionId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long rolePermissionId) {
            APBplDef.BzRolePermissionBpl.PrimaryDelete(rolePermissionId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.BzRolePermissionBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.BzRolePermissionBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static BzRolePermission PrimaryGet(long rolePermissionId) {
            return APBplDef.BzRolePermissionBpl.PrimaryGet(rolePermissionId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzRolePermission> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.BzRolePermissionBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzRolePermission> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.BzRolePermissionBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<BzRolePermission> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.BzRolePermissionBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<BzRolePermission> GetAll() {
            return APBplDef.BzRolePermissionBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 角色权限
    /// </summary>
    [Serializable()]
    public partial class BzRolePermission : BzRolePermissionBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public BzRolePermission() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public BzRolePermission(long rolePermissionId, long roleId, long permissionId, bool isGrant) : 
                base(rolePermissionId, roleId, permissionId, isGrant) {
        }
    }
    
    /// <summary>
    /// 申报 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclareBaseBase {
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        private long _declareTargetPKID;
        
        /// <summary>
        /// PickList - PLKey_DeclareSubject
        /// </summary>
        private long _declareSubjectPKID;
        
        /// <summary>
        /// PickList - PLKey_DeclareStage
        /// </summary>
        private long _declareStagePKID;
        
        /// <summary>
        /// AllowFlowToSchool
        /// </summary>
        private bool _allowFlowToSchool;
        
        /// <summary>
        /// AllowFitResearcher
        /// </summary>
        private bool _allowFitResearcher;
        
        /// <summary>
        /// HasTeam
        /// </summary>
        private bool _hasTeam;
        
        /// <summary>
        /// 工作室之类的名称
        /// </summary>
        private string _teamName = string.Empty;
        
        /// <summary>
        /// 冗余字段
        /// </summary>
        private int _memberCount;
        
        /// <summary>
        /// 冗余字段
        /// </summary>
        private int _activeCount;
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private long _periodId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareBaseBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareBaseBase(long teacherId, long declareTargetPKID, long declareSubjectPKID, long declareStagePKID, bool allowFlowToSchool, bool allowFitResearcher, bool hasTeam, string teamName, int memberCount, int activeCount, long periodId) {
            _teacherId = teacherId;
            _declareTargetPKID = declareTargetPKID;
            _declareSubjectPKID = declareSubjectPKID;
            _declareStagePKID = declareStagePKID;
            _allowFlowToSchool = allowFlowToSchool;
            _allowFitResearcher = allowFitResearcher;
            _hasTeam = hasTeam;
            _teamName = teamName;
            _memberCount = memberCount;
            _activeCount = activeCount;
            _periodId = periodId;
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.DeclareBase.TeacherId;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        [Display(Name="申报（担任）称号")]
        public virtual long DeclareTargetPKID {
            get {
                return _declareTargetPKID;
            }
            set {
                _declareTargetPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareTargetPKIDDef {
            get {
                return APDBDef.DeclareBase.DeclareTargetPKID;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareSubject
        /// </summary>
        [Display(Name="申报学科")]
        public virtual long DeclareSubjectPKID {
            get {
                return _declareSubjectPKID;
            }
            set {
                _declareSubjectPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareSubject APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareSubjectPKIDDef {
            get {
                return APDBDef.DeclareBase.DeclareSubjectPKID;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareStage
        /// </summary>
        [Display(Name="申报学段")]
        public virtual long DeclareStagePKID {
            get {
                return _declareStagePKID;
            }
            set {
                _declareStagePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareStage APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareStagePKIDDef {
            get {
                return APDBDef.DeclareBase.DeclareStagePKID;
            }
        }
        
        /// <summary>
        /// AllowFlowToSchool
        /// </summary>
        [Display(Name="流入学校开展工作")]
        public virtual bool AllowFlowToSchool {
            get {
                return _allowFlowToSchool;
            }
            set {
                _allowFlowToSchool = value;
            }
        }
        
        /// <summary>
        /// AllowFlowToSchool APColumnDef
        /// </summary>
        public static BooleanAPColumnDef AllowFlowToSchoolDef {
            get {
                return APDBDef.DeclareBase.AllowFlowToSchool;
            }
        }
        
        /// <summary>
        /// AllowFitResearcher
        /// </summary>
        [Display(Name="配合教研员开展工作")]
        public virtual bool AllowFitResearcher {
            get {
                return _allowFitResearcher;
            }
            set {
                _allowFitResearcher = value;
            }
        }
        
        /// <summary>
        /// AllowFitResearcher APColumnDef
        /// </summary>
        public static BooleanAPColumnDef AllowFitResearcherDef {
            get {
                return APDBDef.DeclareBase.AllowFitResearcher;
            }
        }
        
        /// <summary>
        /// HasTeam
        /// </summary>
        [Display(Name="拥有工作室")]
        public virtual bool HasTeam {
            get {
                return _hasTeam;
            }
            set {
                _hasTeam = value;
            }
        }
        
        /// <summary>
        /// HasTeam APColumnDef
        /// </summary>
        public static BooleanAPColumnDef HasTeamDef {
            get {
                return APDBDef.DeclareBase.HasTeam;
            }
        }
        
        /// <summary>
        /// 工作室之类的名称
        /// </summary>
        [Display(Name="梯队名称")]
        [StringLength(100)]
        public virtual string TeamName {
            get {
                return _teamName;
            }
            set {
                _teamName = value;
            }
        }
        
        /// <summary>
        /// 工作室之类的名称 APColumnDef
        /// </summary>
        public static StringAPColumnDef TeamNameDef {
            get {
                return APDBDef.DeclareBase.TeamName;
            }
        }
        
        /// <summary>
        /// 冗余字段
        /// </summary>
        [Display(Name="学员数量")]
        public virtual int MemberCount {
            get {
                return _memberCount;
            }
            set {
                _memberCount = value;
            }
        }
        
        /// <summary>
        /// 冗余字段 APColumnDef
        /// </summary>
        public static Int32APColumnDef MemberCountDef {
            get {
                return APDBDef.DeclareBase.MemberCount;
            }
        }
        
        /// <summary>
        /// 冗余字段
        /// </summary>
        [Display(Name="活动数量")]
        public virtual int ActiveCount {
            get {
                return _activeCount;
            }
            set {
                _activeCount = value;
            }
        }
        
        /// <summary>
        /// 冗余字段 APColumnDef
        /// </summary>
        public static Int32APColumnDef ActiveCountDef {
            get {
                return APDBDef.DeclareBase.ActiveCount;
            }
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="修改周期ID")]
        public virtual long PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static Int64APColumnDef PeriodIdDef {
            get {
                return APDBDef.DeclareBase.PeriodId;
            }
        }
        
        /// <summary>
        /// DeclareBaseTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclareBaseTableDef TableDef {
            get {
                return APDBDef.DeclareBase;
            }
        }
        
        /// <summary>
        /// DeclareBaseTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.DeclareBase.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(DeclareBase data) {
            TeacherId = data.TeacherId;
            DeclareTargetPKID = data.DeclareTargetPKID;
            DeclareSubjectPKID = data.DeclareSubjectPKID;
            DeclareStagePKID = data.DeclareStagePKID;
            AllowFlowToSchool = data.AllowFlowToSchool;
            AllowFitResearcher = data.AllowFitResearcher;
            HasTeam = data.HasTeam;
            TeamName = data.TeamName;
            MemberCount = data.MemberCount;
            ActiveCount = data.ActiveCount;
            PeriodId = data.PeriodId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(DeclareBase data) {
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((DeclareTargetPKID != data.DeclareTargetPKID)) {
                return false;
            }
            if ((DeclareSubjectPKID != data.DeclareSubjectPKID)) {
                return false;
            }
            if ((DeclareStagePKID != data.DeclareStagePKID)) {
                return false;
            }
            if ((AllowFlowToSchool != data.AllowFlowToSchool)) {
                return false;
            }
            if ((AllowFitResearcher != data.AllowFitResearcher)) {
                return false;
            }
            if ((HasTeam != data.HasTeam)) {
                return false;
            }
            if ((TeamName != data.TeamName)) {
                return false;
            }
            if ((MemberCount != data.MemberCount)) {
                return false;
            }
            if ((ActiveCount != data.ActiveCount)) {
                return false;
            }
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclareBaseBpl.Insert(((DeclareBase)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclareBaseBpl.Update(((DeclareBase)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long teacherId, Object metadata) {
            APBplDef.DeclareBaseBpl.UpdatePartial(teacherId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long teacherId) {
            APBplDef.DeclareBaseBpl.PrimaryDelete(teacherId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclareBaseBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclareBaseBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static DeclareBase PrimaryGet(long teacherId) {
            return APBplDef.DeclareBaseBpl.PrimaryGet(teacherId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareBase> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclareBaseBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareBase> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclareBaseBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareBase> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclareBaseBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<DeclareBase> GetAll() {
            return APBplDef.DeclareBaseBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报
    /// </summary>
    [Serializable()]
    public partial class DeclareBase : DeclareBaseBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareBase(long teacherId, long declareTargetPKID, long declareSubjectPKID, long declareStagePKID, bool allowFlowToSchool, bool allowFitResearcher, bool hasTeam, string teamName, int memberCount, int activeCount, long periodId) : 
                base(teacherId, declareTargetPKID, declareSubjectPKID, declareStagePKID, allowFlowToSchool, allowFitResearcher, hasTeam, teamName, memberCount, activeCount, periodId) {
        }
    }
    
    /// <summary>
    /// 申报-简历 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclareResumeBase {
        
        /// <summary>
        /// DeclareResumeId
        /// </summary>
        private long _declareResumeId;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// DateRegion
        /// </summary>
        private string _dateRegion = string.Empty;
        
        /// <summary>
        /// Company
        /// </summary>
        private string _company = string.Empty;
        
        /// <summary>
        /// Title
        /// </summary>
        private string _title = string.Empty;
        
        /// <summary>
        /// IsDeclare
        /// </summary>
        private bool _isDeclare;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.Nullable<System.DateTime> _modifyDate;
        
        /// <summary>
        /// Modifier
        /// </summary>
        private long _modifier;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareResumeBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareResumeBase(long declareResumeId, long teacherId, string dateRegion, string company, string title, bool isDeclare, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) {
            _declareResumeId = declareResumeId;
            _teacherId = teacherId;
            _dateRegion = dateRegion;
            _company = company;
            _title = title;
            _isDeclare = isDeclare;
            _createDate = createDate;
            _creator = creator;
            _modifyDate = modifyDate;
            _modifier = modifier;
        }
        
        /// <summary>
        /// DeclareResumeId
        /// </summary>
        [Display(Name="简历ID")]
        public virtual long DeclareResumeId {
            get {
                return _declareResumeId;
            }
            set {
                _declareResumeId = value;
            }
        }
        
        /// <summary>
        /// DeclareResumeId APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareResumeIdDef {
            get {
                return APDBDef.DeclareResume.DeclareResumeId;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.DeclareResume.TeacherId;
            }
        }
        
        /// <summary>
        /// DateRegion
        /// </summary>
        [Display(Name="时间区间")]
        [StringLength(100)]
        public virtual string DateRegion {
            get {
                return _dateRegion;
            }
            set {
                _dateRegion = value;
            }
        }
        
        /// <summary>
        /// DateRegion APColumnDef
        /// </summary>
        public static StringAPColumnDef DateRegionDef {
            get {
                return APDBDef.DeclareResume.DateRegion;
            }
        }
        
        /// <summary>
        /// Company
        /// </summary>
        [Display(Name="单位")]
        [StringLength(100)]
        public virtual string Company {
            get {
                return _company;
            }
            set {
                _company = value;
            }
        }
        
        /// <summary>
        /// Company APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyDef {
            get {
                return APDBDef.DeclareResume.Company;
            }
        }
        
        /// <summary>
        /// Title
        /// </summary>
        [Display(Name="职称、职务")]
        [StringLength(100)]
        public virtual string Title {
            get {
                return _title;
            }
            set {
                _title = value;
            }
        }
        
        /// <summary>
        /// Title APColumnDef
        /// </summary>
        public static StringAPColumnDef TitleDef {
            get {
                return APDBDef.DeclareResume.Title;
            }
        }
        
        /// <summary>
        /// IsDeclare
        /// </summary>
        [Display(Name="是否申报")]
        public virtual bool IsDeclare {
            get {
                return _isDeclare;
            }
            set {
                _isDeclare = value;
            }
        }
        
        /// <summary>
        /// IsDeclare APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsDeclareDef {
            get {
                return APDBDef.DeclareResume.IsDeclare;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.DeclareResume.CreateDate;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        [Display(Name="创建人")]
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.DeclareResume.Creator;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="修改时间")]
        public virtual System.Nullable<System.DateTime> ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.DeclareResume.ModifyDate;
            }
        }
        
        /// <summary>
        /// Modifier
        /// </summary>
        [Display(Name="修改人")]
        public virtual long Modifier {
            get {
                return _modifier;
            }
            set {
                _modifier = value;
            }
        }
        
        /// <summary>
        /// Modifier APColumnDef
        /// </summary>
        public static Int64APColumnDef ModifierDef {
            get {
                return APDBDef.DeclareResume.Modifier;
            }
        }
        
        /// <summary>
        /// DeclareResumeTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclareResumeTableDef TableDef {
            get {
                return APDBDef.DeclareResume;
            }
        }
        
        /// <summary>
        /// DeclareResumeTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.DeclareResume.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(DeclareResume data) {
            DeclareResumeId = data.DeclareResumeId;
            TeacherId = data.TeacherId;
            DateRegion = data.DateRegion;
            Company = data.Company;
            Title = data.Title;
            IsDeclare = data.IsDeclare;
            CreateDate = data.CreateDate;
            Creator = data.Creator;
            ModifyDate = data.ModifyDate;
            Modifier = data.Modifier;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(DeclareResume data) {
            if ((DeclareResumeId != data.DeclareResumeId)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((DateRegion != data.DateRegion)) {
                return false;
            }
            if ((Company != data.Company)) {
                return false;
            }
            if ((Title != data.Title)) {
                return false;
            }
            if ((IsDeclare != data.IsDeclare)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((Modifier != data.Modifier)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclareResumeBpl.Insert(((DeclareResume)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclareResumeBpl.Update(((DeclareResume)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long declareResumeId, Object metadata) {
            APBplDef.DeclareResumeBpl.UpdatePartial(declareResumeId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long declareResumeId) {
            APBplDef.DeclareResumeBpl.PrimaryDelete(declareResumeId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclareResumeBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclareResumeBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static DeclareResume PrimaryGet(long declareResumeId) {
            return APBplDef.DeclareResumeBpl.PrimaryGet(declareResumeId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareResume> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclareResumeBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareResume> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclareResumeBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareResume> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclareResumeBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<DeclareResume> GetAll() {
            return APBplDef.DeclareResumeBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报-简历
    /// </summary>
    [Serializable()]
    public partial class DeclareResume : DeclareResumeBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareResume() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareResume(long declareResumeId, long teacherId, string dateRegion, string company, string title, bool isDeclare, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) : 
                base(declareResumeId, teacherId, dateRegion, company, title, isDeclare, createDate, creator, modifyDate, modifier) {
        }
    }
    
    /// <summary>
    /// 申报-内容 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclareContentBase {
        
        /// <summary>
        /// DeclareContentId
        /// </summary>
        private long _declareContentId;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        private string _contentKey = string.Empty;
        
        /// <summary>
        /// ContentValue
        /// </summary>
        private string _contentValue = string.Empty;
        
        /// <summary>
        /// 内容的数据类型，String，DateTime等
        /// </summary>
        private string _contentDataType = string.Empty;
        
        /// <summary>
        /// IsDeclare
        /// </summary>
        private bool _isDeclare;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.Nullable<System.DateTime> _modifyDate;
        
        /// <summary>
        /// Modifier
        /// </summary>
        private long _modifier;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareContentBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareContentBase(long declareContentId, long teacherId, string contentKey, string contentValue, string contentDataType, bool isDeclare, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) {
            _declareContentId = declareContentId;
            _teacherId = teacherId;
            _contentKey = contentKey;
            _contentValue = contentValue;
            _contentDataType = contentDataType;
            _isDeclare = isDeclare;
            _createDate = createDate;
            _creator = creator;
            _modifyDate = modifyDate;
            _modifier = modifier;
        }
        
        /// <summary>
        /// DeclareContentId
        /// </summary>
        [Display(Name="内容ID")]
        public virtual long DeclareContentId {
            get {
                return _declareContentId;
            }
            set {
                _declareContentId = value;
            }
        }
        
        /// <summary>
        /// DeclareContentId APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareContentIdDef {
            get {
                return APDBDef.DeclareContent.DeclareContentId;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.DeclareContent.TeacherId;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        [Display(Name="内容类别")]
        [StringLength(200)]
        public virtual string ContentKey {
            get {
                return _contentKey;
            }
            set {
                _contentKey = value;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割 APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentKeyDef {
            get {
                return APDBDef.DeclareContent.ContentKey;
            }
        }
        
        /// <summary>
        /// ContentValue
        /// </summary>
        [Display(Name="内容")]
        [StringLength(30000)]
        public virtual string ContentValue {
            get {
                return _contentValue;
            }
            set {
                _contentValue = value;
            }
        }
        
        /// <summary>
        /// ContentValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentValueDef {
            get {
                return APDBDef.DeclareContent.ContentValue;
            }
        }
        
        /// <summary>
        /// 内容的数据类型，String，DateTime等
        /// </summary>
        [Display(Name="内容数据类型")]
        [StringLength(100)]
        public virtual string ContentDataType {
            get {
                return _contentDataType;
            }
            set {
                _contentDataType = value;
            }
        }
        
        /// <summary>
        /// 内容的数据类型，String，DateTime等 APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentDataTypeDef {
            get {
                return APDBDef.DeclareContent.ContentDataType;
            }
        }
        
        /// <summary>
        /// IsDeclare
        /// </summary>
        [Display(Name="是否申报")]
        public virtual bool IsDeclare {
            get {
                return _isDeclare;
            }
            set {
                _isDeclare = value;
            }
        }
        
        /// <summary>
        /// IsDeclare APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsDeclareDef {
            get {
                return APDBDef.DeclareContent.IsDeclare;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.DeclareContent.CreateDate;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        [Display(Name="创建人")]
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.DeclareContent.Creator;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="修改时间")]
        public virtual System.Nullable<System.DateTime> ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.DeclareContent.ModifyDate;
            }
        }
        
        /// <summary>
        /// Modifier
        /// </summary>
        [Display(Name="修改人")]
        public virtual long Modifier {
            get {
                return _modifier;
            }
            set {
                _modifier = value;
            }
        }
        
        /// <summary>
        /// Modifier APColumnDef
        /// </summary>
        public static Int64APColumnDef ModifierDef {
            get {
                return APDBDef.DeclareContent.Modifier;
            }
        }
        
        /// <summary>
        /// DeclareContentTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclareContentTableDef TableDef {
            get {
                return APDBDef.DeclareContent;
            }
        }
        
        /// <summary>
        /// DeclareContentTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.DeclareContent.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(DeclareContent data) {
            DeclareContentId = data.DeclareContentId;
            TeacherId = data.TeacherId;
            ContentKey = data.ContentKey;
            ContentValue = data.ContentValue;
            ContentDataType = data.ContentDataType;
            IsDeclare = data.IsDeclare;
            CreateDate = data.CreateDate;
            Creator = data.Creator;
            ModifyDate = data.ModifyDate;
            Modifier = data.Modifier;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(DeclareContent data) {
            if ((DeclareContentId != data.DeclareContentId)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((ContentKey != data.ContentKey)) {
                return false;
            }
            if ((ContentValue != data.ContentValue)) {
                return false;
            }
            if ((ContentDataType != data.ContentDataType)) {
                return false;
            }
            if ((IsDeclare != data.IsDeclare)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((Modifier != data.Modifier)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclareContentBpl.Insert(((DeclareContent)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclareContentBpl.Update(((DeclareContent)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long declareContentId, Object metadata) {
            APBplDef.DeclareContentBpl.UpdatePartial(declareContentId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long declareContentId) {
            APBplDef.DeclareContentBpl.PrimaryDelete(declareContentId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclareContentBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclareContentBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static DeclareContent PrimaryGet(long declareContentId) {
            return APBplDef.DeclareContentBpl.PrimaryGet(declareContentId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclareContentBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclareContentBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclareContentBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<DeclareContent> GetAll() {
            return APBplDef.DeclareContentBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报-内容
    /// </summary>
    [Serializable()]
    public partial class DeclareContent : DeclareContentBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareContent() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareContent(long declareContentId, long teacherId, string contentKey, string contentValue, string contentDataType, bool isDeclare, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) : 
                base(declareContentId, teacherId, contentKey, contentValue, contentDataType, isDeclare, createDate, creator, modifyDate, modifier) {
        }
    }
    
    /// <summary>
    /// 申报-活动 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclareActiveBase {
        
        /// <summary>
        /// DeclareActiveId
        /// </summary>
        private long _declareActiveId;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        private string _activeKey = string.Empty;
        
        /// <summary>
        /// Date
        /// </summary>
        private System.DateTime _date;
        
        /// <summary>
        /// Location
        /// </summary>
        private string _location = string.Empty;
        
        /// <summary>
        /// Level
        /// </summary>
        private string _level = string.Empty;
        
        /// <summary>
        /// ContentValue
        /// </summary>
        private string _contentValue = string.Empty;
        
        /// <summary>
        /// Dynamic1
        /// </summary>
        private string _dynamic1 = string.Empty;
        
        /// <summary>
        /// Dynamic2
        /// </summary>
        private string _dynamic2 = string.Empty;
        
        /// <summary>
        /// Dynamic3
        /// </summary>
        private string _dynamic3 = string.Empty;
        
        /// <summary>
        /// Dynamic4
        /// </summary>
        private string _dynamic4 = string.Empty;
        
        /// <summary>
        /// Dynamic5
        /// </summary>
        private string _dynamic5 = string.Empty;
        
        /// <summary>
        /// Dynamic6
        /// </summary>
        private string _dynamic6 = string.Empty;
        
        /// <summary>
        /// Dynamic7
        /// </summary>
        private string _dynamic7 = string.Empty;
        
        /// <summary>
        /// Dynamic8
        /// </summary>
        private string _dynamic8 = string.Empty;
        
        /// <summary>
        /// PickList - 
        /// </summary>
        private long _dynamic9;
        
        /// <summary>
        /// IsShare
        /// </summary>
        private bool _isShare;
        
        /// <summary>
        /// IsDeclare
        /// </summary>
        private bool _isDeclare;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.Nullable<System.DateTime> _modifyDate;
        
        /// <summary>
        /// Modifier
        /// </summary>
        private long _modifier;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareActiveBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareActiveBase(
                    long declareActiveId, 
                    long teacherId, 
                    string activeKey, 
                    System.DateTime date, 
                    string location, 
                    string level, 
                    string contentValue, 
                    string dynamic1, 
                    string dynamic2, 
                    string dynamic3, 
                    string dynamic4, 
                    string dynamic5, 
                    string dynamic6, 
                    string dynamic7, 
                    string dynamic8, 
                    long dynamic9, 
                    bool isShare, 
                    bool isDeclare, 
                    System.DateTime createDate, 
                    long creator, 
                    System.Nullable<System.DateTime> modifyDate, 
                    long modifier) {
            _declareActiveId = declareActiveId;
            _teacherId = teacherId;
            _activeKey = activeKey;
            _date = date;
            _location = location;
            _level = level;
            _contentValue = contentValue;
            _dynamic1 = dynamic1;
            _dynamic2 = dynamic2;
            _dynamic3 = dynamic3;
            _dynamic4 = dynamic4;
            _dynamic5 = dynamic5;
            _dynamic6 = dynamic6;
            _dynamic7 = dynamic7;
            _dynamic8 = dynamic8;
            _dynamic9 = dynamic9;
            _isShare = isShare;
            _isDeclare = isDeclare;
            _createDate = createDate;
            _creator = creator;
            _modifyDate = modifyDate;
            _modifier = modifier;
        }
        
        /// <summary>
        /// DeclareActiveId
        /// </summary>
        [Display(Name="ID")]
        public virtual long DeclareActiveId {
            get {
                return _declareActiveId;
            }
            set {
                _declareActiveId = value;
            }
        }
        
        /// <summary>
        /// DeclareActiveId APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareActiveIdDef {
            get {
                return APDBDef.DeclareActive.DeclareActiveId;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.DeclareActive.TeacherId;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        [Display(Name="内容类别")]
        [StringLength(200)]
        public virtual string ActiveKey {
            get {
                return _activeKey;
            }
            set {
                _activeKey = value;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割 APColumnDef
        /// </summary>
        public static StringAPColumnDef ActiveKeyDef {
            get {
                return APDBDef.DeclareActive.ActiveKey;
            }
        }
        
        /// <summary>
        /// Date
        /// </summary>
        [Display(Name="时间")]
        public virtual System.DateTime Date {
            get {
                return _date;
            }
            set {
                _date = value;
            }
        }
        
        /// <summary>
        /// Date APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef DateDef {
            get {
                return APDBDef.DeclareActive.Date;
            }
        }
        
        /// <summary>
        /// Location
        /// </summary>
        [Display(Name="地点")]
        [StringLength(100)]
        public virtual string Location {
            get {
                return _location;
            }
            set {
                _location = value;
            }
        }
        
        /// <summary>
        /// Location APColumnDef
        /// </summary>
        public static StringAPColumnDef LocationDef {
            get {
                return APDBDef.DeclareActive.Location;
            }
        }
        
        /// <summary>
        /// Level
        /// </summary>
        [Display(Name="等级")]
        [StringLength(100)]
        public virtual string Level {
            get {
                return _level;
            }
            set {
                _level = value;
            }
        }
        
        /// <summary>
        /// Level APColumnDef
        /// </summary>
        public static StringAPColumnDef LevelDef {
            get {
                return APDBDef.DeclareActive.Level;
            }
        }
        
        /// <summary>
        /// ContentValue
        /// </summary>
        [Display(Name="内容")]
        [StringLength(10000)]
        public virtual string ContentValue {
            get {
                return _contentValue;
            }
            set {
                _contentValue = value;
            }
        }
        
        /// <summary>
        /// ContentValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentValueDef {
            get {
                return APDBDef.DeclareActive.ContentValue;
            }
        }
        
        /// <summary>
        /// Dynamic1
        /// </summary>
        [Display(Name="动态内容1")]
        [StringLength(2000)]
        public virtual string Dynamic1 {
            get {
                return _dynamic1;
            }
            set {
                _dynamic1 = value;
            }
        }
        
        /// <summary>
        /// Dynamic1 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic1Def {
            get {
                return APDBDef.DeclareActive.Dynamic1;
            }
        }
        
        /// <summary>
        /// Dynamic2
        /// </summary>
        [Display(Name="动态内容2")]
        [StringLength(2000)]
        public virtual string Dynamic2 {
            get {
                return _dynamic2;
            }
            set {
                _dynamic2 = value;
            }
        }
        
        /// <summary>
        /// Dynamic2 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic2Def {
            get {
                return APDBDef.DeclareActive.Dynamic2;
            }
        }
        
        /// <summary>
        /// Dynamic3
        /// </summary>
        [Display(Name="动态内容3")]
        [StringLength(2000)]
        public virtual string Dynamic3 {
            get {
                return _dynamic3;
            }
            set {
                _dynamic3 = value;
            }
        }
        
        /// <summary>
        /// Dynamic3 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic3Def {
            get {
                return APDBDef.DeclareActive.Dynamic3;
            }
        }
        
        /// <summary>
        /// Dynamic4
        /// </summary>
        [Display(Name="动态内容4")]
        [StringLength(2000)]
        public virtual string Dynamic4 {
            get {
                return _dynamic4;
            }
            set {
                _dynamic4 = value;
            }
        }
        
        /// <summary>
        /// Dynamic4 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic4Def {
            get {
                return APDBDef.DeclareActive.Dynamic4;
            }
        }
        
        /// <summary>
        /// Dynamic5
        /// </summary>
        [Display(Name="动态内容5")]
        [StringLength(2000)]
        public virtual string Dynamic5 {
            get {
                return _dynamic5;
            }
            set {
                _dynamic5 = value;
            }
        }
        
        /// <summary>
        /// Dynamic5 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic5Def {
            get {
                return APDBDef.DeclareActive.Dynamic5;
            }
        }
        
        /// <summary>
        /// Dynamic6
        /// </summary>
        [Display(Name="动态内容6")]
        [StringLength(2000)]
        public virtual string Dynamic6 {
            get {
                return _dynamic6;
            }
            set {
                _dynamic6 = value;
            }
        }
        
        /// <summary>
        /// Dynamic6 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic6Def {
            get {
                return APDBDef.DeclareActive.Dynamic6;
            }
        }
        
        /// <summary>
        /// Dynamic7
        /// </summary>
        [Display(Name="动态内容7")]
        [StringLength(2000)]
        public virtual string Dynamic7 {
            get {
                return _dynamic7;
            }
            set {
                _dynamic7 = value;
            }
        }
        
        /// <summary>
        /// Dynamic7 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic7Def {
            get {
                return APDBDef.DeclareActive.Dynamic7;
            }
        }
        
        /// <summary>
        /// Dynamic8
        /// </summary>
        [Display(Name="动态内容8")]
        [StringLength(2000)]
        public virtual string Dynamic8 {
            get {
                return _dynamic8;
            }
            set {
                _dynamic8 = value;
            }
        }
        
        /// <summary>
        /// Dynamic8 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic8Def {
            get {
                return APDBDef.DeclareActive.Dynamic8;
            }
        }
        
        /// <summary>
        /// PickList - 
        /// </summary>
        [Display(Name="动态内容9")]
        public virtual long Dynamic9 {
            get {
                return _dynamic9;
            }
            set {
                _dynamic9 = value;
            }
        }
        
        /// <summary>
        /// PickList -  APColumnDef
        /// </summary>
        public static Int64APColumnDef Dynamic9Def {
            get {
                return APDBDef.DeclareActive.Dynamic9;
            }
        }
        
        /// <summary>
        /// IsShare
        /// </summary>
        [Display(Name="是否共享")]
        public virtual bool IsShare {
            get {
                return _isShare;
            }
            set {
                _isShare = value;
            }
        }
        
        /// <summary>
        /// IsShare APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsShareDef {
            get {
                return APDBDef.DeclareActive.IsShare;
            }
        }
        
        /// <summary>
        /// IsDeclare
        /// </summary>
        [Display(Name="是否申报")]
        public virtual bool IsDeclare {
            get {
                return _isDeclare;
            }
            set {
                _isDeclare = value;
            }
        }
        
        /// <summary>
        /// IsDeclare APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsDeclareDef {
            get {
                return APDBDef.DeclareActive.IsDeclare;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.DeclareActive.CreateDate;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        [Display(Name="创建人")]
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.DeclareActive.Creator;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="修改时间")]
        public virtual System.Nullable<System.DateTime> ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.DeclareActive.ModifyDate;
            }
        }
        
        /// <summary>
        /// Modifier
        /// </summary>
        [Display(Name="修改人")]
        public virtual long Modifier {
            get {
                return _modifier;
            }
            set {
                _modifier = value;
            }
        }
        
        /// <summary>
        /// Modifier APColumnDef
        /// </summary>
        public static Int64APColumnDef ModifierDef {
            get {
                return APDBDef.DeclareActive.Modifier;
            }
        }
        
        /// <summary>
        /// DeclareActiveTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclareActiveTableDef TableDef {
            get {
                return APDBDef.DeclareActive;
            }
        }
        
        /// <summary>
        /// DeclareActiveTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.DeclareActive.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(DeclareActive data) {
            DeclareActiveId = data.DeclareActiveId;
            TeacherId = data.TeacherId;
            ActiveKey = data.ActiveKey;
            Date = data.Date;
            Location = data.Location;
            Level = data.Level;
            ContentValue = data.ContentValue;
            Dynamic1 = data.Dynamic1;
            Dynamic2 = data.Dynamic2;
            Dynamic3 = data.Dynamic3;
            Dynamic4 = data.Dynamic4;
            Dynamic5 = data.Dynamic5;
            Dynamic6 = data.Dynamic6;
            Dynamic7 = data.Dynamic7;
            Dynamic8 = data.Dynamic8;
            Dynamic9 = data.Dynamic9;
            IsShare = data.IsShare;
            IsDeclare = data.IsDeclare;
            CreateDate = data.CreateDate;
            Creator = data.Creator;
            ModifyDate = data.ModifyDate;
            Modifier = data.Modifier;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(DeclareActive data) {
            if ((DeclareActiveId != data.DeclareActiveId)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((ActiveKey != data.ActiveKey)) {
                return false;
            }
            if ((Date != data.Date)) {
                return false;
            }
            if ((Location != data.Location)) {
                return false;
            }
            if ((Level != data.Level)) {
                return false;
            }
            if ((ContentValue != data.ContentValue)) {
                return false;
            }
            if ((Dynamic1 != data.Dynamic1)) {
                return false;
            }
            if ((Dynamic2 != data.Dynamic2)) {
                return false;
            }
            if ((Dynamic3 != data.Dynamic3)) {
                return false;
            }
            if ((Dynamic4 != data.Dynamic4)) {
                return false;
            }
            if ((Dynamic5 != data.Dynamic5)) {
                return false;
            }
            if ((Dynamic6 != data.Dynamic6)) {
                return false;
            }
            if ((Dynamic7 != data.Dynamic7)) {
                return false;
            }
            if ((Dynamic8 != data.Dynamic8)) {
                return false;
            }
            if ((Dynamic9 != data.Dynamic9)) {
                return false;
            }
            if ((IsShare != data.IsShare)) {
                return false;
            }
            if ((IsDeclare != data.IsDeclare)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((Modifier != data.Modifier)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclareActiveBpl.Insert(((DeclareActive)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclareActiveBpl.Update(((DeclareActive)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long declareActiveId, Object metadata) {
            APBplDef.DeclareActiveBpl.UpdatePartial(declareActiveId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long declareActiveId) {
            APBplDef.DeclareActiveBpl.PrimaryDelete(declareActiveId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclareActiveBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclareActiveBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static DeclareActive PrimaryGet(long declareActiveId) {
            return APBplDef.DeclareActiveBpl.PrimaryGet(declareActiveId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclareActiveBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclareActiveBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclareActiveBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<DeclareActive> GetAll() {
            return APBplDef.DeclareActiveBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报-活动
    /// </summary>
    [Serializable()]
    public partial class DeclareActive : DeclareActiveBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareActive() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareActive(
                    long declareActiveId, 
                    long teacherId, 
                    string activeKey, 
                    System.DateTime date, 
                    string location, 
                    string level, 
                    string contentValue, 
                    string dynamic1, 
                    string dynamic2, 
                    string dynamic3, 
                    string dynamic4, 
                    string dynamic5, 
                    string dynamic6, 
                    string dynamic7, 
                    string dynamic8, 
                    long dynamic9, 
                    bool isShare, 
                    bool isDeclare, 
                    System.DateTime createDate, 
                    long creator, 
                    System.Nullable<System.DateTime> modifyDate, 
                    long modifier) : 
                base(declareActiveId, teacherId, activeKey, date, location, level, contentValue, dynamic1, dynamic2, dynamic3, dynamic4, dynamic5, dynamic6, dynamic7, dynamic8, dynamic9, isShare, isDeclare, createDate, creator, modifyDate, modifier) {
        }
    }
    
    /// <summary>
    /// 申报-科研成果 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclareAchievementBase {
        
        /// <summary>
        /// DeclareAchievementId
        /// </summary>
        private long _declareAchievementId;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        private string _achievementKey = string.Empty;
        
        /// <summary>
        /// Date
        /// </summary>
        private string _date = string.Empty;
        
        /// <summary>
        /// DateRegion
        /// </summary>
        private string _dateRegion = string.Empty;
        
        /// <summary>
        /// Location
        /// </summary>
        private string _location = string.Empty;
        
        /// <summary>
        /// Level
        /// </summary>
        private string _level = string.Empty;
        
        /// <summary>
        /// NameOrTitle
        /// </summary>
        private string _nameOrTitle = string.Empty;
        
        /// <summary>
        /// Dynamic1
        /// </summary>
        private string _dynamic1 = string.Empty;
        
        /// <summary>
        /// Dynamic2
        /// </summary>
        private string _dynamic2 = string.Empty;
        
        /// <summary>
        /// Dynamic3
        /// </summary>
        private string _dynamic3 = string.Empty;
        
        /// <summary>
        /// Dynamic4
        /// </summary>
        private string _dynamic4 = string.Empty;
        
        /// <summary>
        /// Dynamic5
        /// </summary>
        private string _dynamic5 = string.Empty;
        
        /// <summary>
        /// PickList - 
        /// </summary>
        private long _dynamic6;
        
        /// <summary>
        /// IsShare
        /// </summary>
        private bool _isShare;
        
        /// <summary>
        /// IsDeclare
        /// </summary>
        private bool _isDeclare;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.Nullable<System.DateTime> _modifyDate;
        
        /// <summary>
        /// Modifier
        /// </summary>
        private long _modifier;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareAchievementBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareAchievementBase(
                    long declareAchievementId, 
                    long teacherId, 
                    string achievementKey, 
                    string date, 
                    string dateRegion, 
                    string location, 
                    string level, 
                    string nameOrTitle, 
                    string dynamic1, 
                    string dynamic2, 
                    string dynamic3, 
                    string dynamic4, 
                    string dynamic5, 
                    long dynamic6, 
                    bool isShare, 
                    bool isDeclare, 
                    System.DateTime createDate, 
                    long creator, 
                    System.Nullable<System.DateTime> modifyDate, 
                    long modifier) {
            _declareAchievementId = declareAchievementId;
            _teacherId = teacherId;
            _achievementKey = achievementKey;
            _date = date;
            _dateRegion = dateRegion;
            _location = location;
            _level = level;
            _nameOrTitle = nameOrTitle;
            _dynamic1 = dynamic1;
            _dynamic2 = dynamic2;
            _dynamic3 = dynamic3;
            _dynamic4 = dynamic4;
            _dynamic5 = dynamic5;
            _dynamic6 = dynamic6;
            _isShare = isShare;
            _isDeclare = isDeclare;
            _createDate = createDate;
            _creator = creator;
            _modifyDate = modifyDate;
            _modifier = modifier;
        }
        
        /// <summary>
        /// DeclareAchievementId
        /// </summary>
        [Display(Name="成果ID")]
        public virtual long DeclareAchievementId {
            get {
                return _declareAchievementId;
            }
            set {
                _declareAchievementId = value;
            }
        }
        
        /// <summary>
        /// DeclareAchievementId APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareAchievementIdDef {
            get {
                return APDBDef.DeclareAchievement.DeclareAchievementId;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.DeclareAchievement.TeacherId;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        [Display(Name="内容类别")]
        [StringLength(200)]
        public virtual string AchievementKey {
            get {
                return _achievementKey;
            }
            set {
                _achievementKey = value;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割 APColumnDef
        /// </summary>
        public static StringAPColumnDef AchievementKeyDef {
            get {
                return APDBDef.DeclareAchievement.AchievementKey;
            }
        }
        
        /// <summary>
        /// Date
        /// </summary>
        [Display(Name="时间")]
        [StringLength(100)]
        public virtual string Date {
            get {
                return _date;
            }
            set {
                _date = value;
            }
        }
        
        /// <summary>
        /// Date APColumnDef
        /// </summary>
        public static StringAPColumnDef DateDef {
            get {
                return APDBDef.DeclareAchievement.Date;
            }
        }
        
        /// <summary>
        /// DateRegion
        /// </summary>
        [Display(Name="时间区间")]
        [StringLength(100)]
        public virtual string DateRegion {
            get {
                return _dateRegion;
            }
            set {
                _dateRegion = value;
            }
        }
        
        /// <summary>
        /// DateRegion APColumnDef
        /// </summary>
        public static StringAPColumnDef DateRegionDef {
            get {
                return APDBDef.DeclareAchievement.DateRegion;
            }
        }
        
        /// <summary>
        /// Location
        /// </summary>
        [Display(Name="地点")]
        [StringLength(100)]
        public virtual string Location {
            get {
                return _location;
            }
            set {
                _location = value;
            }
        }
        
        /// <summary>
        /// Location APColumnDef
        /// </summary>
        public static StringAPColumnDef LocationDef {
            get {
                return APDBDef.DeclareAchievement.Location;
            }
        }
        
        /// <summary>
        /// Level
        /// </summary>
        [Display(Name="等级")]
        [StringLength(100)]
        public virtual string Level {
            get {
                return _level;
            }
            set {
                _level = value;
            }
        }
        
        /// <summary>
        /// Level APColumnDef
        /// </summary>
        public static StringAPColumnDef LevelDef {
            get {
                return APDBDef.DeclareAchievement.Level;
            }
        }
        
        /// <summary>
        /// NameOrTitle
        /// </summary>
        [Display(Name="名称或标题")]
        [StringLength(100)]
        public virtual string NameOrTitle {
            get {
                return _nameOrTitle;
            }
            set {
                _nameOrTitle = value;
            }
        }
        
        /// <summary>
        /// NameOrTitle APColumnDef
        /// </summary>
        public static StringAPColumnDef NameOrTitleDef {
            get {
                return APDBDef.DeclareAchievement.NameOrTitle;
            }
        }
        
        /// <summary>
        /// Dynamic1
        /// </summary>
        [Display(Name="动态内容1")]
        [StringLength(2000)]
        public virtual string Dynamic1 {
            get {
                return _dynamic1;
            }
            set {
                _dynamic1 = value;
            }
        }
        
        /// <summary>
        /// Dynamic1 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic1Def {
            get {
                return APDBDef.DeclareAchievement.Dynamic1;
            }
        }
        
        /// <summary>
        /// Dynamic2
        /// </summary>
        [Display(Name="动态内容2")]
        [StringLength(2000)]
        public virtual string Dynamic2 {
            get {
                return _dynamic2;
            }
            set {
                _dynamic2 = value;
            }
        }
        
        /// <summary>
        /// Dynamic2 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic2Def {
            get {
                return APDBDef.DeclareAchievement.Dynamic2;
            }
        }
        
        /// <summary>
        /// Dynamic3
        /// </summary>
        [Display(Name="动态内容3")]
        [StringLength(2000)]
        public virtual string Dynamic3 {
            get {
                return _dynamic3;
            }
            set {
                _dynamic3 = value;
            }
        }
        
        /// <summary>
        /// Dynamic3 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic3Def {
            get {
                return APDBDef.DeclareAchievement.Dynamic3;
            }
        }
        
        /// <summary>
        /// Dynamic4
        /// </summary>
        [Display(Name="动态内容4")]
        [StringLength(2000)]
        public virtual string Dynamic4 {
            get {
                return _dynamic4;
            }
            set {
                _dynamic4 = value;
            }
        }
        
        /// <summary>
        /// Dynamic4 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic4Def {
            get {
                return APDBDef.DeclareAchievement.Dynamic4;
            }
        }
        
        /// <summary>
        /// Dynamic5
        /// </summary>
        [Display(Name="动态内容5")]
        [StringLength(2000)]
        public virtual string Dynamic5 {
            get {
                return _dynamic5;
            }
            set {
                _dynamic5 = value;
            }
        }
        
        /// <summary>
        /// Dynamic5 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic5Def {
            get {
                return APDBDef.DeclareAchievement.Dynamic5;
            }
        }
        
        /// <summary>
        /// PickList - 
        /// </summary>
        [Display(Name="动态内容9")]
        public virtual long Dynamic6 {
            get {
                return _dynamic6;
            }
            set {
                _dynamic6 = value;
            }
        }
        
        /// <summary>
        /// PickList -  APColumnDef
        /// </summary>
        public static Int64APColumnDef Dynamic6Def {
            get {
                return APDBDef.DeclareAchievement.Dynamic6;
            }
        }
        
        /// <summary>
        /// IsShare
        /// </summary>
        [Display(Name="是否共享")]
        public virtual bool IsShare {
            get {
                return _isShare;
            }
            set {
                _isShare = value;
            }
        }
        
        /// <summary>
        /// IsShare APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsShareDef {
            get {
                return APDBDef.DeclareAchievement.IsShare;
            }
        }
        
        /// <summary>
        /// IsDeclare
        /// </summary>
        [Display(Name="是否申报")]
        public virtual bool IsDeclare {
            get {
                return _isDeclare;
            }
            set {
                _isDeclare = value;
            }
        }
        
        /// <summary>
        /// IsDeclare APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsDeclareDef {
            get {
                return APDBDef.DeclareAchievement.IsDeclare;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.DeclareAchievement.CreateDate;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        [Display(Name="创建人")]
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.DeclareAchievement.Creator;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="修改时间")]
        public virtual System.Nullable<System.DateTime> ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.DeclareAchievement.ModifyDate;
            }
        }
        
        /// <summary>
        /// Modifier
        /// </summary>
        [Display(Name="修改人")]
        public virtual long Modifier {
            get {
                return _modifier;
            }
            set {
                _modifier = value;
            }
        }
        
        /// <summary>
        /// Modifier APColumnDef
        /// </summary>
        public static Int64APColumnDef ModifierDef {
            get {
                return APDBDef.DeclareAchievement.Modifier;
            }
        }
        
        /// <summary>
        /// DeclareAchievementTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclareAchievementTableDef TableDef {
            get {
                return APDBDef.DeclareAchievement;
            }
        }
        
        /// <summary>
        /// DeclareAchievementTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.DeclareAchievement.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(DeclareAchievement data) {
            DeclareAchievementId = data.DeclareAchievementId;
            TeacherId = data.TeacherId;
            AchievementKey = data.AchievementKey;
            Date = data.Date;
            DateRegion = data.DateRegion;
            Location = data.Location;
            Level = data.Level;
            NameOrTitle = data.NameOrTitle;
            Dynamic1 = data.Dynamic1;
            Dynamic2 = data.Dynamic2;
            Dynamic3 = data.Dynamic3;
            Dynamic4 = data.Dynamic4;
            Dynamic5 = data.Dynamic5;
            Dynamic6 = data.Dynamic6;
            IsShare = data.IsShare;
            IsDeclare = data.IsDeclare;
            CreateDate = data.CreateDate;
            Creator = data.Creator;
            ModifyDate = data.ModifyDate;
            Modifier = data.Modifier;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(DeclareAchievement data) {
            if ((DeclareAchievementId != data.DeclareAchievementId)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((AchievementKey != data.AchievementKey)) {
                return false;
            }
            if ((Date != data.Date)) {
                return false;
            }
            if ((DateRegion != data.DateRegion)) {
                return false;
            }
            if ((Location != data.Location)) {
                return false;
            }
            if ((Level != data.Level)) {
                return false;
            }
            if ((NameOrTitle != data.NameOrTitle)) {
                return false;
            }
            if ((Dynamic1 != data.Dynamic1)) {
                return false;
            }
            if ((Dynamic2 != data.Dynamic2)) {
                return false;
            }
            if ((Dynamic3 != data.Dynamic3)) {
                return false;
            }
            if ((Dynamic4 != data.Dynamic4)) {
                return false;
            }
            if ((Dynamic5 != data.Dynamic5)) {
                return false;
            }
            if ((Dynamic6 != data.Dynamic6)) {
                return false;
            }
            if ((IsShare != data.IsShare)) {
                return false;
            }
            if ((IsDeclare != data.IsDeclare)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((Modifier != data.Modifier)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclareAchievementBpl.Insert(((DeclareAchievement)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclareAchievementBpl.Update(((DeclareAchievement)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long declareAchievementId, Object metadata) {
            APBplDef.DeclareAchievementBpl.UpdatePartial(declareAchievementId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long declareAchievementId) {
            APBplDef.DeclareAchievementBpl.PrimaryDelete(declareAchievementId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclareAchievementBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclareAchievementBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static DeclareAchievement PrimaryGet(long declareAchievementId) {
            return APBplDef.DeclareAchievementBpl.PrimaryGet(declareAchievementId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareAchievement> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclareAchievementBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareAchievement> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclareAchievementBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareAchievement> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclareAchievementBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<DeclareAchievement> GetAll() {
            return APBplDef.DeclareAchievementBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报-科研成果
    /// </summary>
    [Serializable()]
    public partial class DeclareAchievement : DeclareAchievementBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareAchievement() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareAchievement(
                    long declareAchievementId, 
                    long teacherId, 
                    string achievementKey, 
                    string date, 
                    string dateRegion, 
                    string location, 
                    string level, 
                    string nameOrTitle, 
                    string dynamic1, 
                    string dynamic2, 
                    string dynamic3, 
                    string dynamic4, 
                    string dynamic5, 
                    long dynamic6, 
                    bool isShare, 
                    bool isDeclare, 
                    System.DateTime createDate, 
                    long creator, 
                    System.Nullable<System.DateTime> modifyDate, 
                    long modifier) : 
                base(declareAchievementId, teacherId, achievementKey, date, dateRegion, location, level, nameOrTitle, dynamic1, dynamic2, dynamic3, dynamic4, dynamic5, dynamic6, isShare, isDeclare, createDate, creator, modifyDate, modifier) {
        }
    }
    
    /// <summary>
    /// 申报-制度建设 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclareOrgConstBase {
        
        /// <summary>
        /// DeclareOrgConstId
        /// </summary>
        private long _declareOrgConstId;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// Content
        /// </summary>
        private string _content = string.Empty;
        
        /// <summary>
        /// Work
        /// </summary>
        private string _work = string.Empty;
        
        /// <summary>
        /// Remark
        /// </summary>
        private string _remark = string.Empty;
        
        /// <summary>
        /// IsShare
        /// </summary>
        private bool _isShare;
        
        /// <summary>
        /// IsDeclare
        /// </summary>
        private bool _isDeclare;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.Nullable<System.DateTime> _modifyDate;
        
        /// <summary>
        /// Modifier
        /// </summary>
        private long _modifier;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareOrgConstBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareOrgConstBase(long declareOrgConstId, long teacherId, string content, string work, string remark, bool isShare, bool isDeclare, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) {
            _declareOrgConstId = declareOrgConstId;
            _teacherId = teacherId;
            _content = content;
            _work = work;
            _remark = remark;
            _isShare = isShare;
            _isDeclare = isDeclare;
            _createDate = createDate;
            _creator = creator;
            _modifyDate = modifyDate;
            _modifier = modifier;
        }
        
        /// <summary>
        /// DeclareOrgConstId
        /// </summary>
        [Display(Name="建设ID")]
        public virtual long DeclareOrgConstId {
            get {
                return _declareOrgConstId;
            }
            set {
                _declareOrgConstId = value;
            }
        }
        
        /// <summary>
        /// DeclareOrgConstId APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareOrgConstIdDef {
            get {
                return APDBDef.DeclareOrgConst.DeclareOrgConstId;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.DeclareOrgConst.TeacherId;
            }
        }
        
        /// <summary>
        /// Content
        /// </summary>
        [Display(Name="内容")]
        [StringLength(2000)]
        public virtual string Content {
            get {
                return _content;
            }
            set {
                _content = value;
            }
        }
        
        /// <summary>
        /// Content APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentDef {
            get {
                return APDBDef.DeclareOrgConst.Content;
            }
        }
        
        /// <summary>
        /// Work
        /// </summary>
        [Display(Name="开展情况")]
        [StringLength(2000)]
        public virtual string Work {
            get {
                return _work;
            }
            set {
                _work = value;
            }
        }
        
        /// <summary>
        /// Work APColumnDef
        /// </summary>
        public static StringAPColumnDef WorkDef {
            get {
                return APDBDef.DeclareOrgConst.Work;
            }
        }
        
        /// <summary>
        /// Remark
        /// </summary>
        [Display(Name="备注")]
        [StringLength(2000)]
        public virtual string Remark {
            get {
                return _remark;
            }
            set {
                _remark = value;
            }
        }
        
        /// <summary>
        /// Remark APColumnDef
        /// </summary>
        public static StringAPColumnDef RemarkDef {
            get {
                return APDBDef.DeclareOrgConst.Remark;
            }
        }
        
        /// <summary>
        /// IsShare
        /// </summary>
        [Display(Name="是否共享")]
        public virtual bool IsShare {
            get {
                return _isShare;
            }
            set {
                _isShare = value;
            }
        }
        
        /// <summary>
        /// IsShare APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsShareDef {
            get {
                return APDBDef.DeclareOrgConst.IsShare;
            }
        }
        
        /// <summary>
        /// IsDeclare
        /// </summary>
        [Display(Name="是否申报")]
        public virtual bool IsDeclare {
            get {
                return _isDeclare;
            }
            set {
                _isDeclare = value;
            }
        }
        
        /// <summary>
        /// IsDeclare APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsDeclareDef {
            get {
                return APDBDef.DeclareOrgConst.IsDeclare;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.DeclareOrgConst.CreateDate;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        [Display(Name="创建人")]
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.DeclareOrgConst.Creator;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="修改时间")]
        public virtual System.Nullable<System.DateTime> ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.DeclareOrgConst.ModifyDate;
            }
        }
        
        /// <summary>
        /// Modifier
        /// </summary>
        [Display(Name="修改人")]
        public virtual long Modifier {
            get {
                return _modifier;
            }
            set {
                _modifier = value;
            }
        }
        
        /// <summary>
        /// Modifier APColumnDef
        /// </summary>
        public static Int64APColumnDef ModifierDef {
            get {
                return APDBDef.DeclareOrgConst.Modifier;
            }
        }
        
        /// <summary>
        /// DeclareOrgConstTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclareOrgConstTableDef TableDef {
            get {
                return APDBDef.DeclareOrgConst;
            }
        }
        
        /// <summary>
        /// DeclareOrgConstTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.DeclareOrgConst.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(DeclareOrgConst data) {
            DeclareOrgConstId = data.DeclareOrgConstId;
            TeacherId = data.TeacherId;
            Content = data.Content;
            Work = data.Work;
            Remark = data.Remark;
            IsShare = data.IsShare;
            IsDeclare = data.IsDeclare;
            CreateDate = data.CreateDate;
            Creator = data.Creator;
            ModifyDate = data.ModifyDate;
            Modifier = data.Modifier;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(DeclareOrgConst data) {
            if ((DeclareOrgConstId != data.DeclareOrgConstId)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((Content != data.Content)) {
                return false;
            }
            if ((Work != data.Work)) {
                return false;
            }
            if ((Remark != data.Remark)) {
                return false;
            }
            if ((IsShare != data.IsShare)) {
                return false;
            }
            if ((IsDeclare != data.IsDeclare)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((Modifier != data.Modifier)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclareOrgConstBpl.Insert(((DeclareOrgConst)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclareOrgConstBpl.Update(((DeclareOrgConst)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long declareOrgConstId, Object metadata) {
            APBplDef.DeclareOrgConstBpl.UpdatePartial(declareOrgConstId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long declareOrgConstId) {
            APBplDef.DeclareOrgConstBpl.PrimaryDelete(declareOrgConstId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclareOrgConstBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclareOrgConstBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static DeclareOrgConst PrimaryGet(long declareOrgConstId) {
            return APBplDef.DeclareOrgConstBpl.PrimaryGet(declareOrgConstId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareOrgConst> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclareOrgConstBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareOrgConst> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclareOrgConstBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareOrgConst> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclareOrgConstBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<DeclareOrgConst> GetAll() {
            return APBplDef.DeclareOrgConstBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报-制度建设
    /// </summary>
    [Serializable()]
    public partial class DeclareOrgConst : DeclareOrgConstBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareOrgConst() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareOrgConst(long declareOrgConstId, long teacherId, string content, string work, string remark, bool isShare, bool isDeclare, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) : 
                base(declareOrgConstId, teacherId, content, work, remark, isShare, isDeclare, createDate, creator, modifyDate, modifier) {
        }
    }
    
    /// <summary>
    /// 申报审核 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclareReviewBase {
        
        /// <summary>
        /// DeclareReviewId
        /// </summary>
        private long _declareReviewId;
        
        /// <summary>
        /// 冗余
        /// </summary>
        private string _teacherName = string.Empty;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// CompanyId
        /// </summary>
        private long _companyId;
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        private long _declareTargetPKID;
        
        /// <summary>
        /// PickList - PLKey_DeclareSubject
        /// </summary>
        private long _declareSubjectPKID;
        
        /// <summary>
        /// AllowFlowToSchool
        /// </summary>
        private bool _allowFlowToSchool;
        
        /// <summary>
        /// AllowFitResearcher
        /// </summary>
        private bool _allowFitResearcher;
        
        /// <summary>
        /// IsBrokenRoles
        /// </summary>
        private bool _isBrokenRoles;
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private long _periodId;
        
        /// <summary>
        /// Reason
        /// </summary>
        private string _reason = string.Empty;
        
        /// <summary>
        /// AllowFlowToDowngrade
        /// </summary>
        private bool _allowFlowToDowngrade;
        
        /// <summary>
        /// TypeKey
        /// </summary>
        private string _typeKey = string.Empty;
        
        /// <summary>
        /// StatusKey
        /// </summary>
        private string _statusKey = string.Empty;
        
        /// <summary>
        /// ReviewComment
        /// </summary>
        private string _reviewComment = string.Empty;
        
        /// <summary>
        /// ReviewerId
        /// </summary>
        private long _reviewerId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareReviewBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareReviewBase(
                    long declareReviewId, 
                    string teacherName, 
                    long teacherId, 
                    long companyId, 
                    long declareTargetPKID, 
                    long declareSubjectPKID, 
                    bool allowFlowToSchool, 
                    bool allowFitResearcher, 
                    bool isBrokenRoles, 
                    long periodId, 
                    string reason, 
                    bool allowFlowToDowngrade, 
                    string typeKey, 
                    string statusKey, 
                    string reviewComment, 
                    long reviewerId) {
            _declareReviewId = declareReviewId;
            _teacherName = teacherName;
            _teacherId = teacherId;
            _companyId = companyId;
            _declareTargetPKID = declareTargetPKID;
            _declareSubjectPKID = declareSubjectPKID;
            _allowFlowToSchool = allowFlowToSchool;
            _allowFitResearcher = allowFitResearcher;
            _isBrokenRoles = isBrokenRoles;
            _periodId = periodId;
            _reason = reason;
            _allowFlowToDowngrade = allowFlowToDowngrade;
            _typeKey = typeKey;
            _statusKey = statusKey;
            _reviewComment = reviewComment;
            _reviewerId = reviewerId;
        }
        
        /// <summary>
        /// DeclareReviewId
        /// </summary>
        public virtual long DeclareReviewId {
            get {
                return _declareReviewId;
            }
            set {
                _declareReviewId = value;
            }
        }
        
        /// <summary>
        /// DeclareReviewId APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareReviewIdDef {
            get {
                return APDBDef.DeclareReview.DeclareReviewId;
            }
        }
        
        /// <summary>
        /// 冗余
        /// </summary>
        [Display(Name="姓名")]
        [Required()]
        [StringLength(100)]
        public virtual string TeacherName {
            get {
                return _teacherName;
            }
            set {
                _teacherName = value;
            }
        }
        
        /// <summary>
        /// 冗余 APColumnDef
        /// </summary>
        public static StringAPColumnDef TeacherNameDef {
            get {
                return APDBDef.DeclareReview.TeacherName;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.DeclareReview.TeacherId;
            }
        }
        
        /// <summary>
        /// CompanyId
        /// </summary>
        [Display(Name="申报单位")]
        public virtual long CompanyId {
            get {
                return _companyId;
            }
            set {
                _companyId = value;
            }
        }
        
        /// <summary>
        /// CompanyId APColumnDef
        /// </summary>
        public static Int64APColumnDef CompanyIdDef {
            get {
                return APDBDef.DeclareReview.CompanyId;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        [Display(Name="申报称号")]
        public virtual long DeclareTargetPKID {
            get {
                return _declareTargetPKID;
            }
            set {
                _declareTargetPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareTargetPKIDDef {
            get {
                return APDBDef.DeclareReview.DeclareTargetPKID;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareSubject
        /// </summary>
        [Display(Name="申报学科")]
        public virtual long DeclareSubjectPKID {
            get {
                return _declareSubjectPKID;
            }
            set {
                _declareSubjectPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareSubject APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareSubjectPKIDDef {
            get {
                return APDBDef.DeclareReview.DeclareSubjectPKID;
            }
        }
        
        /// <summary>
        /// AllowFlowToSchool
        /// </summary>
        [Display(Name="是否愿意参与区内流动")]
        public virtual bool AllowFlowToSchool {
            get {
                return _allowFlowToSchool;
            }
            set {
                _allowFlowToSchool = value;
            }
        }
        
        /// <summary>
        /// AllowFlowToSchool APColumnDef
        /// </summary>
        public static BooleanAPColumnDef AllowFlowToSchoolDef {
            get {
                return APDBDef.DeclareReview.AllowFlowToSchool;
            }
        }
        
        /// <summary>
        /// AllowFitResearcher
        /// </summary>
        [Display(Name="配合教研员开展工作")]
        public virtual bool AllowFitResearcher {
            get {
                return _allowFitResearcher;
            }
            set {
                _allowFitResearcher = value;
            }
        }
        
        /// <summary>
        /// AllowFitResearcher APColumnDef
        /// </summary>
        public static BooleanAPColumnDef AllowFitResearcherDef {
            get {
                return APDBDef.DeclareReview.AllowFitResearcher;
            }
        }
        
        /// <summary>
        /// IsBrokenRoles
        /// </summary>
        [Display(Name="是否职称破格")]
        public virtual bool IsBrokenRoles {
            get {
                return _isBrokenRoles;
            }
            set {
                _isBrokenRoles = value;
            }
        }
        
        /// <summary>
        /// IsBrokenRoles APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsBrokenRolesDef {
            get {
                return APDBDef.DeclareReview.IsBrokenRoles;
            }
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="申报周期ID")]
        public virtual long PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static Int64APColumnDef PeriodIdDef {
            get {
                return APDBDef.DeclareReview.PeriodId;
            }
        }
        
        /// <summary>
        /// Reason
        /// </summary>
        [Display(Name="申报理由")]
        [StringLength(2000)]
        public virtual string Reason {
            get {
                return _reason;
            }
            set {
                _reason = value;
            }
        }
        
        /// <summary>
        /// Reason APColumnDef
        /// </summary>
        public static StringAPColumnDef ReasonDef {
            get {
                return APDBDef.DeclareReview.Reason;
            }
        }
        
        /// <summary>
        /// AllowFlowToDowngrade
        /// </summary>
        [Display(Name="若落选，是否愿意参加低一层级称号的评选")]
        public virtual bool AllowFlowToDowngrade {
            get {
                return _allowFlowToDowngrade;
            }
            set {
                _allowFlowToDowngrade = value;
            }
        }
        
        /// <summary>
        /// AllowFlowToDowngrade APColumnDef
        /// </summary>
        public static BooleanAPColumnDef AllowFlowToDowngradeDef {
            get {
                return APDBDef.DeclareReview.AllowFlowToDowngrade;
            }
        }
        
        /// <summary>
        /// TypeKey
        /// </summary>
        [Display(Name="表单类型")]
        [StringLength(100)]
        public virtual string TypeKey {
            get {
                return _typeKey;
            }
            set {
                _typeKey = value;
            }
        }
        
        /// <summary>
        /// TypeKey APColumnDef
        /// </summary>
        public static StringAPColumnDef TypeKeyDef {
            get {
                return APDBDef.DeclareReview.TypeKey;
            }
        }
        
        /// <summary>
        /// StatusKey
        /// </summary>
        [Display(Name="审核状态")]
        [StringLength(100)]
        public virtual string StatusKey {
            get {
                return _statusKey;
            }
            set {
                _statusKey = value;
            }
        }
        
        /// <summary>
        /// StatusKey APColumnDef
        /// </summary>
        public static StringAPColumnDef StatusKeyDef {
            get {
                return APDBDef.DeclareReview.StatusKey;
            }
        }
        
        /// <summary>
        /// ReviewComment
        /// </summary>
        [Display(Name="校管理员审批意见")]
        [StringLength(2000)]
        public virtual string ReviewComment {
            get {
                return _reviewComment;
            }
            set {
                _reviewComment = value;
            }
        }
        
        /// <summary>
        /// ReviewComment APColumnDef
        /// </summary>
        public static StringAPColumnDef ReviewCommentDef {
            get {
                return APDBDef.DeclareReview.ReviewComment;
            }
        }
        
        /// <summary>
        /// ReviewerId
        /// </summary>
        [Display(Name="审核人")]
        public virtual long ReviewerId {
            get {
                return _reviewerId;
            }
            set {
                _reviewerId = value;
            }
        }
        
        /// <summary>
        /// ReviewerId APColumnDef
        /// </summary>
        public static Int64APColumnDef ReviewerIdDef {
            get {
                return APDBDef.DeclareReview.ReviewerId;
            }
        }
        
        /// <summary>
        /// DeclareReviewTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclareReviewTableDef TableDef {
            get {
                return APDBDef.DeclareReview;
            }
        }
        
        /// <summary>
        /// DeclareReviewTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.DeclareReview.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(DeclareReview data) {
            DeclareReviewId = data.DeclareReviewId;
            TeacherName = data.TeacherName;
            TeacherId = data.TeacherId;
            CompanyId = data.CompanyId;
            DeclareTargetPKID = data.DeclareTargetPKID;
            DeclareSubjectPKID = data.DeclareSubjectPKID;
            AllowFlowToSchool = data.AllowFlowToSchool;
            AllowFitResearcher = data.AllowFitResearcher;
            IsBrokenRoles = data.IsBrokenRoles;
            PeriodId = data.PeriodId;
            Reason = data.Reason;
            AllowFlowToDowngrade = data.AllowFlowToDowngrade;
            TypeKey = data.TypeKey;
            StatusKey = data.StatusKey;
            ReviewComment = data.ReviewComment;
            ReviewerId = data.ReviewerId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(DeclareReview data) {
            if ((DeclareReviewId != data.DeclareReviewId)) {
                return false;
            }
            if ((TeacherName != data.TeacherName)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((CompanyId != data.CompanyId)) {
                return false;
            }
            if ((DeclareTargetPKID != data.DeclareTargetPKID)) {
                return false;
            }
            if ((DeclareSubjectPKID != data.DeclareSubjectPKID)) {
                return false;
            }
            if ((AllowFlowToSchool != data.AllowFlowToSchool)) {
                return false;
            }
            if ((AllowFitResearcher != data.AllowFitResearcher)) {
                return false;
            }
            if ((IsBrokenRoles != data.IsBrokenRoles)) {
                return false;
            }
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            if ((Reason != data.Reason)) {
                return false;
            }
            if ((AllowFlowToDowngrade != data.AllowFlowToDowngrade)) {
                return false;
            }
            if ((TypeKey != data.TypeKey)) {
                return false;
            }
            if ((StatusKey != data.StatusKey)) {
                return false;
            }
            if ((ReviewComment != data.ReviewComment)) {
                return false;
            }
            if ((ReviewerId != data.ReviewerId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclareReviewBpl.Insert(((DeclareReview)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclareReviewBpl.Update(((DeclareReview)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long declareReviewId, Object metadata) {
            APBplDef.DeclareReviewBpl.UpdatePartial(declareReviewId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long declareReviewId) {
            APBplDef.DeclareReviewBpl.PrimaryDelete(declareReviewId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclareReviewBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclareReviewBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static DeclareReview PrimaryGet(long declareReviewId) {
            return APBplDef.DeclareReviewBpl.PrimaryGet(declareReviewId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareReview> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclareReviewBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareReview> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclareReviewBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareReview> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclareReviewBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<DeclareReview> GetAll() {
            return APBplDef.DeclareReviewBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报审核
    /// </summary>
    [Serializable()]
    public partial class DeclareReview : DeclareReviewBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareReview() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareReview(
                    long declareReviewId, 
                    string teacherName, 
                    long teacherId, 
                    long companyId, 
                    long declareTargetPKID, 
                    long declareSubjectPKID, 
                    bool allowFlowToSchool, 
                    bool allowFitResearcher, 
                    bool isBrokenRoles, 
                    long periodId, 
                    string reason, 
                    bool allowFlowToDowngrade, 
                    string typeKey, 
                    string statusKey, 
                    string reviewComment, 
                    long reviewerId) : 
                base(declareReviewId, teacherName, teacherId, companyId, declareTargetPKID, declareSubjectPKID, allowFlowToSchool, allowFitResearcher, isBrokenRoles, periodId, reason, allowFlowToDowngrade, typeKey, statusKey, reviewComment, reviewerId) {
        }
    }
    
    /// <summary>
    /// 申报材料，用于申报流程 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclareMaterialBase {
        
        /// <summary>
        /// MaterialId
        /// </summary>
        private long _materialId;
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        private long _declareTargetPKID;
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private long _periodId;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// ItemId
        /// </summary>
        private long _itemId;
        
        /// <summary>
        /// Title
        /// </summary>
        private string _title = string.Empty;
        
        /// <summary>
        /// ParentType
        /// </summary>
        private string _parentType = string.Empty;
        
        /// <summary>
        /// Type
        /// </summary>
        private string _type = string.Empty;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// PubishDate
        /// </summary>
        private System.DateTime _pubishDate;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareMaterialBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareMaterialBase(long materialId, long declareTargetPKID, long periodId, long teacherId, long itemId, string title, string parentType, string type, System.DateTime createDate, System.DateTime pubishDate) {
            _materialId = materialId;
            _declareTargetPKID = declareTargetPKID;
            _periodId = periodId;
            _teacherId = teacherId;
            _itemId = itemId;
            _title = title;
            _parentType = parentType;
            _type = type;
            _createDate = createDate;
            _pubishDate = pubishDate;
        }
        
        /// <summary>
        /// MaterialId
        /// </summary>
        public virtual long MaterialId {
            get {
                return _materialId;
            }
            set {
                _materialId = value;
            }
        }
        
        /// <summary>
        /// MaterialId APColumnDef
        /// </summary>
        public static Int64APColumnDef MaterialIdDef {
            get {
                return APDBDef.DeclareMaterial.MaterialId;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        [Display(Name="申报（担任）称号")]
        public virtual long DeclareTargetPKID {
            get {
                return _declareTargetPKID;
            }
            set {
                _declareTargetPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareTargetPKIDDef {
            get {
                return APDBDef.DeclareMaterial.DeclareTargetPKID;
            }
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="申报周期ID")]
        public virtual long PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static Int64APColumnDef PeriodIdDef {
            get {
                return APDBDef.DeclareMaterial.PeriodId;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="申报老师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.DeclareMaterial.TeacherId;
            }
        }
        
        /// <summary>
        /// ItemId
        /// </summary>
        [Display(Name="申报项ID")]
        public virtual long ItemId {
            get {
                return _itemId;
            }
            set {
                _itemId = value;
            }
        }
        
        /// <summary>
        /// ItemId APColumnDef
        /// </summary>
        public static Int64APColumnDef ItemIdDef {
            get {
                return APDBDef.DeclareMaterial.ItemId;
            }
        }
        
        /// <summary>
        /// Title
        /// </summary>
        [Display(Name="标题/内容")]
        [StringLength(20000)]
        public virtual string Title {
            get {
                return _title;
            }
            set {
                _title = value;
            }
        }
        
        /// <summary>
        /// Title APColumnDef
        /// </summary>
        public static StringAPColumnDef TitleDef {
            get {
                return APDBDef.DeclareMaterial.Title;
            }
        }
        
        /// <summary>
        /// ParentType
        /// </summary>
        [StringLength(255)]
        public virtual string ParentType {
            get {
                return _parentType;
            }
            set {
                _parentType = value;
            }
        }
        
        /// <summary>
        /// ParentType APColumnDef
        /// </summary>
        public static StringAPColumnDef ParentTypeDef {
            get {
                return APDBDef.DeclareMaterial.ParentType;
            }
        }
        
        /// <summary>
        /// Type
        /// </summary>
        [Display(Name="申报类型")]
        [StringLength(255)]
        public virtual string Type {
            get {
                return _type;
            }
            set {
                _type = value;
            }
        }
        
        /// <summary>
        /// Type APColumnDef
        /// </summary>
        public static StringAPColumnDef TypeDef {
            get {
                return APDBDef.DeclareMaterial.Type;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.DeclareMaterial.CreateDate;
            }
        }
        
        /// <summary>
        /// PubishDate
        /// </summary>
        [Display(Name="发布时间")]
        public virtual System.DateTime PubishDate {
            get {
                return _pubishDate;
            }
            set {
                _pubishDate = value;
            }
        }
        
        /// <summary>
        /// PubishDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef PubishDateDef {
            get {
                return APDBDef.DeclareMaterial.PubishDate;
            }
        }
        
        /// <summary>
        /// DeclareMaterialTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclareMaterialTableDef TableDef {
            get {
                return APDBDef.DeclareMaterial;
            }
        }
        
        /// <summary>
        /// DeclareMaterialTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.DeclareMaterial.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(DeclareMaterial data) {
            MaterialId = data.MaterialId;
            DeclareTargetPKID = data.DeclareTargetPKID;
            PeriodId = data.PeriodId;
            TeacherId = data.TeacherId;
            ItemId = data.ItemId;
            Title = data.Title;
            ParentType = data.ParentType;
            Type = data.Type;
            CreateDate = data.CreateDate;
            PubishDate = data.PubishDate;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(DeclareMaterial data) {
            if ((MaterialId != data.MaterialId)) {
                return false;
            }
            if ((DeclareTargetPKID != data.DeclareTargetPKID)) {
                return false;
            }
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((ItemId != data.ItemId)) {
                return false;
            }
            if ((Title != data.Title)) {
                return false;
            }
            if ((ParentType != data.ParentType)) {
                return false;
            }
            if ((Type != data.Type)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((PubishDate != data.PubishDate)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclareMaterialBpl.Insert(((DeclareMaterial)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclareMaterialBpl.Update(((DeclareMaterial)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long materialId, Object metadata) {
            APBplDef.DeclareMaterialBpl.UpdatePartial(materialId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long materialId) {
            APBplDef.DeclareMaterialBpl.PrimaryDelete(materialId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclareMaterialBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclareMaterialBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static DeclareMaterial PrimaryGet(long materialId) {
            return APBplDef.DeclareMaterialBpl.PrimaryGet(materialId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareMaterial> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclareMaterialBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareMaterial> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclareMaterialBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareMaterial> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclareMaterialBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<DeclareMaterial> GetAll() {
            return APBplDef.DeclareMaterialBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报材料，用于申报流程
    /// </summary>
    [Serializable()]
    public partial class DeclareMaterial : DeclareMaterialBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareMaterial() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareMaterial(long materialId, long declareTargetPKID, long periodId, long teacherId, long itemId, string title, string parentType, string type, System.DateTime createDate, System.DateTime pubishDate) : 
                base(materialId, declareTargetPKID, periodId, teacherId, itemId, title, parentType, type, createDate, pubishDate) {
        }
    }
    
    /// <summary>
    /// 申报材料，基本信息 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclareProfileBase {
        
        /// <summary>
        /// DeclareProfileId
        /// </summary>
        private long _declareProfileId;
        
        /// <summary>
        /// UserId
        /// </summary>
        private long _userId;
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private long _periodId;
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        private long _declareTargetPKID;
        
        /// <summary>
        /// CompanyId
        /// </summary>
        private long _companyId;
        
        /// <summary>
        /// RealName
        /// </summary>
        private string _realName = string.Empty;
        
        /// <summary>
        /// TrainNo
        /// </summary>
        private string _trainNo = string.Empty;
        
        /// <summary>
        /// PickList - Gender
        /// </summary>
        private long _genderPKID;
        
        /// <summary>
        /// Birthday
        /// </summary>
        private System.DateTime _birthday;
        
        /// <summary>
        /// PickList - PoliticalStatus
        /// </summary>
        private long _politicalStatusPKID;
        
        /// <summary>
        /// PickList - Nationality
        /// </summary>
        private long _nationalityPKID;
        
        /// <summary>
        /// PickList - EduSubject
        /// </summary>
        private long _eduSubjectPKID;
        
        /// <summary>
        /// PickList - EduStage
        /// </summary>
        private long _eduStagePKID;
        
        /// <summary>
        /// PickList - SkillTitle
        /// </summary>
        private long _skillTitlePKID;
        
        /// <summary>
        /// CompanyName
        /// </summary>
        private string _companyName = string.Empty;
        
        /// <summary>
        /// PickList - RankTitle
        /// </summary>
        private long _rankTitlePKID;
        
        /// <summary>
        /// CourseCountPerWeek
        /// </summary>
        private string _courseCountPerWeek = string.Empty;
        
        /// <summary>
        /// Hiredate
        /// </summary>
        private System.DateTime _hiredate;
        
        /// <summary>
        /// PickList - EduBg
        /// </summary>
        private long _eduBgPKID;
        
        /// <summary>
        /// PickList - EduDegree
        /// </summary>
        private long _eduDegreePKID;
        
        /// <summary>
        /// Phonemobile
        /// </summary>
        private string _phonemobile = string.Empty;
        
        /// <summary>
        /// 用于联系的电子邮箱
        /// </summary>
        private string _email = string.Empty;
        
        /// <summary>
        /// Phone
        /// </summary>
        private string _phone;
        
        /// <summary>
        /// 2016学年考核情况
        /// </summary>
        private string _dynamic1;
        
        /// <summary>
        /// 2017学年考核情况
        /// </summary>
        private string _dynamic2;
        
        /// <summary>
        /// 2018学年考核情况
        /// </summary>
        private string _dynamic3;
        
        /// <summary>
        /// 上一轮梯队任职情况
        /// </summary>
        private string _dynamic4;
        
        /// <summary>
        /// 目前在市(区)级及以上专业委员会任职情况
        /// </summary>
        private string _dynamic5;
        
        /// <summary>
        /// StatusKey
        /// </summary>
        private string _statusKey = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareProfileBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareProfileBase(
                    long declareProfileId, 
                    long userId, 
                    long periodId, 
                    long declareTargetPKID, 
                    long companyId, 
                    string realName, 
                    string trainNo, 
                    long genderPKID, 
                    System.DateTime birthday, 
                    long politicalStatusPKID, 
                    long nationalityPKID, 
                    long eduSubjectPKID, 
                    long eduStagePKID, 
                    long skillTitlePKID, 
                    string companyName, 
                    long rankTitlePKID, 
                    string courseCountPerWeek, 
                    System.DateTime hiredate, 
                    long eduBgPKID, 
                    long eduDegreePKID, 
                    string phonemobile, 
                    string email, 
                    string phone, 
                    string dynamic1, 
                    string dynamic2, 
                    string dynamic3, 
                    string dynamic4, 
                    string dynamic5, 
                    string statusKey) {
            _declareProfileId = declareProfileId;
            _userId = userId;
            _periodId = periodId;
            _declareTargetPKID = declareTargetPKID;
            _companyId = companyId;
            _realName = realName;
            _trainNo = trainNo;
            _genderPKID = genderPKID;
            _birthday = birthday;
            _politicalStatusPKID = politicalStatusPKID;
            _nationalityPKID = nationalityPKID;
            _eduSubjectPKID = eduSubjectPKID;
            _eduStagePKID = eduStagePKID;
            _skillTitlePKID = skillTitlePKID;
            _companyName = companyName;
            _rankTitlePKID = rankTitlePKID;
            _courseCountPerWeek = courseCountPerWeek;
            _hiredate = hiredate;
            _eduBgPKID = eduBgPKID;
            _eduDegreePKID = eduDegreePKID;
            _phonemobile = phonemobile;
            _email = email;
            _phone = phone;
            _dynamic1 = dynamic1;
            _dynamic2 = dynamic2;
            _dynamic3 = dynamic3;
            _dynamic4 = dynamic4;
            _dynamic5 = dynamic5;
            _statusKey = statusKey;
        }
        
        /// <summary>
        /// DeclareProfileId
        /// </summary>
        public virtual long DeclareProfileId {
            get {
                return _declareProfileId;
            }
            set {
                _declareProfileId = value;
            }
        }
        
        /// <summary>
        /// DeclareProfileId APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareProfileIdDef {
            get {
                return APDBDef.DeclareProfile.DeclareProfileId;
            }
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        [Display(Name="用户ID")]
        public virtual long UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static Int64APColumnDef UserIdDef {
            get {
                return APDBDef.DeclareProfile.UserId;
            }
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="申报周期ID")]
        public virtual long PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static Int64APColumnDef PeriodIdDef {
            get {
                return APDBDef.DeclareProfile.PeriodId;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        [Display(Name="申报（担任）称号")]
        public virtual long DeclareTargetPKID {
            get {
                return _declareTargetPKID;
            }
            set {
                _declareTargetPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareTargetPKIDDef {
            get {
                return APDBDef.DeclareProfile.DeclareTargetPKID;
            }
        }
        
        /// <summary>
        /// CompanyId
        /// </summary>
        [Display(Name="单位")]
        public virtual long CompanyId {
            get {
                return _companyId;
            }
            set {
                _companyId = value;
            }
        }
        
        /// <summary>
        /// CompanyId APColumnDef
        /// </summary>
        public static Int64APColumnDef CompanyIdDef {
            get {
                return APDBDef.DeclareProfile.CompanyId;
            }
        }
        
        /// <summary>
        /// RealName
        /// </summary>
        [Display(Name="真实姓名")]
        [Required()]
        [StringLength(40)]
        public virtual string RealName {
            get {
                return _realName;
            }
            set {
                _realName = value;
            }
        }
        
        /// <summary>
        /// RealName APColumnDef
        /// </summary>
        public static StringAPColumnDef RealNameDef {
            get {
                return APDBDef.DeclareProfile.RealName;
            }
        }
        
        /// <summary>
        /// TrainNo
        /// </summary>
        [Display(Name="师训编号")]
        [Required()]
        [StringLength(20)]
        public virtual string TrainNo {
            get {
                return _trainNo;
            }
            set {
                _trainNo = value;
            }
        }
        
        /// <summary>
        /// TrainNo APColumnDef
        /// </summary>
        public static StringAPColumnDef TrainNoDef {
            get {
                return APDBDef.DeclareProfile.TrainNo;
            }
        }
        
        /// <summary>
        /// PickList - Gender
        /// </summary>
        [Display(Name="性别")]
        [Required()]
        public virtual long GenderPKID {
            get {
                return _genderPKID;
            }
            set {
                _genderPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - Gender APColumnDef
        /// </summary>
        public static Int64APColumnDef GenderPKIDDef {
            get {
                return APDBDef.DeclareProfile.GenderPKID;
            }
        }
        
        /// <summary>
        /// Birthday
        /// </summary>
        [Display(Name="出生年月")]
        [Required()]
        public virtual System.DateTime Birthday {
            get {
                return _birthday;
            }
            set {
                _birthday = value;
            }
        }
        
        /// <summary>
        /// Birthday APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef BirthdayDef {
            get {
                return APDBDef.DeclareProfile.Birthday;
            }
        }
        
        /// <summary>
        /// PickList - PoliticalStatus
        /// </summary>
        [Display(Name="政治面貌")]
        [Required()]
        public virtual long PoliticalStatusPKID {
            get {
                return _politicalStatusPKID;
            }
            set {
                _politicalStatusPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PoliticalStatus APColumnDef
        /// </summary>
        public static Int64APColumnDef PoliticalStatusPKIDDef {
            get {
                return APDBDef.DeclareProfile.PoliticalStatusPKID;
            }
        }
        
        /// <summary>
        /// PickList - Nationality
        /// </summary>
        [Display(Name="民族")]
        [Required()]
        public virtual long NationalityPKID {
            get {
                return _nationalityPKID;
            }
            set {
                _nationalityPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - Nationality APColumnDef
        /// </summary>
        public static Int64APColumnDef NationalityPKIDDef {
            get {
                return APDBDef.DeclareProfile.NationalityPKID;
            }
        }
        
        /// <summary>
        /// PickList - EduSubject
        /// </summary>
        [Display(Name="任教学科")]
        public virtual long EduSubjectPKID {
            get {
                return _eduSubjectPKID;
            }
            set {
                _eduSubjectPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - EduSubject APColumnDef
        /// </summary>
        public static Int64APColumnDef EduSubjectPKIDDef {
            get {
                return APDBDef.DeclareProfile.EduSubjectPKID;
            }
        }
        
        /// <summary>
        /// PickList - EduStage
        /// </summary>
        [Display(Name="任教学段")]
        public virtual long EduStagePKID {
            get {
                return _eduStagePKID;
            }
            set {
                _eduStagePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - EduStage APColumnDef
        /// </summary>
        public static Int64APColumnDef EduStagePKIDDef {
            get {
                return APDBDef.DeclareProfile.EduStagePKID;
            }
        }
        
        /// <summary>
        /// PickList - SkillTitle
        /// </summary>
        [Display(Name="现任专技职称")]
        public virtual long SkillTitlePKID {
            get {
                return _skillTitlePKID;
            }
            set {
                _skillTitlePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - SkillTitle APColumnDef
        /// </summary>
        public static Int64APColumnDef SkillTitlePKIDDef {
            get {
                return APDBDef.DeclareProfile.SkillTitlePKID;
            }
        }
        
        /// <summary>
        /// CompanyName
        /// </summary>
        [Display(Name="单位")]
        [Required()]
        [StringLength(100)]
        public virtual string CompanyName {
            get {
                return _companyName;
            }
            set {
                _companyName = value;
            }
        }
        
        /// <summary>
        /// CompanyName APColumnDef
        /// </summary>
        public static StringAPColumnDef CompanyNameDef {
            get {
                return APDBDef.DeclareProfile.CompanyName;
            }
        }
        
        /// <summary>
        /// PickList - RankTitle
        /// </summary>
        [Display(Name="职务")]
        [Required()]
        public virtual long RankTitlePKID {
            get {
                return _rankTitlePKID;
            }
            set {
                _rankTitlePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - RankTitle APColumnDef
        /// </summary>
        public static Int64APColumnDef RankTitlePKIDDef {
            get {
                return APDBDef.DeclareProfile.RankTitlePKID;
            }
        }
        
        /// <summary>
        /// CourseCountPerWeek
        /// </summary>
        [Display(Name="周课时数")]
        [Required()]
        [StringLength(20)]
        public virtual string CourseCountPerWeek {
            get {
                return _courseCountPerWeek;
            }
            set {
                _courseCountPerWeek = value;
            }
        }
        
        /// <summary>
        /// CourseCountPerWeek APColumnDef
        /// </summary>
        public static StringAPColumnDef CourseCountPerWeekDef {
            get {
                return APDBDef.DeclareProfile.CourseCountPerWeek;
            }
        }
        
        /// <summary>
        /// Hiredate
        /// </summary>
        [Display(Name="评聘日期")]
        [Required()]
        public virtual System.DateTime Hiredate {
            get {
                return _hiredate;
            }
            set {
                _hiredate = value;
            }
        }
        
        /// <summary>
        /// Hiredate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef HiredateDef {
            get {
                return APDBDef.DeclareProfile.Hiredate;
            }
        }
        
        /// <summary>
        /// PickList - EduBg
        /// </summary>
        [Display(Name="学历")]
        [Required()]
        public virtual long EduBgPKID {
            get {
                return _eduBgPKID;
            }
            set {
                _eduBgPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - EduBg APColumnDef
        /// </summary>
        public static Int64APColumnDef EduBgPKIDDef {
            get {
                return APDBDef.DeclareProfile.EduBgPKID;
            }
        }
        
        /// <summary>
        /// PickList - EduDegree
        /// </summary>
        [Display(Name="学位")]
        [Required()]
        public virtual long EduDegreePKID {
            get {
                return _eduDegreePKID;
            }
            set {
                _eduDegreePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - EduDegree APColumnDef
        /// </summary>
        public static Int64APColumnDef EduDegreePKIDDef {
            get {
                return APDBDef.DeclareProfile.EduDegreePKID;
            }
        }
        
        /// <summary>
        /// Phonemobile
        /// </summary>
        [Display(Name="手机号码")]
        [Required()]
        [StringLength(20)]
        public virtual string Phonemobile {
            get {
                return _phonemobile;
            }
            set {
                _phonemobile = value;
            }
        }
        
        /// <summary>
        /// Phonemobile APColumnDef
        /// </summary>
        public static StringAPColumnDef PhonemobileDef {
            get {
                return APDBDef.DeclareProfile.Phonemobile;
            }
        }
        
        /// <summary>
        /// 用于联系的电子邮箱
        /// </summary>
        [Display(Name="电子邮箱")]
        [Required()]
        [StringLength(255)]
        public virtual string Email {
            get {
                return _email;
            }
            set {
                _email = value;
            }
        }
        
        /// <summary>
        /// 用于联系的电子邮箱 APColumnDef
        /// </summary>
        public static StringAPColumnDef EmailDef {
            get {
                return APDBDef.DeclareProfile.Email;
            }
        }
        
        /// <summary>
        /// Phone
        /// </summary>
        [Display(Name="办公室电话")]
        [StringLength(20)]
        public virtual string Phone {
            get {
                return _phone;
            }
            set {
                _phone = value;
            }
        }
        
        /// <summary>
        /// Phone APColumnDef
        /// </summary>
        public static StringAPColumnDef PhoneDef {
            get {
                return APDBDef.DeclareProfile.Phone;
            }
        }
        
        /// <summary>
        /// 2016学年考核情况
        /// </summary>
        [Display(Name="2016学年")]
        [StringLength(255)]
        public virtual string Dynamic1 {
            get {
                return _dynamic1;
            }
            set {
                _dynamic1 = value;
            }
        }
        
        /// <summary>
        /// 2016学年考核情况 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic1Def {
            get {
                return APDBDef.DeclareProfile.Dynamic1;
            }
        }
        
        /// <summary>
        /// 2017学年考核情况
        /// </summary>
        [Display(Name="2017学年")]
        [StringLength(255)]
        public virtual string Dynamic2 {
            get {
                return _dynamic2;
            }
            set {
                _dynamic2 = value;
            }
        }
        
        /// <summary>
        /// 2017学年考核情况 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic2Def {
            get {
                return APDBDef.DeclareProfile.Dynamic2;
            }
        }
        
        /// <summary>
        /// 2018学年考核情况
        /// </summary>
        [Display(Name="2018学年")]
        [StringLength(255)]
        public virtual string Dynamic3 {
            get {
                return _dynamic3;
            }
            set {
                _dynamic3 = value;
            }
        }
        
        /// <summary>
        /// 2018学年考核情况 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic3Def {
            get {
                return APDBDef.DeclareProfile.Dynamic3;
            }
        }
        
        /// <summary>
        /// 上一轮梯队任职情况
        /// </summary>
        [StringLength(255)]
        public virtual string Dynamic4 {
            get {
                return _dynamic4;
            }
            set {
                _dynamic4 = value;
            }
        }
        
        /// <summary>
        /// 上一轮梯队任职情况 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic4Def {
            get {
                return APDBDef.DeclareProfile.Dynamic4;
            }
        }
        
        /// <summary>
        /// 目前在市(区)级及以上专业委员会任职情况
        /// </summary>
        [StringLength(300)]
        public virtual string Dynamic5 {
            get {
                return _dynamic5;
            }
            set {
                _dynamic5 = value;
            }
        }
        
        /// <summary>
        /// 目前在市(区)级及以上专业委员会任职情况 APColumnDef
        /// </summary>
        public static StringAPColumnDef Dynamic5Def {
            get {
                return APDBDef.DeclareProfile.Dynamic5;
            }
        }
        
        /// <summary>
        /// StatusKey
        /// </summary>
        [Display(Name="审核状态")]
        [StringLength(100)]
        public virtual string StatusKey {
            get {
                return _statusKey;
            }
            set {
                _statusKey = value;
            }
        }
        
        /// <summary>
        /// StatusKey APColumnDef
        /// </summary>
        public static StringAPColumnDef StatusKeyDef {
            get {
                return APDBDef.DeclareProfile.StatusKey;
            }
        }
        
        /// <summary>
        /// DeclareProfileTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclareProfileTableDef TableDef {
            get {
                return APDBDef.DeclareProfile;
            }
        }
        
        /// <summary>
        /// DeclareProfileTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.DeclareProfile.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(DeclareProfile data) {
            DeclareProfileId = data.DeclareProfileId;
            UserId = data.UserId;
            PeriodId = data.PeriodId;
            DeclareTargetPKID = data.DeclareTargetPKID;
            CompanyId = data.CompanyId;
            RealName = data.RealName;
            TrainNo = data.TrainNo;
            GenderPKID = data.GenderPKID;
            Birthday = data.Birthday;
            PoliticalStatusPKID = data.PoliticalStatusPKID;
            NationalityPKID = data.NationalityPKID;
            EduSubjectPKID = data.EduSubjectPKID;
            EduStagePKID = data.EduStagePKID;
            SkillTitlePKID = data.SkillTitlePKID;
            CompanyName = data.CompanyName;
            RankTitlePKID = data.RankTitlePKID;
            CourseCountPerWeek = data.CourseCountPerWeek;
            Hiredate = data.Hiredate;
            EduBgPKID = data.EduBgPKID;
            EduDegreePKID = data.EduDegreePKID;
            Phonemobile = data.Phonemobile;
            Email = data.Email;
            Phone = data.Phone;
            Dynamic1 = data.Dynamic1;
            Dynamic2 = data.Dynamic2;
            Dynamic3 = data.Dynamic3;
            Dynamic4 = data.Dynamic4;
            Dynamic5 = data.Dynamic5;
            StatusKey = data.StatusKey;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(DeclareProfile data) {
            if ((DeclareProfileId != data.DeclareProfileId)) {
                return false;
            }
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            if ((DeclareTargetPKID != data.DeclareTargetPKID)) {
                return false;
            }
            if ((CompanyId != data.CompanyId)) {
                return false;
            }
            if ((RealName != data.RealName)) {
                return false;
            }
            if ((TrainNo != data.TrainNo)) {
                return false;
            }
            if ((GenderPKID != data.GenderPKID)) {
                return false;
            }
            if ((Birthday != data.Birthday)) {
                return false;
            }
            if ((PoliticalStatusPKID != data.PoliticalStatusPKID)) {
                return false;
            }
            if ((NationalityPKID != data.NationalityPKID)) {
                return false;
            }
            if ((EduSubjectPKID != data.EduSubjectPKID)) {
                return false;
            }
            if ((EduStagePKID != data.EduStagePKID)) {
                return false;
            }
            if ((SkillTitlePKID != data.SkillTitlePKID)) {
                return false;
            }
            if ((CompanyName != data.CompanyName)) {
                return false;
            }
            if ((RankTitlePKID != data.RankTitlePKID)) {
                return false;
            }
            if ((CourseCountPerWeek != data.CourseCountPerWeek)) {
                return false;
            }
            if ((Hiredate != data.Hiredate)) {
                return false;
            }
            if ((EduBgPKID != data.EduBgPKID)) {
                return false;
            }
            if ((EduDegreePKID != data.EduDegreePKID)) {
                return false;
            }
            if ((Phonemobile != data.Phonemobile)) {
                return false;
            }
            if ((Email != data.Email)) {
                return false;
            }
            if ((Phone != data.Phone)) {
                return false;
            }
            if ((Dynamic1 != data.Dynamic1)) {
                return false;
            }
            if ((Dynamic2 != data.Dynamic2)) {
                return false;
            }
            if ((Dynamic3 != data.Dynamic3)) {
                return false;
            }
            if ((Dynamic4 != data.Dynamic4)) {
                return false;
            }
            if ((Dynamic5 != data.Dynamic5)) {
                return false;
            }
            if ((StatusKey != data.StatusKey)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclareProfileBpl.Insert(((DeclareProfile)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclareProfileBpl.Update(((DeclareProfile)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long declareProfileId, long userId, Object metadata) {
            APBplDef.DeclareProfileBpl.UpdatePartial(declareProfileId, userId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long declareProfileId, long userId) {
            APBplDef.DeclareProfileBpl.PrimaryDelete(declareProfileId, userId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclareProfileBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclareProfileBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static DeclareProfile PrimaryGet(long declareProfileId, long userId) {
            return APBplDef.DeclareProfileBpl.PrimaryGet(declareProfileId, userId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclareProfileBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclareProfileBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclareProfile> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclareProfileBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<DeclareProfile> GetAll() {
            return APBplDef.DeclareProfileBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报材料，基本信息
    /// </summary>
    [Serializable()]
    public partial class DeclareProfile : DeclareProfileBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclareProfile() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclareProfile(
                    long declareProfileId, 
                    long userId, 
                    long periodId, 
                    long declareTargetPKID, 
                    long companyId, 
                    string realName, 
                    string trainNo, 
                    long genderPKID, 
                    System.DateTime birthday, 
                    long politicalStatusPKID, 
                    long nationalityPKID, 
                    long eduSubjectPKID, 
                    long eduStagePKID, 
                    long skillTitlePKID, 
                    string companyName, 
                    long rankTitlePKID, 
                    string courseCountPerWeek, 
                    System.DateTime hiredate, 
                    long eduBgPKID, 
                    long eduDegreePKID, 
                    string phonemobile, 
                    string email, 
                    string phone, 
                    string dynamic1, 
                    string dynamic2, 
                    string dynamic3, 
                    string dynamic4, 
                    string dynamic5, 
                    string statusKey) : 
                base(declareProfileId, userId, periodId, declareTargetPKID, companyId, realName, trainNo, genderPKID, birthday, politicalStatusPKID, nationalityPKID, eduSubjectPKID, eduStagePKID, skillTitlePKID, companyName, rankTitlePKID, courseCountPerWeek, hiredate, eduBgPKID, eduDegreePKID, phonemobile, email, phone, dynamic1, dynamic2, dynamic3, dynamic4, dynamic5, statusKey) {
        }
    }
    
    /// <summary>
    /// 申报周期 Base
    /// </summary>
    [Serializable()]
    public abstract partial class DeclarePeriodBase {
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private long _periodId;
        
        /// <summary>
        /// Name
        /// </summary>
        private string _name = string.Empty;
        
        /// <summary>
        /// BeginDate
        /// </summary>
        private System.DateTime _beginDate;
        
        /// <summary>
        /// EndDate
        /// </summary>
        private System.DateTime _endDate;
        
        /// <summary>
        /// DeclareStartDate
        /// </summary>
        private System.DateTime _declareStartDate;
        
        /// <summary>
        /// DeclareEndDate
        /// </summary>
        private System.DateTime _declareEndDate;
        
        /// <summary>
        /// ReveiwStartDate
        /// </summary>
        private System.DateTime _reveiwStartDate;
        
        /// <summary>
        /// ReveiwEndDate
        /// </summary>
        private System.DateTime _reveiwEndDate;
        
        /// <summary>
        /// IsCurrent
        /// </summary>
        private bool _isCurrent;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclarePeriodBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclarePeriodBase(long periodId, string name, System.DateTime beginDate, System.DateTime endDate, System.DateTime declareStartDate, System.DateTime declareEndDate, System.DateTime reveiwStartDate, System.DateTime reveiwEndDate, bool isCurrent) {
            _periodId = periodId;
            _name = name;
            _beginDate = beginDate;
            _endDate = endDate;
            _declareStartDate = declareStartDate;
            _declareEndDate = declareEndDate;
            _reveiwStartDate = reveiwStartDate;
            _reveiwEndDate = reveiwEndDate;
            _isCurrent = isCurrent;
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="周期ID")]
        public virtual long PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static Int64APColumnDef PeriodIdDef {
            get {
                return APDBDef.DeclarePeriod.PeriodId;
            }
        }
        
        /// <summary>
        /// Name
        /// </summary>
        [Display(Name="周期名称")]
        [StringLength(100)]
        public virtual string Name {
            get {
                return _name;
            }
            set {
                _name = value;
            }
        }
        
        /// <summary>
        /// Name APColumnDef
        /// </summary>
        public static StringAPColumnDef NameDef {
            get {
                return APDBDef.DeclarePeriod.Name;
            }
        }
        
        /// <summary>
        /// BeginDate
        /// </summary>
        [Display(Name="开始时间（数据范围区间）")]
        public virtual System.DateTime BeginDate {
            get {
                return _beginDate;
            }
            set {
                _beginDate = value;
            }
        }
        
        /// <summary>
        /// BeginDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef BeginDateDef {
            get {
                return APDBDef.DeclarePeriod.BeginDate;
            }
        }
        
        /// <summary>
        /// EndDate
        /// </summary>
        [Display(Name="结束时间（数据范围区间）")]
        public virtual System.DateTime EndDate {
            get {
                return _endDate;
            }
            set {
                _endDate = value;
            }
        }
        
        /// <summary>
        /// EndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef EndDateDef {
            get {
                return APDBDef.DeclarePeriod.EndDate;
            }
        }
        
        /// <summary>
        /// DeclareStartDate
        /// </summary>
        [Display(Name="材料填报开始时间")]
        public virtual System.DateTime DeclareStartDate {
            get {
                return _declareStartDate;
            }
            set {
                _declareStartDate = value;
            }
        }
        
        /// <summary>
        /// DeclareStartDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef DeclareStartDateDef {
            get {
                return APDBDef.DeclarePeriod.DeclareStartDate;
            }
        }
        
        /// <summary>
        /// DeclareEndDate
        /// </summary>
        [Display(Name="材料填报结束时间")]
        public virtual System.DateTime DeclareEndDate {
            get {
                return _declareEndDate;
            }
            set {
                _declareEndDate = value;
            }
        }
        
        /// <summary>
        /// DeclareEndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef DeclareEndDateDef {
            get {
                return APDBDef.DeclarePeriod.DeclareEndDate;
            }
        }
        
        /// <summary>
        /// ReveiwStartDate
        /// </summary>
        [Display(Name="审核开始时间")]
        public virtual System.DateTime ReveiwStartDate {
            get {
                return _reveiwStartDate;
            }
            set {
                _reveiwStartDate = value;
            }
        }
        
        /// <summary>
        /// ReveiwStartDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ReveiwStartDateDef {
            get {
                return APDBDef.DeclarePeriod.ReveiwStartDate;
            }
        }
        
        /// <summary>
        /// ReveiwEndDate
        /// </summary>
        [Display(Name="审核结束时间")]
        public virtual System.DateTime ReveiwEndDate {
            get {
                return _reveiwEndDate;
            }
            set {
                _reveiwEndDate = value;
            }
        }
        
        /// <summary>
        /// ReveiwEndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ReveiwEndDateDef {
            get {
                return APDBDef.DeclarePeriod.ReveiwEndDate;
            }
        }
        
        /// <summary>
        /// IsCurrent
        /// </summary>
        [Display(Name="是否当前申报期")]
        public virtual bool IsCurrent {
            get {
                return _isCurrent;
            }
            set {
                _isCurrent = value;
            }
        }
        
        /// <summary>
        /// IsCurrent APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsCurrentDef {
            get {
                return APDBDef.DeclarePeriod.IsCurrent;
            }
        }
        
        /// <summary>
        /// DeclarePeriodTableDef APTableDef
        /// </summary>
        public static APDBDef.DeclarePeriodTableDef TableDef {
            get {
                return APDBDef.DeclarePeriod;
            }
        }
        
        /// <summary>
        /// DeclarePeriodTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.DeclarePeriod.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(DeclarePeriod data) {
            PeriodId = data.PeriodId;
            Name = data.Name;
            BeginDate = data.BeginDate;
            EndDate = data.EndDate;
            DeclareStartDate = data.DeclareStartDate;
            DeclareEndDate = data.DeclareEndDate;
            ReveiwStartDate = data.ReveiwStartDate;
            ReveiwEndDate = data.ReveiwEndDate;
            IsCurrent = data.IsCurrent;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(DeclarePeriod data) {
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            if ((Name != data.Name)) {
                return false;
            }
            if ((BeginDate != data.BeginDate)) {
                return false;
            }
            if ((EndDate != data.EndDate)) {
                return false;
            }
            if ((DeclareStartDate != data.DeclareStartDate)) {
                return false;
            }
            if ((DeclareEndDate != data.DeclareEndDate)) {
                return false;
            }
            if ((ReveiwStartDate != data.ReveiwStartDate)) {
                return false;
            }
            if ((ReveiwEndDate != data.ReveiwEndDate)) {
                return false;
            }
            if ((IsCurrent != data.IsCurrent)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.DeclarePeriodBpl.Insert(((DeclarePeriod)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.DeclarePeriodBpl.Update(((DeclarePeriod)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long periodId, Object metadata) {
            APBplDef.DeclarePeriodBpl.UpdatePartial(periodId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long periodId) {
            APBplDef.DeclarePeriodBpl.PrimaryDelete(periodId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.DeclarePeriodBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.DeclarePeriodBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static DeclarePeriod PrimaryGet(long periodId) {
            return APBplDef.DeclarePeriodBpl.PrimaryGet(periodId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclarePeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.DeclarePeriodBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclarePeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.DeclarePeriodBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<DeclarePeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.DeclarePeriodBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<DeclarePeriod> GetAll() {
            return APBplDef.DeclarePeriodBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 申报周期
    /// </summary>
    [Serializable()]
    public partial class DeclarePeriod : DeclarePeriodBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public DeclarePeriod() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public DeclarePeriod(long periodId, string name, System.DateTime beginDate, System.DateTime endDate, System.DateTime declareStartDate, System.DateTime declareEndDate, System.DateTime reveiwStartDate, System.DateTime reveiwEndDate, bool isCurrent) : 
                base(periodId, name, beginDate, endDate, declareStartDate, declareEndDate, reveiwStartDate, reveiwEndDate, isCurrent) {
        }
    }
    
    /// <summary>
    /// 梯队-学员 Base
    /// </summary>
    [Serializable()]
    public abstract partial class TeamMemberBase {
        
        /// <summary>
        /// TeamId
        /// </summary>
        private long _teamId;
        
        /// <summary>
        /// MemberId
        /// </summary>
        private long _memberId;
        
        /// <summary>
        /// ContentValue
        /// </summary>
        private string _contentValue = string.Empty;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TeamMemberBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TeamMemberBase(long teamId, long memberId, string contentValue, System.DateTime createDate, long creator) {
            _teamId = teamId;
            _memberId = memberId;
            _contentValue = contentValue;
            _createDate = createDate;
            _creator = creator;
        }
        
        /// <summary>
        /// TeamId
        /// </summary>
        [Display(Name="梯队ID")]
        public virtual long TeamId {
            get {
                return _teamId;
            }
            set {
                _teamId = value;
            }
        }
        
        /// <summary>
        /// TeamId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeamIdDef {
            get {
                return APDBDef.TeamMember.TeamId;
            }
        }
        
        /// <summary>
        /// MemberId
        /// </summary>
        [Display(Name="学员ID")]
        public virtual long MemberId {
            get {
                return _memberId;
            }
            set {
                _memberId = value;
            }
        }
        
        /// <summary>
        /// MemberId APColumnDef
        /// </summary>
        public static Int64APColumnDef MemberIdDef {
            get {
                return APDBDef.TeamMember.MemberId;
            }
        }
        
        /// <summary>
        /// ContentValue
        /// </summary>
        [Display(Name="学员的成长方向")]
        [StringLength(30000)]
        public virtual string ContentValue {
            get {
                return _contentValue;
            }
            set {
                _contentValue = value;
            }
        }
        
        /// <summary>
        /// ContentValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentValueDef {
            get {
                return APDBDef.TeamMember.ContentValue;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.TeamMember.CreateDate;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        [Display(Name="创建人")]
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.TeamMember.Creator;
            }
        }
        
        /// <summary>
        /// TeamMemberTableDef APTableDef
        /// </summary>
        public static APDBDef.TeamMemberTableDef TableDef {
            get {
                return APDBDef.TeamMember;
            }
        }
        
        /// <summary>
        /// TeamMemberTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.TeamMember.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(TeamMember data) {
            TeamId = data.TeamId;
            MemberId = data.MemberId;
            ContentValue = data.ContentValue;
            CreateDate = data.CreateDate;
            Creator = data.Creator;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(TeamMember data) {
            if ((TeamId != data.TeamId)) {
                return false;
            }
            if ((MemberId != data.MemberId)) {
                return false;
            }
            if ((ContentValue != data.ContentValue)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.TeamMemberBpl.Insert(((TeamMember)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.TeamMemberBpl.Update(((TeamMember)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long teamId, long memberId, Object metadata) {
            APBplDef.TeamMemberBpl.UpdatePartial(teamId, memberId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long teamId, long memberId) {
            APBplDef.TeamMemberBpl.PrimaryDelete(teamId, memberId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.TeamMemberBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.TeamMemberBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static TeamMember PrimaryGet(long teamId, long memberId) {
            return APBplDef.TeamMemberBpl.PrimaryGet(teamId, memberId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.TeamMemberBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.TeamMemberBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.TeamMemberBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<TeamMember> GetAll() {
            return APBplDef.TeamMemberBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 梯队-学员
    /// </summary>
    [Serializable()]
    public partial class TeamMember : TeamMemberBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TeamMember() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TeamMember(long teamId, long memberId, string contentValue, System.DateTime createDate, long creator) : 
                base(teamId, memberId, contentValue, createDate, creator) {
        }
    }
    
    /// <summary>
    /// 梯队-内容 Base
    /// </summary>
    [Serializable()]
    public abstract partial class TeamContentBase {
        
        /// <summary>
        /// TeamContentId
        /// </summary>
        private long _teamContentId;
        
        /// <summary>
        /// TeamId
        /// </summary>
        private long _teamId;
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        private string _contentKey = string.Empty;
        
        /// <summary>
        /// ContentValue
        /// </summary>
        private string _contentValue = string.Empty;
        
        /// <summary>
        /// 内容的数据类型，String，DateTime等
        /// </summary>
        private string _contentDataType = string.Empty;
        
        /// <summary>
        /// IsDeclare
        /// </summary>
        private bool _isDeclare;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.Nullable<System.DateTime> _modifyDate;
        
        /// <summary>
        /// Modifier
        /// </summary>
        private long _modifier;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TeamContentBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TeamContentBase(long teamContentId, long teamId, string contentKey, string contentValue, string contentDataType, bool isDeclare, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) {
            _teamContentId = teamContentId;
            _teamId = teamId;
            _contentKey = contentKey;
            _contentValue = contentValue;
            _contentDataType = contentDataType;
            _isDeclare = isDeclare;
            _createDate = createDate;
            _creator = creator;
            _modifyDate = modifyDate;
            _modifier = modifier;
        }
        
        /// <summary>
        /// TeamContentId
        /// </summary>
        [Display(Name="内容ID")]
        public virtual long TeamContentId {
            get {
                return _teamContentId;
            }
            set {
                _teamContentId = value;
            }
        }
        
        /// <summary>
        /// TeamContentId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeamContentIdDef {
            get {
                return APDBDef.TeamContent.TeamContentId;
            }
        }
        
        /// <summary>
        /// TeamId
        /// </summary>
        [Display(Name="梯队ID")]
        public virtual long TeamId {
            get {
                return _teamId;
            }
            set {
                _teamId = value;
            }
        }
        
        /// <summary>
        /// TeamId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeamIdDef {
            get {
                return APDBDef.TeamContent.TeamId;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        [Display(Name="内容类别")]
        [StringLength(200)]
        public virtual string ContentKey {
            get {
                return _contentKey;
            }
            set {
                _contentKey = value;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割 APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentKeyDef {
            get {
                return APDBDef.TeamContent.ContentKey;
            }
        }
        
        /// <summary>
        /// ContentValue
        /// </summary>
        [Display(Name="内容")]
        [StringLength(30000)]
        public virtual string ContentValue {
            get {
                return _contentValue;
            }
            set {
                _contentValue = value;
            }
        }
        
        /// <summary>
        /// ContentValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentValueDef {
            get {
                return APDBDef.TeamContent.ContentValue;
            }
        }
        
        /// <summary>
        /// 内容的数据类型，String，DateTime等
        /// </summary>
        [Display(Name="内容数据类型")]
        [StringLength(100)]
        public virtual string ContentDataType {
            get {
                return _contentDataType;
            }
            set {
                _contentDataType = value;
            }
        }
        
        /// <summary>
        /// 内容的数据类型，String，DateTime等 APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentDataTypeDef {
            get {
                return APDBDef.TeamContent.ContentDataType;
            }
        }
        
        /// <summary>
        /// IsDeclare
        /// </summary>
        [Display(Name="是否申报")]
        public virtual bool IsDeclare {
            get {
                return _isDeclare;
            }
            set {
                _isDeclare = value;
            }
        }
        
        /// <summary>
        /// IsDeclare APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsDeclareDef {
            get {
                return APDBDef.TeamContent.IsDeclare;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.TeamContent.CreateDate;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        [Display(Name="创建人")]
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.TeamContent.Creator;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="修改时间")]
        public virtual System.Nullable<System.DateTime> ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.TeamContent.ModifyDate;
            }
        }
        
        /// <summary>
        /// Modifier
        /// </summary>
        [Display(Name="修改人")]
        public virtual long Modifier {
            get {
                return _modifier;
            }
            set {
                _modifier = value;
            }
        }
        
        /// <summary>
        /// Modifier APColumnDef
        /// </summary>
        public static Int64APColumnDef ModifierDef {
            get {
                return APDBDef.TeamContent.Modifier;
            }
        }
        
        /// <summary>
        /// TeamContentTableDef APTableDef
        /// </summary>
        public static APDBDef.TeamContentTableDef TableDef {
            get {
                return APDBDef.TeamContent;
            }
        }
        
        /// <summary>
        /// TeamContentTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.TeamContent.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(TeamContent data) {
            TeamContentId = data.TeamContentId;
            TeamId = data.TeamId;
            ContentKey = data.ContentKey;
            ContentValue = data.ContentValue;
            ContentDataType = data.ContentDataType;
            IsDeclare = data.IsDeclare;
            CreateDate = data.CreateDate;
            Creator = data.Creator;
            ModifyDate = data.ModifyDate;
            Modifier = data.Modifier;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(TeamContent data) {
            if ((TeamContentId != data.TeamContentId)) {
                return false;
            }
            if ((TeamId != data.TeamId)) {
                return false;
            }
            if ((ContentKey != data.ContentKey)) {
                return false;
            }
            if ((ContentValue != data.ContentValue)) {
                return false;
            }
            if ((ContentDataType != data.ContentDataType)) {
                return false;
            }
            if ((IsDeclare != data.IsDeclare)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((Modifier != data.Modifier)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.TeamContentBpl.Insert(((TeamContent)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.TeamContentBpl.Update(((TeamContent)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long teamContentId, Object metadata) {
            APBplDef.TeamContentBpl.UpdatePartial(teamContentId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long teamContentId) {
            APBplDef.TeamContentBpl.PrimaryDelete(teamContentId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.TeamContentBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.TeamContentBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static TeamContent PrimaryGet(long teamContentId) {
            return APBplDef.TeamContentBpl.PrimaryGet(teamContentId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.TeamContentBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.TeamContentBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamContent> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.TeamContentBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<TeamContent> GetAll() {
            return APBplDef.TeamContentBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 梯队-内容
    /// </summary>
    [Serializable()]
    public partial class TeamContent : TeamContentBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TeamContent() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TeamContent(long teamContentId, long teamId, string contentKey, string contentValue, string contentDataType, bool isDeclare, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) : 
                base(teamContentId, teamId, contentKey, contentValue, contentDataType, isDeclare, createDate, creator, modifyDate, modifier) {
        }
    }
    
    /// <summary>
    /// 梯队-活动 Base
    /// </summary>
    [Serializable()]
    public abstract partial class TeamActiveBase {
        
        /// <summary>
        /// TeamActiveId
        /// </summary>
        private long _teamActiveId;
        
        /// <summary>
        /// TeamId
        /// </summary>
        private long _teamId;
        
        /// <summary>
        /// Date
        /// </summary>
        private System.DateTime _date;
        
        /// <summary>
        /// Location
        /// </summary>
        private string _location = string.Empty;
        
        /// <summary>
        /// Title
        /// </summary>
        private string _title = string.Empty;
        
        /// <summary>
        /// PickList - TeamActiveType
        /// </summary>
        private long _activeType;
        
        /// <summary>
        /// ContentValue
        /// </summary>
        private string _contentValue = string.Empty;
        
        /// <summary>
        /// IsShow
        /// </summary>
        private bool _isShow;
        
        /// <summary>
        /// IsShare
        /// </summary>
        private bool _isShare;
        
        /// <summary>
        /// IsDeclare
        /// </summary>
        private bool _isDeclare;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.Nullable<System.DateTime> _modifyDate;
        
        /// <summary>
        /// Modifier
        /// </summary>
        private long _modifier;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TeamActiveBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TeamActiveBase(long teamActiveId, long teamId, System.DateTime date, string location, string title, long activeType, string contentValue, bool isShow, bool isShare, bool isDeclare, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) {
            _teamActiveId = teamActiveId;
            _teamId = teamId;
            _date = date;
            _location = location;
            _title = title;
            _activeType = activeType;
            _contentValue = contentValue;
            _isShow = isShow;
            _isShare = isShare;
            _isDeclare = isDeclare;
            _createDate = createDate;
            _creator = creator;
            _modifyDate = modifyDate;
            _modifier = modifier;
        }
        
        /// <summary>
        /// TeamActiveId
        /// </summary>
        [Display(Name="ID")]
        public virtual long TeamActiveId {
            get {
                return _teamActiveId;
            }
            set {
                _teamActiveId = value;
            }
        }
        
        /// <summary>
        /// TeamActiveId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeamActiveIdDef {
            get {
                return APDBDef.TeamActive.TeamActiveId;
            }
        }
        
        /// <summary>
        /// TeamId
        /// </summary>
        [Display(Name="梯队ID")]
        public virtual long TeamId {
            get {
                return _teamId;
            }
            set {
                _teamId = value;
            }
        }
        
        /// <summary>
        /// TeamId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeamIdDef {
            get {
                return APDBDef.TeamActive.TeamId;
            }
        }
        
        /// <summary>
        /// Date
        /// </summary>
        [Display(Name="时间")]
        [Required()]
        public virtual System.DateTime Date {
            get {
                return _date;
            }
            set {
                _date = value;
            }
        }
        
        /// <summary>
        /// Date APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef DateDef {
            get {
                return APDBDef.TeamActive.Date;
            }
        }
        
        /// <summary>
        /// Location
        /// </summary>
        [Display(Name="地点")]
        [Required()]
        [StringLength(100)]
        public virtual string Location {
            get {
                return _location;
            }
            set {
                _location = value;
            }
        }
        
        /// <summary>
        /// Location APColumnDef
        /// </summary>
        public static StringAPColumnDef LocationDef {
            get {
                return APDBDef.TeamActive.Location;
            }
        }
        
        /// <summary>
        /// Title
        /// </summary>
        [Display(Name="标题")]
        [Required()]
        [StringLength(100)]
        public virtual string Title {
            get {
                return _title;
            }
            set {
                _title = value;
            }
        }
        
        /// <summary>
        /// Title APColumnDef
        /// </summary>
        public static StringAPColumnDef TitleDef {
            get {
                return APDBDef.TeamActive.Title;
            }
        }
        
        /// <summary>
        /// PickList - TeamActiveType
        /// </summary>
        [Display(Name="类型")]
        public virtual long ActiveType {
            get {
                return _activeType;
            }
            set {
                _activeType = value;
            }
        }
        
        /// <summary>
        /// PickList - TeamActiveType APColumnDef
        /// </summary>
        public static Int64APColumnDef ActiveTypeDef {
            get {
                return APDBDef.TeamActive.ActiveType;
            }
        }
        
        /// <summary>
        /// ContentValue
        /// </summary>
        [Display(Name="内容")]
        [Required()]
        [StringLength(10000)]
        public virtual string ContentValue {
            get {
                return _contentValue;
            }
            set {
                _contentValue = value;
            }
        }
        
        /// <summary>
        /// ContentValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentValueDef {
            get {
                return APDBDef.TeamActive.ContentValue;
            }
        }
        
        /// <summary>
        /// IsShow
        /// </summary>
        [Display(Name="是否显示")]
        public virtual bool IsShow {
            get {
                return _isShow;
            }
            set {
                _isShow = value;
            }
        }
        
        /// <summary>
        /// IsShow APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsShowDef {
            get {
                return APDBDef.TeamActive.IsShow;
            }
        }
        
        /// <summary>
        /// IsShare
        /// </summary>
        [Display(Name="是否共享")]
        public virtual bool IsShare {
            get {
                return _isShare;
            }
            set {
                _isShare = value;
            }
        }
        
        /// <summary>
        /// IsShare APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsShareDef {
            get {
                return APDBDef.TeamActive.IsShare;
            }
        }
        
        /// <summary>
        /// IsDeclare
        /// </summary>
        [Display(Name="是否申报")]
        public virtual bool IsDeclare {
            get {
                return _isDeclare;
            }
            set {
                _isDeclare = value;
            }
        }
        
        /// <summary>
        /// IsDeclare APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsDeclareDef {
            get {
                return APDBDef.TeamActive.IsDeclare;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.TeamActive.CreateDate;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        [Display(Name="创建人")]
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.TeamActive.Creator;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="修改时间")]
        public virtual System.Nullable<System.DateTime> ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.TeamActive.ModifyDate;
            }
        }
        
        /// <summary>
        /// Modifier
        /// </summary>
        [Display(Name="修改人")]
        public virtual long Modifier {
            get {
                return _modifier;
            }
            set {
                _modifier = value;
            }
        }
        
        /// <summary>
        /// Modifier APColumnDef
        /// </summary>
        public static Int64APColumnDef ModifierDef {
            get {
                return APDBDef.TeamActive.Modifier;
            }
        }
        
        /// <summary>
        /// TeamActiveTableDef APTableDef
        /// </summary>
        public static APDBDef.TeamActiveTableDef TableDef {
            get {
                return APDBDef.TeamActive;
            }
        }
        
        /// <summary>
        /// TeamActiveTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.TeamActive.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(TeamActive data) {
            TeamActiveId = data.TeamActiveId;
            TeamId = data.TeamId;
            Date = data.Date;
            Location = data.Location;
            Title = data.Title;
            ActiveType = data.ActiveType;
            ContentValue = data.ContentValue;
            IsShow = data.IsShow;
            IsShare = data.IsShare;
            IsDeclare = data.IsDeclare;
            CreateDate = data.CreateDate;
            Creator = data.Creator;
            ModifyDate = data.ModifyDate;
            Modifier = data.Modifier;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(TeamActive data) {
            if ((TeamActiveId != data.TeamActiveId)) {
                return false;
            }
            if ((TeamId != data.TeamId)) {
                return false;
            }
            if ((Date != data.Date)) {
                return false;
            }
            if ((Location != data.Location)) {
                return false;
            }
            if ((Title != data.Title)) {
                return false;
            }
            if ((ActiveType != data.ActiveType)) {
                return false;
            }
            if ((ContentValue != data.ContentValue)) {
                return false;
            }
            if ((IsShow != data.IsShow)) {
                return false;
            }
            if ((IsShare != data.IsShare)) {
                return false;
            }
            if ((IsDeclare != data.IsDeclare)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((Modifier != data.Modifier)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.TeamActiveBpl.Insert(((TeamActive)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.TeamActiveBpl.Update(((TeamActive)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long teamActiveId, Object metadata) {
            APBplDef.TeamActiveBpl.UpdatePartial(teamActiveId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long teamActiveId) {
            APBplDef.TeamActiveBpl.PrimaryDelete(teamActiveId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.TeamActiveBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.TeamActiveBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static TeamActive PrimaryGet(long teamActiveId) {
            return APBplDef.TeamActiveBpl.PrimaryGet(teamActiveId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.TeamActiveBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.TeamActiveBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamActive> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.TeamActiveBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<TeamActive> GetAll() {
            return APBplDef.TeamActiveBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 梯队-活动
    /// </summary>
    [Serializable()]
    public partial class TeamActive : TeamActiveBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TeamActive() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TeamActive(long teamActiveId, long teamId, System.DateTime date, string location, string title, long activeType, string contentValue, bool isShow, bool isShare, bool isDeclare, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) : 
                base(teamActiveId, teamId, date, location, title, activeType, contentValue, isShow, isShare, isDeclare, createDate, creator, modifyDate, modifier) {
        }
    }
    
    /// <summary>
    /// 梯队-活动成果 Base
    /// </summary>
    [Serializable()]
    public abstract partial class TeamActiveResultBase {
        
        /// <summary>
        /// ResultId
        /// </summary>
        private long _resultId;
        
        /// <summary>
        /// ActiveId
        /// </summary>
        private long _activeId;
        
        /// <summary>
        /// MemberId
        /// </summary>
        private long _memberId;
        
        /// <summary>
        /// ActiveResult
        /// </summary>
        private string _activeResult = string.Empty;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.Nullable<System.DateTime> _modifyDate;
        
        /// <summary>
        /// Modifier
        /// </summary>
        private long _modifier;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TeamActiveResultBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TeamActiveResultBase(long resultId, long activeId, long memberId, string activeResult, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) {
            _resultId = resultId;
            _activeId = activeId;
            _memberId = memberId;
            _activeResult = activeResult;
            _createDate = createDate;
            _creator = creator;
            _modifyDate = modifyDate;
            _modifier = modifier;
        }
        
        /// <summary>
        /// ResultId
        /// </summary>
        [Display(Name="成果ID")]
        public virtual long ResultId {
            get {
                return _resultId;
            }
            set {
                _resultId = value;
            }
        }
        
        /// <summary>
        /// ResultId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResultIdDef {
            get {
                return APDBDef.TeamActiveResult.ResultId;
            }
        }
        
        /// <summary>
        /// ActiveId
        /// </summary>
        [Display(Name="活动ID")]
        public virtual long ActiveId {
            get {
                return _activeId;
            }
            set {
                _activeId = value;
            }
        }
        
        /// <summary>
        /// ActiveId APColumnDef
        /// </summary>
        public static Int64APColumnDef ActiveIdDef {
            get {
                return APDBDef.TeamActiveResult.ActiveId;
            }
        }
        
        /// <summary>
        /// MemberId
        /// </summary>
        [Display(Name="学员ID")]
        public virtual long MemberId {
            get {
                return _memberId;
            }
            set {
                _memberId = value;
            }
        }
        
        /// <summary>
        /// MemberId APColumnDef
        /// </summary>
        public static Int64APColumnDef MemberIdDef {
            get {
                return APDBDef.TeamActiveResult.MemberId;
            }
        }
        
        /// <summary>
        /// ActiveResult
        /// </summary>
        [Display(Name="学员的成果")]
        [StringLength(30000)]
        public virtual string ActiveResult {
            get {
                return _activeResult;
            }
            set {
                _activeResult = value;
            }
        }
        
        /// <summary>
        /// ActiveResult APColumnDef
        /// </summary>
        public static StringAPColumnDef ActiveResultDef {
            get {
                return APDBDef.TeamActiveResult.ActiveResult;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.TeamActiveResult.CreateDate;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        [Display(Name="创建人")]
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.TeamActiveResult.Creator;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="修改时间")]
        public virtual System.Nullable<System.DateTime> ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.TeamActiveResult.ModifyDate;
            }
        }
        
        /// <summary>
        /// Modifier
        /// </summary>
        [Display(Name="修改人")]
        public virtual long Modifier {
            get {
                return _modifier;
            }
            set {
                _modifier = value;
            }
        }
        
        /// <summary>
        /// Modifier APColumnDef
        /// </summary>
        public static Int64APColumnDef ModifierDef {
            get {
                return APDBDef.TeamActiveResult.Modifier;
            }
        }
        
        /// <summary>
        /// TeamActiveResultTableDef APTableDef
        /// </summary>
        public static APDBDef.TeamActiveResultTableDef TableDef {
            get {
                return APDBDef.TeamActiveResult;
            }
        }
        
        /// <summary>
        /// TeamActiveResultTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.TeamActiveResult.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(TeamActiveResult data) {
            ResultId = data.ResultId;
            ActiveId = data.ActiveId;
            MemberId = data.MemberId;
            ActiveResult = data.ActiveResult;
            CreateDate = data.CreateDate;
            Creator = data.Creator;
            ModifyDate = data.ModifyDate;
            Modifier = data.Modifier;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(TeamActiveResult data) {
            if ((ResultId != data.ResultId)) {
                return false;
            }
            if ((ActiveId != data.ActiveId)) {
                return false;
            }
            if ((MemberId != data.MemberId)) {
                return false;
            }
            if ((ActiveResult != data.ActiveResult)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((Modifier != data.Modifier)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.TeamActiveResultBpl.Insert(((TeamActiveResult)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.TeamActiveResultBpl.Update(((TeamActiveResult)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long resultId, Object metadata) {
            APBplDef.TeamActiveResultBpl.UpdatePartial(resultId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long resultId) {
            APBplDef.TeamActiveResultBpl.PrimaryDelete(resultId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.TeamActiveResultBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.TeamActiveResultBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static TeamActiveResult PrimaryGet(long resultId) {
            return APBplDef.TeamActiveResultBpl.PrimaryGet(resultId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamActiveResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.TeamActiveResultBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamActiveResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.TeamActiveResultBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamActiveResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.TeamActiveResultBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<TeamActiveResult> GetAll() {
            return APBplDef.TeamActiveResultBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 梯队-活动成果
    /// </summary>
    [Serializable()]
    public partial class TeamActiveResult : TeamActiveResultBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TeamActiveResult() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TeamActiveResult(long resultId, long activeId, long memberId, string activeResult, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) : 
                base(resultId, activeId, memberId, activeResult, createDate, creator, modifyDate, modifier) {
        }
    }
    
    /// <summary>
    /// 梯队-活动内容 Base
    /// </summary>
    [Serializable()]
    public abstract partial class TeamActiveItemBase {
        
        /// <summary>
        /// ItemId
        /// </summary>
        private long _itemId;
        
        /// <summary>
        /// ActiveId
        /// </summary>
        private long _activeId;
        
        /// <summary>
        /// MemberId
        /// </summary>
        private long _memberId;
        
        /// <summary>
        /// SendDate
        /// </summary>
        private System.DateTime _sendDate;
        
        /// <summary>
        /// ItemContent
        /// </summary>
        private string _itemContent = string.Empty;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.Nullable<System.DateTime> _modifyDate;
        
        /// <summary>
        /// Modifier
        /// </summary>
        private long _modifier;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TeamActiveItemBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TeamActiveItemBase(long itemId, long activeId, long memberId, System.DateTime sendDate, string itemContent, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) {
            _itemId = itemId;
            _activeId = activeId;
            _memberId = memberId;
            _sendDate = sendDate;
            _itemContent = itemContent;
            _createDate = createDate;
            _creator = creator;
            _modifyDate = modifyDate;
            _modifier = modifier;
        }
        
        /// <summary>
        /// ItemId
        /// </summary>
        [Display(Name="内容ID")]
        public virtual long ItemId {
            get {
                return _itemId;
            }
            set {
                _itemId = value;
            }
        }
        
        /// <summary>
        /// ItemId APColumnDef
        /// </summary>
        public static Int64APColumnDef ItemIdDef {
            get {
                return APDBDef.TeamActiveItem.ItemId;
            }
        }
        
        /// <summary>
        /// ActiveId
        /// </summary>
        [Display(Name="活动ID")]
        public virtual long ActiveId {
            get {
                return _activeId;
            }
            set {
                _activeId = value;
            }
        }
        
        /// <summary>
        /// ActiveId APColumnDef
        /// </summary>
        public static Int64APColumnDef ActiveIdDef {
            get {
                return APDBDef.TeamActiveItem.ActiveId;
            }
        }
        
        /// <summary>
        /// MemberId
        /// </summary>
        [Display(Name="学员ID")]
        public virtual long MemberId {
            get {
                return _memberId;
            }
            set {
                _memberId = value;
            }
        }
        
        /// <summary>
        /// MemberId APColumnDef
        /// </summary>
        public static Int64APColumnDef MemberIdDef {
            get {
                return APDBDef.TeamActiveItem.MemberId;
            }
        }
        
        /// <summary>
        /// SendDate
        /// </summary>
        [Display(Name="发布时间")]
        public virtual System.DateTime SendDate {
            get {
                return _sendDate;
            }
            set {
                _sendDate = value;
            }
        }
        
        /// <summary>
        /// SendDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef SendDateDef {
            get {
                return APDBDef.TeamActiveItem.SendDate;
            }
        }
        
        /// <summary>
        /// ItemContent
        /// </summary>
        [Display(Name="活动内容")]
        [StringLength(20000)]
        public virtual string ItemContent {
            get {
                return _itemContent;
            }
            set {
                _itemContent = value;
            }
        }
        
        /// <summary>
        /// ItemContent APColumnDef
        /// </summary>
        public static StringAPColumnDef ItemContentDef {
            get {
                return APDBDef.TeamActiveItem.ItemContent;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.TeamActiveItem.CreateDate;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        [Display(Name="创建人")]
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.TeamActiveItem.Creator;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="修改时间")]
        public virtual System.Nullable<System.DateTime> ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.TeamActiveItem.ModifyDate;
            }
        }
        
        /// <summary>
        /// Modifier
        /// </summary>
        [Display(Name="修改人")]
        public virtual long Modifier {
            get {
                return _modifier;
            }
            set {
                _modifier = value;
            }
        }
        
        /// <summary>
        /// Modifier APColumnDef
        /// </summary>
        public static Int64APColumnDef ModifierDef {
            get {
                return APDBDef.TeamActiveItem.Modifier;
            }
        }
        
        /// <summary>
        /// TeamActiveItemTableDef APTableDef
        /// </summary>
        public static APDBDef.TeamActiveItemTableDef TableDef {
            get {
                return APDBDef.TeamActiveItem;
            }
        }
        
        /// <summary>
        /// TeamActiveItemTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.TeamActiveItem.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(TeamActiveItem data) {
            ItemId = data.ItemId;
            ActiveId = data.ActiveId;
            MemberId = data.MemberId;
            SendDate = data.SendDate;
            ItemContent = data.ItemContent;
            CreateDate = data.CreateDate;
            Creator = data.Creator;
            ModifyDate = data.ModifyDate;
            Modifier = data.Modifier;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(TeamActiveItem data) {
            if ((ItemId != data.ItemId)) {
                return false;
            }
            if ((ActiveId != data.ActiveId)) {
                return false;
            }
            if ((MemberId != data.MemberId)) {
                return false;
            }
            if ((SendDate != data.SendDate)) {
                return false;
            }
            if ((ItemContent != data.ItemContent)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((Modifier != data.Modifier)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.TeamActiveItemBpl.Insert(((TeamActiveItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.TeamActiveItemBpl.Update(((TeamActiveItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long itemId, Object metadata) {
            APBplDef.TeamActiveItemBpl.UpdatePartial(itemId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long itemId) {
            APBplDef.TeamActiveItemBpl.PrimaryDelete(itemId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.TeamActiveItemBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.TeamActiveItemBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static TeamActiveItem PrimaryGet(long itemId) {
            return APBplDef.TeamActiveItemBpl.PrimaryGet(itemId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamActiveItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.TeamActiveItemBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamActiveItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.TeamActiveItemBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamActiveItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.TeamActiveItemBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<TeamActiveItem> GetAll() {
            return APBplDef.TeamActiveItemBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 梯队-活动内容
    /// </summary>
    [Serializable()]
    public partial class TeamActiveItem : TeamActiveItemBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TeamActiveItem() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TeamActiveItem(long itemId, long activeId, long memberId, System.DateTime sendDate, string itemContent, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) : 
                base(itemId, activeId, memberId, sendDate, itemContent, createDate, creator, modifyDate, modifier) {
        }
    }
    
    /// <summary>
    /// 梯队-定向性课程开设登记表 Base
    /// </summary>
    [Serializable()]
    public abstract partial class TeamSpecialCourseBase {
        
        /// <summary>
        /// CourseId
        /// </summary>
        private long _courseId;
        
        /// <summary>
        /// TeamId
        /// </summary>
        private long _teamId;
        
        /// <summary>
        /// Title
        /// </summary>
        private string _title = string.Empty;
        
        /// <summary>
        /// StartDate
        /// </summary>
        private System.DateTime _startDate;
        
        /// <summary>
        /// EndDate
        /// </summary>
        private System.DateTime _endDate;
        
        /// <summary>
        /// CourseTarget
        /// </summary>
        private string _courseTarget = string.Empty;
        
        /// <summary>
        /// CoursePlan
        /// </summary>
        private string _coursePlan = string.Empty;
        
        /// <summary>
        /// CourseRecords
        /// </summary>
        private string _courseRecords = string.Empty;
        
        /// <summary>
        /// CourseResults
        /// </summary>
        private string _courseResults = string.Empty;
        
        /// <summary>
        /// CourseSummary
        /// </summary>
        private string _courseSummary = string.Empty;
        
        /// <summary>
        /// Remark
        /// </summary>
        private string _remark = string.Empty;
        
        /// <summary>
        /// TotalCount
        /// </summary>
        private int _totalCount;
        
        /// <summary>
        /// MemberCount
        /// </summary>
        private int _memberCount;
        
        /// <summary>
        /// MemberRecord
        /// </summary>
        private string _memberRecord = string.Empty;
        
        /// <summary>
        /// IsDeclare
        /// </summary>
        private bool _isDeclare;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.Nullable<System.DateTime> _modifyDate;
        
        /// <summary>
        /// Modifier
        /// </summary>
        private long _modifier;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TeamSpecialCourseBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TeamSpecialCourseBase(
                    long courseId, 
                    long teamId, 
                    string title, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    string courseTarget, 
                    string coursePlan, 
                    string courseRecords, 
                    string courseResults, 
                    string courseSummary, 
                    string remark, 
                    int totalCount, 
                    int memberCount, 
                    string memberRecord, 
                    bool isDeclare, 
                    System.DateTime createDate, 
                    long creator, 
                    System.Nullable<System.DateTime> modifyDate, 
                    long modifier) {
            _courseId = courseId;
            _teamId = teamId;
            _title = title;
            _startDate = startDate;
            _endDate = endDate;
            _courseTarget = courseTarget;
            _coursePlan = coursePlan;
            _courseRecords = courseRecords;
            _courseResults = courseResults;
            _courseSummary = courseSummary;
            _remark = remark;
            _totalCount = totalCount;
            _memberCount = memberCount;
            _memberRecord = memberRecord;
            _isDeclare = isDeclare;
            _createDate = createDate;
            _creator = creator;
            _modifyDate = modifyDate;
            _modifier = modifier;
        }
        
        /// <summary>
        /// CourseId
        /// </summary>
        [Display(Name="课程ID")]
        public virtual long CourseId {
            get {
                return _courseId;
            }
            set {
                _courseId = value;
            }
        }
        
        /// <summary>
        /// CourseId APColumnDef
        /// </summary>
        public static Int64APColumnDef CourseIdDef {
            get {
                return APDBDef.TeamSpecialCourse.CourseId;
            }
        }
        
        /// <summary>
        /// TeamId
        /// </summary>
        [Display(Name="梯队ID")]
        public virtual long TeamId {
            get {
                return _teamId;
            }
            set {
                _teamId = value;
            }
        }
        
        /// <summary>
        /// TeamId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeamIdDef {
            get {
                return APDBDef.TeamSpecialCourse.TeamId;
            }
        }
        
        /// <summary>
        /// Title
        /// </summary>
        [Display(Name="课程主题")]
        [Required()]
        [StringLength(255)]
        public virtual string Title {
            get {
                return _title;
            }
            set {
                _title = value;
            }
        }
        
        /// <summary>
        /// Title APColumnDef
        /// </summary>
        public static StringAPColumnDef TitleDef {
            get {
                return APDBDef.TeamSpecialCourse.Title;
            }
        }
        
        /// <summary>
        /// StartDate
        /// </summary>
        [Display(Name="课程开设开始时段")]
        public virtual System.DateTime StartDate {
            get {
                return _startDate;
            }
            set {
                _startDate = value;
            }
        }
        
        /// <summary>
        /// StartDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef StartDateDef {
            get {
                return APDBDef.TeamSpecialCourse.StartDate;
            }
        }
        
        /// <summary>
        /// EndDate
        /// </summary>
        [Display(Name="课程开设结束时段")]
        public virtual System.DateTime EndDate {
            get {
                return _endDate;
            }
            set {
                _endDate = value;
            }
        }
        
        /// <summary>
        /// EndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef EndDateDef {
            get {
                return APDBDef.TeamSpecialCourse.EndDate;
            }
        }
        
        /// <summary>
        /// CourseTarget
        /// </summary>
        [Display(Name="课程目标")]
        [StringLength(2000)]
        public virtual string CourseTarget {
            get {
                return _courseTarget;
            }
            set {
                _courseTarget = value;
            }
        }
        
        /// <summary>
        /// CourseTarget APColumnDef
        /// </summary>
        public static StringAPColumnDef CourseTargetDef {
            get {
                return APDBDef.TeamSpecialCourse.CourseTarget;
            }
        }
        
        /// <summary>
        /// CoursePlan
        /// </summary>
        [Display(Name="活动方案")]
        [StringLength(20000)]
        public virtual string CoursePlan {
            get {
                return _coursePlan;
            }
            set {
                _coursePlan = value;
            }
        }
        
        /// <summary>
        /// CoursePlan APColumnDef
        /// </summary>
        public static StringAPColumnDef CoursePlanDef {
            get {
                return APDBDef.TeamSpecialCourse.CoursePlan;
            }
        }
        
        /// <summary>
        /// CourseRecords
        /// </summary>
        [Display(Name="过程记录")]
        [StringLength(20000)]
        public virtual string CourseRecords {
            get {
                return _courseRecords;
            }
            set {
                _courseRecords = value;
            }
        }
        
        /// <summary>
        /// CourseRecords APColumnDef
        /// </summary>
        public static StringAPColumnDef CourseRecordsDef {
            get {
                return APDBDef.TeamSpecialCourse.CourseRecords;
            }
        }
        
        /// <summary>
        /// CourseResults
        /// </summary>
        [Display(Name="活动效果")]
        [StringLength(30000)]
        public virtual string CourseResults {
            get {
                return _courseResults;
            }
            set {
                _courseResults = value;
            }
        }
        
        /// <summary>
        /// CourseResults APColumnDef
        /// </summary>
        public static StringAPColumnDef CourseResultsDef {
            get {
                return APDBDef.TeamSpecialCourse.CourseResults;
            }
        }
        
        /// <summary>
        /// CourseSummary
        /// </summary>
        [Display(Name="活动总结")]
        [StringLength(30000)]
        public virtual string CourseSummary {
            get {
                return _courseSummary;
            }
            set {
                _courseSummary = value;
            }
        }
        
        /// <summary>
        /// CourseSummary APColumnDef
        /// </summary>
        public static StringAPColumnDef CourseSummaryDef {
            get {
                return APDBDef.TeamSpecialCourse.CourseSummary;
            }
        }
        
        /// <summary>
        /// Remark
        /// </summary>
        [Display(Name="备注")]
        [StringLength(2000)]
        public virtual string Remark {
            get {
                return _remark;
            }
            set {
                _remark = value;
            }
        }
        
        /// <summary>
        /// Remark APColumnDef
        /// </summary>
        public static StringAPColumnDef RemarkDef {
            get {
                return APDBDef.TeamSpecialCourse.Remark;
            }
        }
        
        /// <summary>
        /// TotalCount
        /// </summary>
        [Display(Name="参加总人数")]
        public virtual int TotalCount {
            get {
                return _totalCount;
            }
            set {
                _totalCount = value;
            }
        }
        
        /// <summary>
        /// TotalCount APColumnDef
        /// </summary>
        public static Int32APColumnDef TotalCountDef {
            get {
                return APDBDef.TeamSpecialCourse.TotalCount;
            }
        }
        
        /// <summary>
        /// MemberCount
        /// </summary>
        [Display(Name="团队学员数")]
        public virtual int MemberCount {
            get {
                return _memberCount;
            }
            set {
                _memberCount = value;
            }
        }
        
        /// <summary>
        /// MemberCount APColumnDef
        /// </summary>
        public static Int32APColumnDef MemberCountDef {
            get {
                return APDBDef.TeamSpecialCourse.MemberCount;
            }
        }
        
        /// <summary>
        /// MemberRecord
        /// </summary>
        [Display(Name="非团队成员参加对象（若有至少需写出1—5人姓名/单位）")]
        [StringLength(100)]
        public virtual string MemberRecord {
            get {
                return _memberRecord;
            }
            set {
                _memberRecord = value;
            }
        }
        
        /// <summary>
        /// MemberRecord APColumnDef
        /// </summary>
        public static StringAPColumnDef MemberRecordDef {
            get {
                return APDBDef.TeamSpecialCourse.MemberRecord;
            }
        }
        
        /// <summary>
        /// IsDeclare
        /// </summary>
        [Display(Name="是否申报")]
        public virtual bool IsDeclare {
            get {
                return _isDeclare;
            }
            set {
                _isDeclare = value;
            }
        }
        
        /// <summary>
        /// IsDeclare APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsDeclareDef {
            get {
                return APDBDef.TeamSpecialCourse.IsDeclare;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.TeamSpecialCourse.CreateDate;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        [Display(Name="创建人")]
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.TeamSpecialCourse.Creator;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="修改时间")]
        public virtual System.Nullable<System.DateTime> ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.TeamSpecialCourse.ModifyDate;
            }
        }
        
        /// <summary>
        /// Modifier
        /// </summary>
        [Display(Name="修改人")]
        public virtual long Modifier {
            get {
                return _modifier;
            }
            set {
                _modifier = value;
            }
        }
        
        /// <summary>
        /// Modifier APColumnDef
        /// </summary>
        public static Int64APColumnDef ModifierDef {
            get {
                return APDBDef.TeamSpecialCourse.Modifier;
            }
        }
        
        /// <summary>
        /// TeamSpecialCourseTableDef APTableDef
        /// </summary>
        public static APDBDef.TeamSpecialCourseTableDef TableDef {
            get {
                return APDBDef.TeamSpecialCourse;
            }
        }
        
        /// <summary>
        /// TeamSpecialCourseTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.TeamSpecialCourse.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(TeamSpecialCourse data) {
            CourseId = data.CourseId;
            TeamId = data.TeamId;
            Title = data.Title;
            StartDate = data.StartDate;
            EndDate = data.EndDate;
            CourseTarget = data.CourseTarget;
            CoursePlan = data.CoursePlan;
            CourseRecords = data.CourseRecords;
            CourseResults = data.CourseResults;
            CourseSummary = data.CourseSummary;
            Remark = data.Remark;
            TotalCount = data.TotalCount;
            MemberCount = data.MemberCount;
            MemberRecord = data.MemberRecord;
            IsDeclare = data.IsDeclare;
            CreateDate = data.CreateDate;
            Creator = data.Creator;
            ModifyDate = data.ModifyDate;
            Modifier = data.Modifier;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(TeamSpecialCourse data) {
            if ((CourseId != data.CourseId)) {
                return false;
            }
            if ((TeamId != data.TeamId)) {
                return false;
            }
            if ((Title != data.Title)) {
                return false;
            }
            if ((StartDate != data.StartDate)) {
                return false;
            }
            if ((EndDate != data.EndDate)) {
                return false;
            }
            if ((CourseTarget != data.CourseTarget)) {
                return false;
            }
            if ((CoursePlan != data.CoursePlan)) {
                return false;
            }
            if ((CourseRecords != data.CourseRecords)) {
                return false;
            }
            if ((CourseResults != data.CourseResults)) {
                return false;
            }
            if ((CourseSummary != data.CourseSummary)) {
                return false;
            }
            if ((Remark != data.Remark)) {
                return false;
            }
            if ((TotalCount != data.TotalCount)) {
                return false;
            }
            if ((MemberCount != data.MemberCount)) {
                return false;
            }
            if ((MemberRecord != data.MemberRecord)) {
                return false;
            }
            if ((IsDeclare != data.IsDeclare)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((Modifier != data.Modifier)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.TeamSpecialCourseBpl.Insert(((TeamSpecialCourse)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.TeamSpecialCourseBpl.Update(((TeamSpecialCourse)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long courseId, Object metadata) {
            APBplDef.TeamSpecialCourseBpl.UpdatePartial(courseId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long courseId) {
            APBplDef.TeamSpecialCourseBpl.PrimaryDelete(courseId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.TeamSpecialCourseBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.TeamSpecialCourseBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static TeamSpecialCourse PrimaryGet(long courseId) {
            return APBplDef.TeamSpecialCourseBpl.PrimaryGet(courseId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamSpecialCourse> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.TeamSpecialCourseBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamSpecialCourse> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.TeamSpecialCourseBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamSpecialCourse> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.TeamSpecialCourseBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<TeamSpecialCourse> GetAll() {
            return APBplDef.TeamSpecialCourseBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 梯队-定向性课程开设登记表
    /// </summary>
    [Serializable()]
    public partial class TeamSpecialCourse : TeamSpecialCourseBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TeamSpecialCourse() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TeamSpecialCourse(
                    long courseId, 
                    long teamId, 
                    string title, 
                    System.DateTime startDate, 
                    System.DateTime endDate, 
                    string courseTarget, 
                    string coursePlan, 
                    string courseRecords, 
                    string courseResults, 
                    string courseSummary, 
                    string remark, 
                    int totalCount, 
                    int memberCount, 
                    string memberRecord, 
                    bool isDeclare, 
                    System.DateTime createDate, 
                    long creator, 
                    System.Nullable<System.DateTime> modifyDate, 
                    long modifier) : 
                base(courseId, teamId, title, startDate, endDate, courseTarget, coursePlan, courseRecords, courseResults, courseSummary, remark, totalCount, memberCount, memberRecord, isDeclare, createDate, creator, modifyDate, modifier) {
        }
    }
    
    /// <summary>
    /// 梯队-定向性课程实施安排表 Base
    /// </summary>
    [Serializable()]
    public abstract partial class TeamSpecialCourseItemBase {
        
        /// <summary>
        /// ItemId
        /// </summary>
        private long _itemId;
        
        /// <summary>
        /// 课程Id
        /// </summary>
        private long _courseId;
        
        /// <summary>
        /// TeamId
        /// </summary>
        private long _teamId;
        
        /// <summary>
        /// ItemDate
        /// </summary>
        private System.DateTime _itemDate;
        
        /// <summary>
        /// Location
        /// </summary>
        private string _location = string.Empty;
        
        /// <summary>
        /// Title
        /// </summary>
        private string _title = string.Empty;
        
        /// <summary>
        /// Content
        /// </summary>
        private string _content = string.Empty;
        
        /// <summary>
        /// ActivityType
        /// </summary>
        private string _activityType = string.Empty;
        
        /// <summary>
        /// Speaker
        /// </summary>
        private string _speaker = string.Empty;
        
        /// <summary>
        /// Remark
        /// </summary>
        private string _remark = string.Empty;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.Nullable<System.DateTime> _modifyDate;
        
        /// <summary>
        /// Modifier
        /// </summary>
        private long _modifier;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TeamSpecialCourseItemBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TeamSpecialCourseItemBase(long itemId, long courseId, long teamId, System.DateTime itemDate, string location, string title, string content, string activityType, string speaker, string remark, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) {
            _itemId = itemId;
            _courseId = courseId;
            _teamId = teamId;
            _itemDate = itemDate;
            _location = location;
            _title = title;
            _content = content;
            _activityType = activityType;
            _speaker = speaker;
            _remark = remark;
            _createDate = createDate;
            _creator = creator;
            _modifyDate = modifyDate;
            _modifier = modifier;
        }
        
        /// <summary>
        /// ItemId
        /// </summary>
        [Display(Name="项目ID")]
        public virtual long ItemId {
            get {
                return _itemId;
            }
            set {
                _itemId = value;
            }
        }
        
        /// <summary>
        /// ItemId APColumnDef
        /// </summary>
        public static Int64APColumnDef ItemIdDef {
            get {
                return APDBDef.TeamSpecialCourseItem.ItemId;
            }
        }
        
        /// <summary>
        /// 课程Id
        /// </summary>
        [Display(Name="ID")]
        public virtual long CourseId {
            get {
                return _courseId;
            }
            set {
                _courseId = value;
            }
        }
        
        /// <summary>
        /// 课程Id APColumnDef
        /// </summary>
        public static Int64APColumnDef CourseIdDef {
            get {
                return APDBDef.TeamSpecialCourseItem.CourseId;
            }
        }
        
        /// <summary>
        /// TeamId
        /// </summary>
        [Display(Name="梯队ID")]
        public virtual long TeamId {
            get {
                return _teamId;
            }
            set {
                _teamId = value;
            }
        }
        
        /// <summary>
        /// TeamId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeamIdDef {
            get {
                return APDBDef.TeamSpecialCourseItem.TeamId;
            }
        }
        
        /// <summary>
        /// ItemDate
        /// </summary>
        [Display(Name="具体时间")]
        public virtual System.DateTime ItemDate {
            get {
                return _itemDate;
            }
            set {
                _itemDate = value;
            }
        }
        
        /// <summary>
        /// ItemDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ItemDateDef {
            get {
                return APDBDef.TeamSpecialCourseItem.ItemDate;
            }
        }
        
        /// <summary>
        /// Location
        /// </summary>
        [Display(Name="地点")]
        [StringLength(255)]
        public virtual string Location {
            get {
                return _location;
            }
            set {
                _location = value;
            }
        }
        
        /// <summary>
        /// Location APColumnDef
        /// </summary>
        public static StringAPColumnDef LocationDef {
            get {
                return APDBDef.TeamSpecialCourseItem.Location;
            }
        }
        
        /// <summary>
        /// Title
        /// </summary>
        [Display(Name="专题")]
        [Required()]
        [StringLength(255)]
        public virtual string Title {
            get {
                return _title;
            }
            set {
                _title = value;
            }
        }
        
        /// <summary>
        /// Title APColumnDef
        /// </summary>
        public static StringAPColumnDef TitleDef {
            get {
                return APDBDef.TeamSpecialCourseItem.Title;
            }
        }
        
        /// <summary>
        /// Content
        /// </summary>
        [Display(Name="内容")]
        [StringLength(20000)]
        public virtual string Content {
            get {
                return _content;
            }
            set {
                _content = value;
            }
        }
        
        /// <summary>
        /// Content APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentDef {
            get {
                return APDBDef.TeamSpecialCourseItem.Content;
            }
        }
        
        /// <summary>
        /// ActivityType
        /// </summary>
        [Display(Name="活动形式")]
        [StringLength(255)]
        public virtual string ActivityType {
            get {
                return _activityType;
            }
            set {
                _activityType = value;
            }
        }
        
        /// <summary>
        /// ActivityType APColumnDef
        /// </summary>
        public static StringAPColumnDef ActivityTypeDef {
            get {
                return APDBDef.TeamSpecialCourseItem.ActivityType;
            }
        }
        
        /// <summary>
        /// Speaker
        /// </summary>
        [Display(Name="主讲人")]
        [StringLength(255)]
        public virtual string Speaker {
            get {
                return _speaker;
            }
            set {
                _speaker = value;
            }
        }
        
        /// <summary>
        /// Speaker APColumnDef
        /// </summary>
        public static StringAPColumnDef SpeakerDef {
            get {
                return APDBDef.TeamSpecialCourseItem.Speaker;
            }
        }
        
        /// <summary>
        /// Remark
        /// </summary>
        [Display(Name="备注")]
        [StringLength(255)]
        public virtual string Remark {
            get {
                return _remark;
            }
            set {
                _remark = value;
            }
        }
        
        /// <summary>
        /// Remark APColumnDef
        /// </summary>
        public static StringAPColumnDef RemarkDef {
            get {
                return APDBDef.TeamSpecialCourseItem.Remark;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.TeamSpecialCourseItem.CreateDate;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        [Display(Name="创建人")]
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.TeamSpecialCourseItem.Creator;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="修改时间")]
        public virtual System.Nullable<System.DateTime> ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.TeamSpecialCourseItem.ModifyDate;
            }
        }
        
        /// <summary>
        /// Modifier
        /// </summary>
        [Display(Name="修改人")]
        public virtual long Modifier {
            get {
                return _modifier;
            }
            set {
                _modifier = value;
            }
        }
        
        /// <summary>
        /// Modifier APColumnDef
        /// </summary>
        public static Int64APColumnDef ModifierDef {
            get {
                return APDBDef.TeamSpecialCourseItem.Modifier;
            }
        }
        
        /// <summary>
        /// TeamSpecialCourseItemTableDef APTableDef
        /// </summary>
        public static APDBDef.TeamSpecialCourseItemTableDef TableDef {
            get {
                return APDBDef.TeamSpecialCourseItem;
            }
        }
        
        /// <summary>
        /// TeamSpecialCourseItemTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.TeamSpecialCourseItem.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(TeamSpecialCourseItem data) {
            ItemId = data.ItemId;
            CourseId = data.CourseId;
            TeamId = data.TeamId;
            ItemDate = data.ItemDate;
            Location = data.Location;
            Title = data.Title;
            Content = data.Content;
            ActivityType = data.ActivityType;
            Speaker = data.Speaker;
            Remark = data.Remark;
            CreateDate = data.CreateDate;
            Creator = data.Creator;
            ModifyDate = data.ModifyDate;
            Modifier = data.Modifier;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(TeamSpecialCourseItem data) {
            if ((ItemId != data.ItemId)) {
                return false;
            }
            if ((CourseId != data.CourseId)) {
                return false;
            }
            if ((TeamId != data.TeamId)) {
                return false;
            }
            if ((ItemDate != data.ItemDate)) {
                return false;
            }
            if ((Location != data.Location)) {
                return false;
            }
            if ((Title != data.Title)) {
                return false;
            }
            if ((Content != data.Content)) {
                return false;
            }
            if ((ActivityType != data.ActivityType)) {
                return false;
            }
            if ((Speaker != data.Speaker)) {
                return false;
            }
            if ((Remark != data.Remark)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((Modifier != data.Modifier)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.TeamSpecialCourseItemBpl.Insert(((TeamSpecialCourseItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.TeamSpecialCourseItemBpl.Update(((TeamSpecialCourseItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long itemId, Object metadata) {
            APBplDef.TeamSpecialCourseItemBpl.UpdatePartial(itemId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long itemId) {
            APBplDef.TeamSpecialCourseItemBpl.PrimaryDelete(itemId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.TeamSpecialCourseItemBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.TeamSpecialCourseItemBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static TeamSpecialCourseItem PrimaryGet(long itemId) {
            return APBplDef.TeamSpecialCourseItemBpl.PrimaryGet(itemId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamSpecialCourseItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.TeamSpecialCourseItemBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamSpecialCourseItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.TeamSpecialCourseItemBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<TeamSpecialCourseItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.TeamSpecialCourseItemBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<TeamSpecialCourseItem> GetAll() {
            return APBplDef.TeamSpecialCourseItemBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 梯队-定向性课程实施安排表
    /// </summary>
    [Serializable()]
    public partial class TeamSpecialCourseItem : TeamSpecialCourseItemBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public TeamSpecialCourseItem() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public TeamSpecialCourseItem(long itemId, long courseId, long teamId, System.DateTime itemDate, string location, string title, string content, string activityType, string speaker, string remark, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) : 
                base(itemId, courseId, teamId, itemDate, location, title, content, activityType, speaker, remark, createDate, creator, modifyDate, modifier) {
        }
    }
    
    /// <summary>
    /// 专家组 Base
    /// </summary>
    [Serializable()]
    public abstract partial class ExpGroupBase {
        
        /// <summary>
        /// GroupId
        /// </summary>
        private long _groupId;
        
        /// <summary>
        /// Name
        /// </summary>
        private string _name = string.Empty;
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        private long _declareTargetPKID;
        
        /// <summary>
        /// PickList - PLKey_DeclareSubject
        /// </summary>
        private long _declareSubjectPKID;
        
        /// <summary>
        /// PickList - PLKey_DeclareStage
        /// </summary>
        private long _declareStagePKID;
        
        /// <summary>
        /// 冗余字段
        /// </summary>
        private int _memberCount;
        
        /// <summary>
        /// 冗余字段
        /// </summary>
        private int _teacherCount;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.Nullable<System.DateTime> _modifyDate;
        
        /// <summary>
        /// Modifier
        /// </summary>
        private long _modifier;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ExpGroupBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ExpGroupBase(long groupId, string name, long declareTargetPKID, long declareSubjectPKID, long declareStagePKID, int memberCount, int teacherCount, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) {
            _groupId = groupId;
            _name = name;
            _declareTargetPKID = declareTargetPKID;
            _declareSubjectPKID = declareSubjectPKID;
            _declareStagePKID = declareStagePKID;
            _memberCount = memberCount;
            _teacherCount = teacherCount;
            _createDate = createDate;
            _creator = creator;
            _modifyDate = modifyDate;
            _modifier = modifier;
        }
        
        /// <summary>
        /// GroupId
        /// </summary>
        [Display(Name="专家组ID")]
        public virtual long GroupId {
            get {
                return _groupId;
            }
            set {
                _groupId = value;
            }
        }
        
        /// <summary>
        /// GroupId APColumnDef
        /// </summary>
        public static Int64APColumnDef GroupIdDef {
            get {
                return APDBDef.ExpGroup.GroupId;
            }
        }
        
        /// <summary>
        /// Name
        /// </summary>
        [Display(Name="专家组名称")]
        [Required()]
        [StringLength(40)]
        public virtual string Name {
            get {
                return _name;
            }
            set {
                _name = value;
            }
        }
        
        /// <summary>
        /// Name APColumnDef
        /// </summary>
        public static StringAPColumnDef NameDef {
            get {
                return APDBDef.ExpGroup.Name;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        [Display(Name="申报（担任）称号")]
        public virtual long DeclareTargetPKID {
            get {
                return _declareTargetPKID;
            }
            set {
                _declareTargetPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareTargetPKIDDef {
            get {
                return APDBDef.ExpGroup.DeclareTargetPKID;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareSubject
        /// </summary>
        [Display(Name="申报学科")]
        public virtual long DeclareSubjectPKID {
            get {
                return _declareSubjectPKID;
            }
            set {
                _declareSubjectPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareSubject APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareSubjectPKIDDef {
            get {
                return APDBDef.ExpGroup.DeclareSubjectPKID;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareStage
        /// </summary>
        [Display(Name="申报学段")]
        public virtual long DeclareStagePKID {
            get {
                return _declareStagePKID;
            }
            set {
                _declareStagePKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareStage APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareStagePKIDDef {
            get {
                return APDBDef.ExpGroup.DeclareStagePKID;
            }
        }
        
        /// <summary>
        /// 冗余字段
        /// </summary>
        [Display(Name="专家数量")]
        public virtual int MemberCount {
            get {
                return _memberCount;
            }
            set {
                _memberCount = value;
            }
        }
        
        /// <summary>
        /// 冗余字段 APColumnDef
        /// </summary>
        public static Int32APColumnDef MemberCountDef {
            get {
                return APDBDef.ExpGroup.MemberCount;
            }
        }
        
        /// <summary>
        /// 冗余字段
        /// </summary>
        [Display(Name="学员数量")]
        public virtual int TeacherCount {
            get {
                return _teacherCount;
            }
            set {
                _teacherCount = value;
            }
        }
        
        /// <summary>
        /// 冗余字段 APColumnDef
        /// </summary>
        public static Int32APColumnDef TeacherCountDef {
            get {
                return APDBDef.ExpGroup.TeacherCount;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.ExpGroup.CreateDate;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        [Display(Name="创建人")]
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.ExpGroup.Creator;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="修改时间")]
        public virtual System.Nullable<System.DateTime> ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.ExpGroup.ModifyDate;
            }
        }
        
        /// <summary>
        /// Modifier
        /// </summary>
        [Display(Name="修改人")]
        public virtual long Modifier {
            get {
                return _modifier;
            }
            set {
                _modifier = value;
            }
        }
        
        /// <summary>
        /// Modifier APColumnDef
        /// </summary>
        public static Int64APColumnDef ModifierDef {
            get {
                return APDBDef.ExpGroup.Modifier;
            }
        }
        
        /// <summary>
        /// ExpGroupTableDef APTableDef
        /// </summary>
        public static APDBDef.ExpGroupTableDef TableDef {
            get {
                return APDBDef.ExpGroup;
            }
        }
        
        /// <summary>
        /// ExpGroupTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.ExpGroup.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(ExpGroup data) {
            GroupId = data.GroupId;
            Name = data.Name;
            DeclareTargetPKID = data.DeclareTargetPKID;
            DeclareSubjectPKID = data.DeclareSubjectPKID;
            DeclareStagePKID = data.DeclareStagePKID;
            MemberCount = data.MemberCount;
            TeacherCount = data.TeacherCount;
            CreateDate = data.CreateDate;
            Creator = data.Creator;
            ModifyDate = data.ModifyDate;
            Modifier = data.Modifier;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(ExpGroup data) {
            if ((GroupId != data.GroupId)) {
                return false;
            }
            if ((Name != data.Name)) {
                return false;
            }
            if ((DeclareTargetPKID != data.DeclareTargetPKID)) {
                return false;
            }
            if ((DeclareSubjectPKID != data.DeclareSubjectPKID)) {
                return false;
            }
            if ((DeclareStagePKID != data.DeclareStagePKID)) {
                return false;
            }
            if ((MemberCount != data.MemberCount)) {
                return false;
            }
            if ((TeacherCount != data.TeacherCount)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((Modifier != data.Modifier)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ExpGroupBpl.Insert(((ExpGroup)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ExpGroupBpl.Update(((ExpGroup)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long groupId, Object metadata) {
            APBplDef.ExpGroupBpl.UpdatePartial(groupId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long groupId) {
            APBplDef.ExpGroupBpl.PrimaryDelete(groupId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ExpGroupBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ExpGroupBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static ExpGroup PrimaryGet(long groupId) {
            return APBplDef.ExpGroupBpl.PrimaryGet(groupId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ExpGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ExpGroupBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ExpGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ExpGroupBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ExpGroup> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ExpGroupBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<ExpGroup> GetAll() {
            return APBplDef.ExpGroupBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 专家组
    /// </summary>
    [Serializable()]
    public partial class ExpGroup : ExpGroupBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ExpGroup() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ExpGroup(long groupId, string name, long declareTargetPKID, long declareSubjectPKID, long declareStagePKID, int memberCount, int teacherCount, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) : 
                base(groupId, name, declareTargetPKID, declareSubjectPKID, declareStagePKID, memberCount, teacherCount, createDate, creator, modifyDate, modifier) {
        }
    }
    
    /// <summary>
    /// 专家组成员 Base
    /// </summary>
    [Serializable()]
    public abstract partial class ExpGroupMemberBase {
        
        /// <summary>
        /// GroupMemberId
        /// </summary>
        private long _groupMemberId;
        
        /// <summary>
        /// 专家组ID
        /// </summary>
        private long _groupId;
        
        /// <summary>
        /// 专家ID
        /// </summary>
        private long _expectID;
        
        /// <summary>
        /// IsLeader
        /// </summary>
        private bool _isLeader;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ExpGroupMemberBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ExpGroupMemberBase(long groupMemberId, long groupId, long expectID, bool isLeader) {
            _groupMemberId = groupMemberId;
            _groupId = groupId;
            _expectID = expectID;
            _isLeader = isLeader;
        }
        
        /// <summary>
        /// GroupMemberId
        /// </summary>
        [Display(Name="专家组成员ID")]
        public virtual long GroupMemberId {
            get {
                return _groupMemberId;
            }
            set {
                _groupMemberId = value;
            }
        }
        
        /// <summary>
        /// GroupMemberId APColumnDef
        /// </summary>
        public static Int64APColumnDef GroupMemberIdDef {
            get {
                return APDBDef.ExpGroupMember.GroupMemberId;
            }
        }
        
        /// <summary>
        /// 专家组ID
        /// </summary>
        [Display(Name="专家ID")]
        public virtual long GroupId {
            get {
                return _groupId;
            }
            set {
                _groupId = value;
            }
        }
        
        /// <summary>
        /// 专家组ID APColumnDef
        /// </summary>
        public static Int64APColumnDef GroupIdDef {
            get {
                return APDBDef.ExpGroupMember.GroupId;
            }
        }
        
        /// <summary>
        /// 专家ID
        /// </summary>
        [Display(Name="专家ID")]
        public virtual long ExpectID {
            get {
                return _expectID;
            }
            set {
                _expectID = value;
            }
        }
        
        /// <summary>
        /// 专家ID APColumnDef
        /// </summary>
        public static Int64APColumnDef ExpectIDDef {
            get {
                return APDBDef.ExpGroupMember.ExpectID;
            }
        }
        
        /// <summary>
        /// IsLeader
        /// </summary>
        [Display(Name="是否组长")]
        public virtual bool IsLeader {
            get {
                return _isLeader;
            }
            set {
                _isLeader = value;
            }
        }
        
        /// <summary>
        /// IsLeader APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsLeaderDef {
            get {
                return APDBDef.ExpGroupMember.IsLeader;
            }
        }
        
        /// <summary>
        /// ExpGroupMemberTableDef APTableDef
        /// </summary>
        public static APDBDef.ExpGroupMemberTableDef TableDef {
            get {
                return APDBDef.ExpGroupMember;
            }
        }
        
        /// <summary>
        /// ExpGroupMemberTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.ExpGroupMember.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(ExpGroupMember data) {
            GroupMemberId = data.GroupMemberId;
            GroupId = data.GroupId;
            ExpectID = data.ExpectID;
            IsLeader = data.IsLeader;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(ExpGroupMember data) {
            if ((GroupMemberId != data.GroupMemberId)) {
                return false;
            }
            if ((GroupId != data.GroupId)) {
                return false;
            }
            if ((ExpectID != data.ExpectID)) {
                return false;
            }
            if ((IsLeader != data.IsLeader)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ExpGroupMemberBpl.Insert(((ExpGroupMember)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ExpGroupMemberBpl.Update(((ExpGroupMember)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long groupMemberId, Object metadata) {
            APBplDef.ExpGroupMemberBpl.UpdatePartial(groupMemberId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long groupMemberId) {
            APBplDef.ExpGroupMemberBpl.PrimaryDelete(groupMemberId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ExpGroupMemberBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ExpGroupMemberBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static ExpGroupMember PrimaryGet(long groupMemberId) {
            return APBplDef.ExpGroupMemberBpl.PrimaryGet(groupMemberId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ExpGroupMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ExpGroupMemberBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ExpGroupMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ExpGroupMemberBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ExpGroupMember> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ExpGroupMemberBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<ExpGroupMember> GetAll() {
            return APBplDef.ExpGroupMemberBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 专家组成员
    /// </summary>
    [Serializable()]
    public partial class ExpGroupMember : ExpGroupMemberBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ExpGroupMember() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ExpGroupMember(long groupMemberId, long groupId, long expectID, bool isLeader) : 
                base(groupMemberId, groupId, expectID, isLeader) {
        }
    }
    
    /// <summary>
    /// 专家 Base
    /// </summary>
    [Serializable()]
    public abstract partial class ExpectBase {
        
        /// <summary>
        /// ExpectId
        /// </summary>
        private long _expectId;
        
        /// <summary>
        /// 参加的专家组数量
        /// </summary>
        private long _groupCount;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ExpectBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ExpectBase(long expectId, long groupCount) {
            _expectId = expectId;
            _groupCount = groupCount;
        }
        
        /// <summary>
        /// ExpectId
        /// </summary>
        [Display(Name="专家ID")]
        public virtual long ExpectId {
            get {
                return _expectId;
            }
            set {
                _expectId = value;
            }
        }
        
        /// <summary>
        /// ExpectId APColumnDef
        /// </summary>
        public static Int64APColumnDef ExpectIdDef {
            get {
                return APDBDef.Expect.ExpectId;
            }
        }
        
        /// <summary>
        /// 参加的专家组数量
        /// </summary>
        [Display(Name="专家组数量")]
        public virtual long GroupCount {
            get {
                return _groupCount;
            }
            set {
                _groupCount = value;
            }
        }
        
        /// <summary>
        /// 参加的专家组数量 APColumnDef
        /// </summary>
        public static Int64APColumnDef GroupCountDef {
            get {
                return APDBDef.Expect.GroupCount;
            }
        }
        
        /// <summary>
        /// ExpectTableDef APTableDef
        /// </summary>
        public static APDBDef.ExpectTableDef TableDef {
            get {
                return APDBDef.Expect;
            }
        }
        
        /// <summary>
        /// ExpectTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Expect.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Expect data) {
            ExpectId = data.ExpectId;
            GroupCount = data.GroupCount;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Expect data) {
            if ((ExpectId != data.ExpectId)) {
                return false;
            }
            if ((GroupCount != data.GroupCount)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ExpectBpl.Insert(((Expect)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ExpectBpl.Update(((Expect)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long expectId, Object metadata) {
            APBplDef.ExpectBpl.UpdatePartial(expectId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long expectId) {
            APBplDef.ExpectBpl.PrimaryDelete(expectId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ExpectBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ExpectBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Expect PrimaryGet(long expectId) {
            return APBplDef.ExpectBpl.PrimaryGet(expectId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Expect> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ExpectBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Expect> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ExpectBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Expect> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ExpectBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Expect> GetAll() {
            return APBplDef.ExpectBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 专家
    /// </summary>
    [Serializable()]
    public partial class Expect : ExpectBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Expect() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Expect(long expectId, long groupCount) : 
                base(expectId, groupCount) {
        }
    }
    
    /// <summary>
    /// 专家组-学员 Base
    /// </summary>
    [Serializable()]
    public abstract partial class ExpGroupTargetBase {
        
        /// <summary>
        /// GroupId
        /// </summary>
        private long _groupId;
        
        /// <summary>
        /// MemberId
        /// </summary>
        private long _memberId;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ExpGroupTargetBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ExpGroupTargetBase(long groupId, long memberId) {
            _groupId = groupId;
            _memberId = memberId;
        }
        
        /// <summary>
        /// GroupId
        /// </summary>
        [Display(Name="专家组ID")]
        public virtual long GroupId {
            get {
                return _groupId;
            }
            set {
                _groupId = value;
            }
        }
        
        /// <summary>
        /// GroupId APColumnDef
        /// </summary>
        public static Int64APColumnDef GroupIdDef {
            get {
                return APDBDef.ExpGroupTarget.GroupId;
            }
        }
        
        /// <summary>
        /// MemberId
        /// </summary>
        [Display(Name="学员ID")]
        public virtual long MemberId {
            get {
                return _memberId;
            }
            set {
                _memberId = value;
            }
        }
        
        /// <summary>
        /// MemberId APColumnDef
        /// </summary>
        public static Int64APColumnDef MemberIdDef {
            get {
                return APDBDef.ExpGroupTarget.MemberId;
            }
        }
        
        /// <summary>
        /// ExpGroupTargetTableDef APTableDef
        /// </summary>
        public static APDBDef.ExpGroupTargetTableDef TableDef {
            get {
                return APDBDef.ExpGroupTarget;
            }
        }
        
        /// <summary>
        /// ExpGroupTargetTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.ExpGroupTarget.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(ExpGroupTarget data) {
            GroupId = data.GroupId;
            MemberId = data.MemberId;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(ExpGroupTarget data) {
            if ((GroupId != data.GroupId)) {
                return false;
            }
            if ((MemberId != data.MemberId)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ExpGroupTargetBpl.Insert(((ExpGroupTarget)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ExpGroupTargetBpl.Update(((ExpGroupTarget)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long groupId, long memberId, Object metadata) {
            APBplDef.ExpGroupTargetBpl.UpdatePartial(groupId, memberId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long groupId, long memberId) {
            APBplDef.ExpGroupTargetBpl.PrimaryDelete(groupId, memberId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ExpGroupTargetBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ExpGroupTargetBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static ExpGroupTarget PrimaryGet(long groupId, long memberId) {
            return APBplDef.ExpGroupTargetBpl.PrimaryGet(groupId, memberId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ExpGroupTarget> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ExpGroupTargetBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ExpGroupTarget> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ExpGroupTargetBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ExpGroupTarget> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ExpGroupTargetBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<ExpGroupTarget> GetAll() {
            return APBplDef.ExpGroupTargetBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 专家组-学员
    /// </summary>
    [Serializable()]
    public partial class ExpGroupTarget : ExpGroupTargetBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ExpGroupTarget() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ExpGroupTarget(long groupId, long memberId) : 
                base(groupId, memberId) {
        }
    }
    
    /// <summary>
    /// 评价-周期 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalPeriodBase {
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private long _periodId;
        
        /// <summary>
        /// Name
        /// </summary>
        private string _name = string.Empty;
        
        /// <summary>
        /// BeginDate
        /// </summary>
        private System.DateTime _beginDate;
        
        /// <summary>
        /// EndDate
        /// </summary>
        private System.DateTime _endDate;
        
        /// <summary>
        /// AccessBeginDate
        /// </summary>
        private System.DateTime _accessBeginDate;
        
        /// <summary>
        /// AccessEndDate
        /// </summary>
        private System.DateTime _accessEndDate;
        
        /// <summary>
        /// AnalysisName
        /// </summary>
        private string _analysisName = string.Empty;
        
        /// <summary>
        /// AnalysisType
        /// </summary>
        private string _analysisType = string.Empty;
        
        /// <summary>
        /// IsCurrent
        /// </summary>
        private bool _isCurrent;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// Creator
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        private System.Nullable<System.DateTime> _modifyDate;
        
        /// <summary>
        /// Modifier
        /// </summary>
        private long _modifier;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalPeriodBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalPeriodBase(long periodId, string name, System.DateTime beginDate, System.DateTime endDate, System.DateTime accessBeginDate, System.DateTime accessEndDate, string analysisName, string analysisType, bool isCurrent, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) {
            _periodId = periodId;
            _name = name;
            _beginDate = beginDate;
            _endDate = endDate;
            _accessBeginDate = accessBeginDate;
            _accessEndDate = accessEndDate;
            _analysisName = analysisName;
            _analysisType = analysisType;
            _isCurrent = isCurrent;
            _createDate = createDate;
            _creator = creator;
            _modifyDate = modifyDate;
            _modifier = modifier;
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="周期ID")]
        public virtual long PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static Int64APColumnDef PeriodIdDef {
            get {
                return APDBDef.EvalPeriod.PeriodId;
            }
        }
        
        /// <summary>
        /// Name
        /// </summary>
        [Display(Name="周期名称")]
        [StringLength(100)]
        public virtual string Name {
            get {
                return _name;
            }
            set {
                _name = value;
            }
        }
        
        /// <summary>
        /// Name APColumnDef
        /// </summary>
        public static StringAPColumnDef NameDef {
            get {
                return APDBDef.EvalPeriod.Name;
            }
        }
        
        /// <summary>
        /// BeginDate
        /// </summary>
        [Display(Name="开始时间（考核区间）")]
        public virtual System.DateTime BeginDate {
            get {
                return _beginDate;
            }
            set {
                _beginDate = value;
            }
        }
        
        /// <summary>
        /// BeginDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef BeginDateDef {
            get {
                return APDBDef.EvalPeriod.BeginDate;
            }
        }
        
        /// <summary>
        /// EndDate
        /// </summary>
        [Display(Name="结束时间（考核区间）")]
        public virtual System.DateTime EndDate {
            get {
                return _endDate;
            }
            set {
                _endDate = value;
            }
        }
        
        /// <summary>
        /// EndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef EndDateDef {
            get {
                return APDBDef.EvalPeriod.EndDate;
            }
        }
        
        /// <summary>
        /// AccessBeginDate
        /// </summary>
        [Display(Name="开始时间（操作区间）")]
        public virtual System.DateTime AccessBeginDate {
            get {
                return _accessBeginDate;
            }
            set {
                _accessBeginDate = value;
            }
        }
        
        /// <summary>
        /// AccessBeginDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef AccessBeginDateDef {
            get {
                return APDBDef.EvalPeriod.AccessBeginDate;
            }
        }
        
        /// <summary>
        /// AccessEndDate
        /// </summary>
        [Display(Name="结束时间（操作区间）")]
        public virtual System.DateTime AccessEndDate {
            get {
                return _accessEndDate;
            }
            set {
                _accessEndDate = value;
            }
        }
        
        /// <summary>
        /// AccessEndDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef AccessEndDateDef {
            get {
                return APDBDef.EvalPeriod.AccessEndDate;
            }
        }
        
        /// <summary>
        /// AnalysisName
        /// </summary>
        [Display(Name="算法模型名称")]
        [StringLength(100)]
        public virtual string AnalysisName {
            get {
                return _analysisName;
            }
            set {
                _analysisName = value;
            }
        }
        
        /// <summary>
        /// AnalysisName APColumnDef
        /// </summary>
        public static StringAPColumnDef AnalysisNameDef {
            get {
                return APDBDef.EvalPeriod.AnalysisName;
            }
        }
        
        /// <summary>
        /// AnalysisType
        /// </summary>
        [Display(Name="算法模型类型")]
        [StringLength(100)]
        public virtual string AnalysisType {
            get {
                return _analysisType;
            }
            set {
                _analysisType = value;
            }
        }
        
        /// <summary>
        /// AnalysisType APColumnDef
        /// </summary>
        public static StringAPColumnDef AnalysisTypeDef {
            get {
                return APDBDef.EvalPeriod.AnalysisType;
            }
        }
        
        /// <summary>
        /// IsCurrent
        /// </summary>
        [Display(Name="是否当前考核期")]
        public virtual bool IsCurrent {
            get {
                return _isCurrent;
            }
            set {
                _isCurrent = value;
            }
        }
        
        /// <summary>
        /// IsCurrent APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsCurrentDef {
            get {
                return APDBDef.EvalPeriod.IsCurrent;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.EvalPeriod.CreateDate;
            }
        }
        
        /// <summary>
        /// Creator
        /// </summary>
        [Display(Name="创建人")]
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// Creator APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.EvalPeriod.Creator;
            }
        }
        
        /// <summary>
        /// ModifyDate
        /// </summary>
        [Display(Name="修改时间")]
        public virtual System.Nullable<System.DateTime> ModifyDate {
            get {
                return _modifyDate;
            }
            set {
                _modifyDate = value;
            }
        }
        
        /// <summary>
        /// ModifyDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ModifyDateDef {
            get {
                return APDBDef.EvalPeriod.ModifyDate;
            }
        }
        
        /// <summary>
        /// Modifier
        /// </summary>
        [Display(Name="修改人")]
        public virtual long Modifier {
            get {
                return _modifier;
            }
            set {
                _modifier = value;
            }
        }
        
        /// <summary>
        /// Modifier APColumnDef
        /// </summary>
        public static Int64APColumnDef ModifierDef {
            get {
                return APDBDef.EvalPeriod.Modifier;
            }
        }
        
        /// <summary>
        /// EvalPeriodTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalPeriodTableDef TableDef {
            get {
                return APDBDef.EvalPeriod;
            }
        }
        
        /// <summary>
        /// EvalPeriodTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalPeriod.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalPeriod data) {
            PeriodId = data.PeriodId;
            Name = data.Name;
            BeginDate = data.BeginDate;
            EndDate = data.EndDate;
            AccessBeginDate = data.AccessBeginDate;
            AccessEndDate = data.AccessEndDate;
            AnalysisName = data.AnalysisName;
            AnalysisType = data.AnalysisType;
            IsCurrent = data.IsCurrent;
            CreateDate = data.CreateDate;
            Creator = data.Creator;
            ModifyDate = data.ModifyDate;
            Modifier = data.Modifier;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalPeriod data) {
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            if ((Name != data.Name)) {
                return false;
            }
            if ((BeginDate != data.BeginDate)) {
                return false;
            }
            if ((EndDate != data.EndDate)) {
                return false;
            }
            if ((AccessBeginDate != data.AccessBeginDate)) {
                return false;
            }
            if ((AccessEndDate != data.AccessEndDate)) {
                return false;
            }
            if ((AnalysisName != data.AnalysisName)) {
                return false;
            }
            if ((AnalysisType != data.AnalysisType)) {
                return false;
            }
            if ((IsCurrent != data.IsCurrent)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((ModifyDate != data.ModifyDate)) {
                return false;
            }
            if ((Modifier != data.Modifier)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalPeriodBpl.Insert(((EvalPeriod)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalPeriodBpl.Update(((EvalPeriod)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long periodId, Object metadata) {
            APBplDef.EvalPeriodBpl.UpdatePartial(periodId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long periodId) {
            APBplDef.EvalPeriodBpl.PrimaryDelete(periodId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalPeriodBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalPeriodBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalPeriod PrimaryGet(long periodId) {
            return APBplDef.EvalPeriodBpl.PrimaryGet(periodId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalPeriodBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalPeriodBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalPeriod> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalPeriodBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalPeriod> GetAll() {
            return APBplDef.EvalPeriodBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 评价-周期
    /// </summary>
    [Serializable()]
    public partial class EvalPeriod : EvalPeriodBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalPeriod() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalPeriod(long periodId, string name, System.DateTime beginDate, System.DateTime endDate, System.DateTime accessBeginDate, System.DateTime accessEndDate, string analysisName, string analysisType, bool isCurrent, System.DateTime createDate, long creator, System.Nullable<System.DateTime> modifyDate, long modifier) : 
                base(periodId, name, beginDate, endDate, accessBeginDate, accessEndDate, analysisName, analysisType, isCurrent, createDate, creator, modifyDate, modifier) {
        }
    }
    
    /// <summary>
    /// 评价-校评-结果 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalSchoolResultBase {
        
        /// <summary>
        /// ResultId
        /// </summary>
        private long _resultId;
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private long _periodId;
        
        /// <summary>
        /// CompanyId
        /// </summary>
        private long _companyId;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// FullScore
        /// </summary>
        private double _fullScore;
        
        /// <summary>
        /// Score
        /// </summary>
        private double _score;
        
        /// <summary>
        /// Morality
        /// </summary>
        private string _morality = string.Empty;
        
        /// <summary>
        /// 关联考评人
        /// </summary>
        private long _accesser;
        
        /// <summary>
        /// AccessDate
        /// </summary>
        private System.DateTime _accessDate;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalSchoolResultBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalSchoolResultBase(long resultId, long periodId, long companyId, long teacherId, double fullScore, double score, string morality, long accesser, System.DateTime accessDate) {
            _resultId = resultId;
            _periodId = periodId;
            _companyId = companyId;
            _teacherId = teacherId;
            _fullScore = fullScore;
            _score = score;
            _morality = morality;
            _accesser = accesser;
            _accessDate = accessDate;
        }
        
        /// <summary>
        /// ResultId
        /// </summary>
        [Display(Name="评价结果ID")]
        public virtual long ResultId {
            get {
                return _resultId;
            }
            set {
                _resultId = value;
            }
        }
        
        /// <summary>
        /// ResultId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResultIdDef {
            get {
                return APDBDef.EvalSchoolResult.ResultId;
            }
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="周期ID")]
        public virtual long PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static Int64APColumnDef PeriodIdDef {
            get {
                return APDBDef.EvalSchoolResult.PeriodId;
            }
        }
        
        /// <summary>
        /// CompanyId
        /// </summary>
        [Display(Name="单位ID")]
        public virtual long CompanyId {
            get {
                return _companyId;
            }
            set {
                _companyId = value;
            }
        }
        
        /// <summary>
        /// CompanyId APColumnDef
        /// </summary>
        public static Int64APColumnDef CompanyIdDef {
            get {
                return APDBDef.EvalSchoolResult.CompanyId;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.EvalSchoolResult.TeacherId;
            }
        }
        
        /// <summary>
        /// FullScore
        /// </summary>
        [Display(Name="总分")]
        public virtual double FullScore {
            get {
                return _fullScore;
            }
            set {
                _fullScore = value;
            }
        }
        
        /// <summary>
        /// FullScore APColumnDef
        /// </summary>
        public static DoubleAPColumnDef FullScoreDef {
            get {
                return APDBDef.EvalSchoolResult.FullScore;
            }
        }
        
        /// <summary>
        /// Score
        /// </summary>
        [Display(Name="得分")]
        public virtual double Score {
            get {
                return _score;
            }
            set {
                _score = value;
            }
        }
        
        /// <summary>
        /// Score APColumnDef
        /// </summary>
        public static DoubleAPColumnDef ScoreDef {
            get {
                return APDBDef.EvalSchoolResult.Score;
            }
        }
        
        /// <summary>
        /// Morality
        /// </summary>
        [Display(Name="合格")]
        [StringLength(200)]
        public virtual string Morality {
            get {
                return _morality;
            }
            set {
                _morality = value;
            }
        }
        
        /// <summary>
        /// Morality APColumnDef
        /// </summary>
        public static StringAPColumnDef MoralityDef {
            get {
                return APDBDef.EvalSchoolResult.Morality;
            }
        }
        
        /// <summary>
        /// 关联考评人
        /// </summary>
        [Display(Name="考评人")]
        public virtual long Accesser {
            get {
                return _accesser;
            }
            set {
                _accesser = value;
            }
        }
        
        /// <summary>
        /// 关联考评人 APColumnDef
        /// </summary>
        public static Int64APColumnDef AccesserDef {
            get {
                return APDBDef.EvalSchoolResult.Accesser;
            }
        }
        
        /// <summary>
        /// AccessDate
        /// </summary>
        [Display(Name="考评时间")]
        public virtual System.DateTime AccessDate {
            get {
                return _accessDate;
            }
            set {
                _accessDate = value;
            }
        }
        
        /// <summary>
        /// AccessDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef AccessDateDef {
            get {
                return APDBDef.EvalSchoolResult.AccessDate;
            }
        }
        
        /// <summary>
        /// EvalSchoolResultTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalSchoolResultTableDef TableDef {
            get {
                return APDBDef.EvalSchoolResult;
            }
        }
        
        /// <summary>
        /// EvalSchoolResultTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalSchoolResult.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalSchoolResult data) {
            ResultId = data.ResultId;
            PeriodId = data.PeriodId;
            CompanyId = data.CompanyId;
            TeacherId = data.TeacherId;
            FullScore = data.FullScore;
            Score = data.Score;
            Morality = data.Morality;
            Accesser = data.Accesser;
            AccessDate = data.AccessDate;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalSchoolResult data) {
            if ((ResultId != data.ResultId)) {
                return false;
            }
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            if ((CompanyId != data.CompanyId)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((FullScore != data.FullScore)) {
                return false;
            }
            if ((Score != data.Score)) {
                return false;
            }
            if ((Morality != data.Morality)) {
                return false;
            }
            if ((Accesser != data.Accesser)) {
                return false;
            }
            if ((AccessDate != data.AccessDate)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalSchoolResultBpl.Insert(((EvalSchoolResult)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalSchoolResultBpl.Update(((EvalSchoolResult)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long resultId, Object metadata) {
            APBplDef.EvalSchoolResultBpl.UpdatePartial(resultId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long resultId) {
            APBplDef.EvalSchoolResultBpl.PrimaryDelete(resultId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalSchoolResultBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalSchoolResultBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalSchoolResult PrimaryGet(long resultId) {
            return APBplDef.EvalSchoolResultBpl.PrimaryGet(resultId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalSchoolResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalSchoolResultBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalSchoolResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalSchoolResultBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalSchoolResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalSchoolResultBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalSchoolResult> GetAll() {
            return APBplDef.EvalSchoolResultBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 评价-校评-结果
    /// </summary>
    [Serializable()]
    public partial class EvalSchoolResult : EvalSchoolResultBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalSchoolResult() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalSchoolResult(long resultId, long periodId, long companyId, long teacherId, double fullScore, double score, string morality, long accesser, System.DateTime accessDate) : 
                base(resultId, periodId, companyId, teacherId, fullScore, score, morality, accesser, accessDate) {
        }
    }
    
    /// <summary>
    /// 评价-校评-结果项 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalSchoolResultItemBase {
        
        /// <summary>
        /// ResultItemId
        /// </summary>
        private long _resultItemId;
        
        /// <summary>
        /// ResultId
        /// </summary>
        private long _resultId;
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        private string _evalItemKey = string.Empty;
        
        /// <summary>
        /// ChooseValue
        /// </summary>
        private string _chooseValue = string.Empty;
        
        /// <summary>
        /// ResultValue
        /// </summary>
        private string _resultValue = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalSchoolResultItemBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalSchoolResultItemBase(long resultItemId, long resultId, string evalItemKey, string chooseValue, string resultValue) {
            _resultItemId = resultItemId;
            _resultId = resultId;
            _evalItemKey = evalItemKey;
            _chooseValue = chooseValue;
            _resultValue = resultValue;
        }
        
        /// <summary>
        /// ResultItemId
        /// </summary>
        [Display(Name="结果项ID")]
        public virtual long ResultItemId {
            get {
                return _resultItemId;
            }
            set {
                _resultItemId = value;
            }
        }
        
        /// <summary>
        /// ResultItemId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResultItemIdDef {
            get {
                return APDBDef.EvalSchoolResultItem.ResultItemId;
            }
        }
        
        /// <summary>
        /// ResultId
        /// </summary>
        [Display(Name="评价结果ID")]
        public virtual long ResultId {
            get {
                return _resultId;
            }
            set {
                _resultId = value;
            }
        }
        
        /// <summary>
        /// ResultId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResultIdDef {
            get {
                return APDBDef.EvalSchoolResultItem.ResultId;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        [Display(Name="指标项")]
        [StringLength(200)]
        public virtual string EvalItemKey {
            get {
                return _evalItemKey;
            }
            set {
                _evalItemKey = value;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割 APColumnDef
        /// </summary>
        public static StringAPColumnDef EvalItemKeyDef {
            get {
                return APDBDef.EvalSchoolResultItem.EvalItemKey;
            }
        }
        
        /// <summary>
        /// ChooseValue
        /// </summary>
        [Display(Name="选择值")]
        [StringLength(20)]
        public virtual string ChooseValue {
            get {
                return _chooseValue;
            }
            set {
                _chooseValue = value;
            }
        }
        
        /// <summary>
        /// ChooseValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ChooseValueDef {
            get {
                return APDBDef.EvalSchoolResultItem.ChooseValue;
            }
        }
        
        /// <summary>
        /// ResultValue
        /// </summary>
        [Display(Name="输入值")]
        [StringLength(100)]
        public virtual string ResultValue {
            get {
                return _resultValue;
            }
            set {
                _resultValue = value;
            }
        }
        
        /// <summary>
        /// ResultValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ResultValueDef {
            get {
                return APDBDef.EvalSchoolResultItem.ResultValue;
            }
        }
        
        /// <summary>
        /// EvalSchoolResultItemTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalSchoolResultItemTableDef TableDef {
            get {
                return APDBDef.EvalSchoolResultItem;
            }
        }
        
        /// <summary>
        /// EvalSchoolResultItemTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalSchoolResultItem.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalSchoolResultItem data) {
            ResultItemId = data.ResultItemId;
            ResultId = data.ResultId;
            EvalItemKey = data.EvalItemKey;
            ChooseValue = data.ChooseValue;
            ResultValue = data.ResultValue;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalSchoolResultItem data) {
            if ((ResultItemId != data.ResultItemId)) {
                return false;
            }
            if ((ResultId != data.ResultId)) {
                return false;
            }
            if ((EvalItemKey != data.EvalItemKey)) {
                return false;
            }
            if ((ChooseValue != data.ChooseValue)) {
                return false;
            }
            if ((ResultValue != data.ResultValue)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalSchoolResultItemBpl.Insert(((EvalSchoolResultItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalSchoolResultItemBpl.Update(((EvalSchoolResultItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long resultItemId, Object metadata) {
            APBplDef.EvalSchoolResultItemBpl.UpdatePartial(resultItemId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long resultItemId) {
            APBplDef.EvalSchoolResultItemBpl.PrimaryDelete(resultItemId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalSchoolResultItemBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalSchoolResultItemBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalSchoolResultItem PrimaryGet(long resultItemId) {
            return APBplDef.EvalSchoolResultItemBpl.PrimaryGet(resultItemId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalSchoolResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalSchoolResultItemBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalSchoolResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalSchoolResultItemBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalSchoolResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalSchoolResultItemBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalSchoolResultItem> GetAll() {
            return APBplDef.EvalSchoolResultItemBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 评价-校评-结果项
    /// </summary>
    [Serializable()]
    public partial class EvalSchoolResultItem : EvalSchoolResultItemBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalSchoolResultItem() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalSchoolResultItem(long resultItemId, long resultId, string evalItemKey, string chooseValue, string resultValue) : 
                base(resultItemId, resultId, evalItemKey, chooseValue, resultValue) {
        }
    }
    
    /// <summary>
    /// 评价-量评-结果 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalVolumnResultBase {
        
        /// <summary>
        /// ResultId
        /// </summary>
        private long _resultId;
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private long _periodId;
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        private long _declareTargetPKID;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// FullScore
        /// </summary>
        private double _fullScore;
        
        /// <summary>
        /// Score
        /// </summary>
        private double _score;
        
        /// <summary>
        /// AnalysisContent
        /// </summary>
        private string _analysisContent = string.Empty;
        
        /// <summary>
        /// 关联考评人
        /// </summary>
        private long _accesser;
        
        /// <summary>
        /// AccessDate
        /// </summary>
        private System.DateTime _accessDate;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalVolumnResultBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalVolumnResultBase(long resultId, long periodId, long declareTargetPKID, long teacherId, double fullScore, double score, string analysisContent, long accesser, System.DateTime accessDate) {
            _resultId = resultId;
            _periodId = periodId;
            _declareTargetPKID = declareTargetPKID;
            _teacherId = teacherId;
            _fullScore = fullScore;
            _score = score;
            _analysisContent = analysisContent;
            _accesser = accesser;
            _accessDate = accessDate;
        }
        
        /// <summary>
        /// ResultId
        /// </summary>
        [Display(Name="评价结果ID")]
        public virtual long ResultId {
            get {
                return _resultId;
            }
            set {
                _resultId = value;
            }
        }
        
        /// <summary>
        /// ResultId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResultIdDef {
            get {
                return APDBDef.EvalVolumnResult.ResultId;
            }
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="周期ID")]
        public virtual long PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static Int64APColumnDef PeriodIdDef {
            get {
                return APDBDef.EvalVolumnResult.PeriodId;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        [Display(Name="申报（担任）称号")]
        public virtual long DeclareTargetPKID {
            get {
                return _declareTargetPKID;
            }
            set {
                _declareTargetPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareTargetPKIDDef {
            get {
                return APDBDef.EvalVolumnResult.DeclareTargetPKID;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.EvalVolumnResult.TeacherId;
            }
        }
        
        /// <summary>
        /// FullScore
        /// </summary>
        [Display(Name="总分")]
        public virtual double FullScore {
            get {
                return _fullScore;
            }
            set {
                _fullScore = value;
            }
        }
        
        /// <summary>
        /// FullScore APColumnDef
        /// </summary>
        public static DoubleAPColumnDef FullScoreDef {
            get {
                return APDBDef.EvalVolumnResult.FullScore;
            }
        }
        
        /// <summary>
        /// Score
        /// </summary>
        [Display(Name="得分")]
        public virtual double Score {
            get {
                return _score;
            }
            set {
                _score = value;
            }
        }
        
        /// <summary>
        /// Score APColumnDef
        /// </summary>
        public static DoubleAPColumnDef ScoreDef {
            get {
                return APDBDef.EvalVolumnResult.Score;
            }
        }
        
        /// <summary>
        /// AnalysisContent
        /// </summary>
        [Display(Name="分析报告")]
        [StringLength(20000)]
        public virtual string AnalysisContent {
            get {
                return _analysisContent;
            }
            set {
                _analysisContent = value;
            }
        }
        
        /// <summary>
        /// AnalysisContent APColumnDef
        /// </summary>
        public static StringAPColumnDef AnalysisContentDef {
            get {
                return APDBDef.EvalVolumnResult.AnalysisContent;
            }
        }
        
        /// <summary>
        /// 关联考评人
        /// </summary>
        [Display(Name="考评人")]
        public virtual long Accesser {
            get {
                return _accesser;
            }
            set {
                _accesser = value;
            }
        }
        
        /// <summary>
        /// 关联考评人 APColumnDef
        /// </summary>
        public static Int64APColumnDef AccesserDef {
            get {
                return APDBDef.EvalVolumnResult.Accesser;
            }
        }
        
        /// <summary>
        /// AccessDate
        /// </summary>
        [Display(Name="考评时间")]
        public virtual System.DateTime AccessDate {
            get {
                return _accessDate;
            }
            set {
                _accessDate = value;
            }
        }
        
        /// <summary>
        /// AccessDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef AccessDateDef {
            get {
                return APDBDef.EvalVolumnResult.AccessDate;
            }
        }
        
        /// <summary>
        /// EvalVolumnResultTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalVolumnResultTableDef TableDef {
            get {
                return APDBDef.EvalVolumnResult;
            }
        }
        
        /// <summary>
        /// EvalVolumnResultTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalVolumnResult.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalVolumnResult data) {
            ResultId = data.ResultId;
            PeriodId = data.PeriodId;
            DeclareTargetPKID = data.DeclareTargetPKID;
            TeacherId = data.TeacherId;
            FullScore = data.FullScore;
            Score = data.Score;
            AnalysisContent = data.AnalysisContent;
            Accesser = data.Accesser;
            AccessDate = data.AccessDate;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalVolumnResult data) {
            if ((ResultId != data.ResultId)) {
                return false;
            }
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            if ((DeclareTargetPKID != data.DeclareTargetPKID)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((FullScore != data.FullScore)) {
                return false;
            }
            if ((Score != data.Score)) {
                return false;
            }
            if ((AnalysisContent != data.AnalysisContent)) {
                return false;
            }
            if ((Accesser != data.Accesser)) {
                return false;
            }
            if ((AccessDate != data.AccessDate)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalVolumnResultBpl.Insert(((EvalVolumnResult)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalVolumnResultBpl.Update(((EvalVolumnResult)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long resultId, Object metadata) {
            APBplDef.EvalVolumnResultBpl.UpdatePartial(resultId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long resultId) {
            APBplDef.EvalVolumnResultBpl.PrimaryDelete(resultId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalVolumnResultBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalVolumnResultBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalVolumnResult PrimaryGet(long resultId) {
            return APBplDef.EvalVolumnResultBpl.PrimaryGet(resultId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalVolumnResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalVolumnResultBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalVolumnResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalVolumnResultBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalVolumnResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalVolumnResultBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalVolumnResult> GetAll() {
            return APBplDef.EvalVolumnResultBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 评价-量评-结果
    /// </summary>
    [Serializable()]
    public partial class EvalVolumnResult : EvalVolumnResultBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalVolumnResult() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalVolumnResult(long resultId, long periodId, long declareTargetPKID, long teacherId, double fullScore, double score, string analysisContent, long accesser, System.DateTime accessDate) : 
                base(resultId, periodId, declareTargetPKID, teacherId, fullScore, score, analysisContent, accesser, accessDate) {
        }
    }
    
    /// <summary>
    /// 评价-量评-结果项 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalVolumnResultItemBase {
        
        /// <summary>
        /// ResultItemId
        /// </summary>
        private long _resultItemId;
        
        /// <summary>
        /// ResultId
        /// </summary>
        private long _resultId;
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        private string _evalItemKey = string.Empty;
        
        /// <summary>
        /// ChooseValue
        /// </summary>
        private string _chooseValue = string.Empty;
        
        /// <summary>
        /// ResultValue
        /// </summary>
        private string _resultValue = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalVolumnResultItemBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalVolumnResultItemBase(long resultItemId, long resultId, string evalItemKey, string chooseValue, string resultValue) {
            _resultItemId = resultItemId;
            _resultId = resultId;
            _evalItemKey = evalItemKey;
            _chooseValue = chooseValue;
            _resultValue = resultValue;
        }
        
        /// <summary>
        /// ResultItemId
        /// </summary>
        [Display(Name="结果项ID")]
        public virtual long ResultItemId {
            get {
                return _resultItemId;
            }
            set {
                _resultItemId = value;
            }
        }
        
        /// <summary>
        /// ResultItemId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResultItemIdDef {
            get {
                return APDBDef.EvalVolumnResultItem.ResultItemId;
            }
        }
        
        /// <summary>
        /// ResultId
        /// </summary>
        [Display(Name="评价结果ID")]
        public virtual long ResultId {
            get {
                return _resultId;
            }
            set {
                _resultId = value;
            }
        }
        
        /// <summary>
        /// ResultId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResultIdDef {
            get {
                return APDBDef.EvalVolumnResultItem.ResultId;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        [Display(Name="指标项")]
        [StringLength(200)]
        public virtual string EvalItemKey {
            get {
                return _evalItemKey;
            }
            set {
                _evalItemKey = value;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割 APColumnDef
        /// </summary>
        public static StringAPColumnDef EvalItemKeyDef {
            get {
                return APDBDef.EvalVolumnResultItem.EvalItemKey;
            }
        }
        
        /// <summary>
        /// ChooseValue
        /// </summary>
        [Display(Name="选择值")]
        [StringLength(20)]
        public virtual string ChooseValue {
            get {
                return _chooseValue;
            }
            set {
                _chooseValue = value;
            }
        }
        
        /// <summary>
        /// ChooseValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ChooseValueDef {
            get {
                return APDBDef.EvalVolumnResultItem.ChooseValue;
            }
        }
        
        /// <summary>
        /// ResultValue
        /// </summary>
        [Display(Name="输入值")]
        [StringLength(100)]
        public virtual string ResultValue {
            get {
                return _resultValue;
            }
            set {
                _resultValue = value;
            }
        }
        
        /// <summary>
        /// ResultValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ResultValueDef {
            get {
                return APDBDef.EvalVolumnResultItem.ResultValue;
            }
        }
        
        /// <summary>
        /// EvalVolumnResultItemTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalVolumnResultItemTableDef TableDef {
            get {
                return APDBDef.EvalVolumnResultItem;
            }
        }
        
        /// <summary>
        /// EvalVolumnResultItemTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalVolumnResultItem.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalVolumnResultItem data) {
            ResultItemId = data.ResultItemId;
            ResultId = data.ResultId;
            EvalItemKey = data.EvalItemKey;
            ChooseValue = data.ChooseValue;
            ResultValue = data.ResultValue;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalVolumnResultItem data) {
            if ((ResultItemId != data.ResultItemId)) {
                return false;
            }
            if ((ResultId != data.ResultId)) {
                return false;
            }
            if ((EvalItemKey != data.EvalItemKey)) {
                return false;
            }
            if ((ChooseValue != data.ChooseValue)) {
                return false;
            }
            if ((ResultValue != data.ResultValue)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalVolumnResultItemBpl.Insert(((EvalVolumnResultItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalVolumnResultItemBpl.Update(((EvalVolumnResultItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long resultItemId, Object metadata) {
            APBplDef.EvalVolumnResultItemBpl.UpdatePartial(resultItemId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long resultItemId) {
            APBplDef.EvalVolumnResultItemBpl.PrimaryDelete(resultItemId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalVolumnResultItemBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalVolumnResultItemBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalVolumnResultItem PrimaryGet(long resultItemId) {
            return APBplDef.EvalVolumnResultItemBpl.PrimaryGet(resultItemId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalVolumnResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalVolumnResultItemBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalVolumnResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalVolumnResultItemBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalVolumnResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalVolumnResultItemBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalVolumnResultItem> GetAll() {
            return APBplDef.EvalVolumnResultItemBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 评价-量评-结果项
    /// </summary>
    [Serializable()]
    public partial class EvalVolumnResultItem : EvalVolumnResultItemBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalVolumnResultItem() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalVolumnResultItem(long resultItemId, long resultId, string evalItemKey, string chooseValue, string resultValue) : 
                base(resultItemId, resultId, evalItemKey, chooseValue, resultValue) {
        }
    }
    
    /// <summary>
    /// 评价-质评-提交结果 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalQualitySubmitResultBase {
        
        /// <summary>
        /// ResultId
        /// </summary>
        private long _resultId;
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private long _periodId;
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        private long _declareTargetPKID;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// FullScore
        /// </summary>
        private double _fullScore;
        
        /// <summary>
        /// Score
        /// </summary>
        private double _score;
        
        /// <summary>
        /// Characteristic
        /// </summary>
        private double _characteristic;
        
        /// <summary>
        /// 调整分为参考值
        /// </summary>
        private double _adjustScore;
        
        /// <summary>
        /// AccesserCount
        /// </summary>
        private int _accesserCount;
        
        /// <summary>
        /// 关联专家组
        /// </summary>
        private long _groupId;
        
        /// <summary>
        /// 关联专家组长
        /// </summary>
        private long _accesser;
        
        /// <summary>
        /// AccessDate
        /// </summary>
        private System.DateTime _accessDate;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalQualitySubmitResultBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalQualitySubmitResultBase(long resultId, long periodId, long declareTargetPKID, long teacherId, double fullScore, double score, double characteristic, double adjustScore, int accesserCount, long groupId, long accesser, System.DateTime accessDate) {
            _resultId = resultId;
            _periodId = periodId;
            _declareTargetPKID = declareTargetPKID;
            _teacherId = teacherId;
            _fullScore = fullScore;
            _score = score;
            _characteristic = characteristic;
            _adjustScore = adjustScore;
            _accesserCount = accesserCount;
            _groupId = groupId;
            _accesser = accesser;
            _accessDate = accessDate;
        }
        
        /// <summary>
        /// ResultId
        /// </summary>
        [Display(Name="评价结果ID")]
        public virtual long ResultId {
            get {
                return _resultId;
            }
            set {
                _resultId = value;
            }
        }
        
        /// <summary>
        /// ResultId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResultIdDef {
            get {
                return APDBDef.EvalQualitySubmitResult.ResultId;
            }
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="周期ID")]
        public virtual long PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static Int64APColumnDef PeriodIdDef {
            get {
                return APDBDef.EvalQualitySubmitResult.PeriodId;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        [Display(Name="申报（担任）称号")]
        public virtual long DeclareTargetPKID {
            get {
                return _declareTargetPKID;
            }
            set {
                _declareTargetPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareTargetPKIDDef {
            get {
                return APDBDef.EvalQualitySubmitResult.DeclareTargetPKID;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.EvalQualitySubmitResult.TeacherId;
            }
        }
        
        /// <summary>
        /// FullScore
        /// </summary>
        [Display(Name="总分")]
        public virtual double FullScore {
            get {
                return _fullScore;
            }
            set {
                _fullScore = value;
            }
        }
        
        /// <summary>
        /// FullScore APColumnDef
        /// </summary>
        public static DoubleAPColumnDef FullScoreDef {
            get {
                return APDBDef.EvalQualitySubmitResult.FullScore;
            }
        }
        
        /// <summary>
        /// Score
        /// </summary>
        [Display(Name="得分")]
        public virtual double Score {
            get {
                return _score;
            }
            set {
                _score = value;
            }
        }
        
        /// <summary>
        /// Score APColumnDef
        /// </summary>
        public static DoubleAPColumnDef ScoreDef {
            get {
                return APDBDef.EvalQualitySubmitResult.Score;
            }
        }
        
        /// <summary>
        /// Characteristic
        /// </summary>
        [Display(Name="特色分得分")]
        public virtual double Characteristic {
            get {
                return _characteristic;
            }
            set {
                _characteristic = value;
            }
        }
        
        /// <summary>
        /// Characteristic APColumnDef
        /// </summary>
        public static DoubleAPColumnDef CharacteristicDef {
            get {
                return APDBDef.EvalQualitySubmitResult.Characteristic;
            }
        }
        
        /// <summary>
        /// 调整分为参考值
        /// </summary>
        [Display(Name="调整分")]
        public virtual double AdjustScore {
            get {
                return _adjustScore;
            }
            set {
                _adjustScore = value;
            }
        }
        
        /// <summary>
        /// 调整分为参考值 APColumnDef
        /// </summary>
        public static DoubleAPColumnDef AdjustScoreDef {
            get {
                return APDBDef.EvalQualitySubmitResult.AdjustScore;
            }
        }
        
        /// <summary>
        /// AccesserCount
        /// </summary>
        [Display(Name="评分人数")]
        public virtual int AccesserCount {
            get {
                return _accesserCount;
            }
            set {
                _accesserCount = value;
            }
        }
        
        /// <summary>
        /// AccesserCount APColumnDef
        /// </summary>
        public static Int32APColumnDef AccesserCountDef {
            get {
                return APDBDef.EvalQualitySubmitResult.AccesserCount;
            }
        }
        
        /// <summary>
        /// 关联专家组
        /// </summary>
        [Display(Name="专家组")]
        public virtual long GroupId {
            get {
                return _groupId;
            }
            set {
                _groupId = value;
            }
        }
        
        /// <summary>
        /// 关联专家组 APColumnDef
        /// </summary>
        public static Int64APColumnDef GroupIdDef {
            get {
                return APDBDef.EvalQualitySubmitResult.GroupId;
            }
        }
        
        /// <summary>
        /// 关联专家组长
        /// </summary>
        [Display(Name="组长")]
        public virtual long Accesser {
            get {
                return _accesser;
            }
            set {
                _accesser = value;
            }
        }
        
        /// <summary>
        /// 关联专家组长 APColumnDef
        /// </summary>
        public static Int64APColumnDef AccesserDef {
            get {
                return APDBDef.EvalQualitySubmitResult.Accesser;
            }
        }
        
        /// <summary>
        /// AccessDate
        /// </summary>
        [Display(Name="考评时间")]
        public virtual System.DateTime AccessDate {
            get {
                return _accessDate;
            }
            set {
                _accessDate = value;
            }
        }
        
        /// <summary>
        /// AccessDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef AccessDateDef {
            get {
                return APDBDef.EvalQualitySubmitResult.AccessDate;
            }
        }
        
        /// <summary>
        /// EvalQualitySubmitResultTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalQualitySubmitResultTableDef TableDef {
            get {
                return APDBDef.EvalQualitySubmitResult;
            }
        }
        
        /// <summary>
        /// EvalQualitySubmitResultTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalQualitySubmitResult.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalQualitySubmitResult data) {
            ResultId = data.ResultId;
            PeriodId = data.PeriodId;
            DeclareTargetPKID = data.DeclareTargetPKID;
            TeacherId = data.TeacherId;
            FullScore = data.FullScore;
            Score = data.Score;
            Characteristic = data.Characteristic;
            AdjustScore = data.AdjustScore;
            AccesserCount = data.AccesserCount;
            GroupId = data.GroupId;
            Accesser = data.Accesser;
            AccessDate = data.AccessDate;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalQualitySubmitResult data) {
            if ((ResultId != data.ResultId)) {
                return false;
            }
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            if ((DeclareTargetPKID != data.DeclareTargetPKID)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((FullScore != data.FullScore)) {
                return false;
            }
            if ((Score != data.Score)) {
                return false;
            }
            if ((Characteristic != data.Characteristic)) {
                return false;
            }
            if ((AdjustScore != data.AdjustScore)) {
                return false;
            }
            if ((AccesserCount != data.AccesserCount)) {
                return false;
            }
            if ((GroupId != data.GroupId)) {
                return false;
            }
            if ((Accesser != data.Accesser)) {
                return false;
            }
            if ((AccessDate != data.AccessDate)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalQualitySubmitResultBpl.Insert(((EvalQualitySubmitResult)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalQualitySubmitResultBpl.Update(((EvalQualitySubmitResult)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long resultId, Object metadata) {
            APBplDef.EvalQualitySubmitResultBpl.UpdatePartial(resultId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long resultId) {
            APBplDef.EvalQualitySubmitResultBpl.PrimaryDelete(resultId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalQualitySubmitResultBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalQualitySubmitResultBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalQualitySubmitResult PrimaryGet(long resultId) {
            return APBplDef.EvalQualitySubmitResultBpl.PrimaryGet(resultId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalQualitySubmitResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalQualitySubmitResultBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalQualitySubmitResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalQualitySubmitResultBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalQualitySubmitResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalQualitySubmitResultBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalQualitySubmitResult> GetAll() {
            return APBplDef.EvalQualitySubmitResultBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 评价-质评-提交结果
    /// </summary>
    [Serializable()]
    public partial class EvalQualitySubmitResult : EvalQualitySubmitResultBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalQualitySubmitResult() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalQualitySubmitResult(long resultId, long periodId, long declareTargetPKID, long teacherId, double fullScore, double score, double characteristic, double adjustScore, int accesserCount, long groupId, long accesser, System.DateTime accessDate) : 
                base(resultId, periodId, declareTargetPKID, teacherId, fullScore, score, characteristic, adjustScore, accesserCount, groupId, accesser, accessDate) {
        }
    }
    
    /// <summary>
    /// 评价-质评-结果 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalQualityResultBase {
        
        /// <summary>
        /// ResultId
        /// </summary>
        private long _resultId;
        
        /// <summary>
        /// PeriodId
        /// </summary>
        private long _periodId;
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        private long _declareTargetPKID;
        
        /// <summary>
        /// TeacherId
        /// </summary>
        private long _teacherId;
        
        /// <summary>
        /// FullScore
        /// </summary>
        private double _fullScore;
        
        /// <summary>
        /// Score
        /// </summary>
        private double _score;
        
        /// <summary>
        /// Characteristic
        /// </summary>
        private double _characteristic;
        
        /// <summary>
        /// DynamicScore1
        /// </summary>
        private double _dynamicScore1;
        
        /// <summary>
        /// DynamicScore2
        /// </summary>
        private double _dynamicScore2;
        
        /// <summary>
        /// DynamicScore3
        /// </summary>
        private double _dynamicScore3;
        
        /// <summary>
        /// 每位专家的评语
        /// </summary>
        private string _comment = string.Empty;
        
        /// <summary>
        /// 关联专家组
        /// </summary>
        private long _groupId;
        
        /// <summary>
        /// 关联考评人
        /// </summary>
        private long _accesser;
        
        /// <summary>
        /// AccessDate
        /// </summary>
        private System.DateTime _accessDate;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalQualityResultBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalQualityResultBase(long resultId, long periodId, long declareTargetPKID, long teacherId, double fullScore, double score, double characteristic, double dynamicScore1, double dynamicScore2, double dynamicScore3, string comment, long groupId, long accesser, System.DateTime accessDate) {
            _resultId = resultId;
            _periodId = periodId;
            _declareTargetPKID = declareTargetPKID;
            _teacherId = teacherId;
            _fullScore = fullScore;
            _score = score;
            _characteristic = characteristic;
            _dynamicScore1 = dynamicScore1;
            _dynamicScore2 = dynamicScore2;
            _dynamicScore3 = dynamicScore3;
            _comment = comment;
            _groupId = groupId;
            _accesser = accesser;
            _accessDate = accessDate;
        }
        
        /// <summary>
        /// ResultId
        /// </summary>
        [Display(Name="评价结果ID")]
        public virtual long ResultId {
            get {
                return _resultId;
            }
            set {
                _resultId = value;
            }
        }
        
        /// <summary>
        /// ResultId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResultIdDef {
            get {
                return APDBDef.EvalQualityResult.ResultId;
            }
        }
        
        /// <summary>
        /// PeriodId
        /// </summary>
        [Display(Name="周期ID")]
        public virtual long PeriodId {
            get {
                return _periodId;
            }
            set {
                _periodId = value;
            }
        }
        
        /// <summary>
        /// PeriodId APColumnDef
        /// </summary>
        public static Int64APColumnDef PeriodIdDef {
            get {
                return APDBDef.EvalQualityResult.PeriodId;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget
        /// </summary>
        [Display(Name="申报（担任）称号")]
        public virtual long DeclareTargetPKID {
            get {
                return _declareTargetPKID;
            }
            set {
                _declareTargetPKID = value;
            }
        }
        
        /// <summary>
        /// PickList - PLKey_DeclareTarget APColumnDef
        /// </summary>
        public static Int64APColumnDef DeclareTargetPKIDDef {
            get {
                return APDBDef.EvalQualityResult.DeclareTargetPKID;
            }
        }
        
        /// <summary>
        /// TeacherId
        /// </summary>
        [Display(Name="教师ID")]
        public virtual long TeacherId {
            get {
                return _teacherId;
            }
            set {
                _teacherId = value;
            }
        }
        
        /// <summary>
        /// TeacherId APColumnDef
        /// </summary>
        public static Int64APColumnDef TeacherIdDef {
            get {
                return APDBDef.EvalQualityResult.TeacherId;
            }
        }
        
        /// <summary>
        /// FullScore
        /// </summary>
        [Display(Name="总分")]
        public virtual double FullScore {
            get {
                return _fullScore;
            }
            set {
                _fullScore = value;
            }
        }
        
        /// <summary>
        /// FullScore APColumnDef
        /// </summary>
        public static DoubleAPColumnDef FullScoreDef {
            get {
                return APDBDef.EvalQualityResult.FullScore;
            }
        }
        
        /// <summary>
        /// Score
        /// </summary>
        [Display(Name="得分")]
        public virtual double Score {
            get {
                return _score;
            }
            set {
                _score = value;
            }
        }
        
        /// <summary>
        /// Score APColumnDef
        /// </summary>
        public static DoubleAPColumnDef ScoreDef {
            get {
                return APDBDef.EvalQualityResult.Score;
            }
        }
        
        /// <summary>
        /// Characteristic
        /// </summary>
        [Display(Name="特色分")]
        public virtual double Characteristic {
            get {
                return _characteristic;
            }
            set {
                _characteristic = value;
            }
        }
        
        /// <summary>
        /// Characteristic APColumnDef
        /// </summary>
        public static DoubleAPColumnDef CharacteristicDef {
            get {
                return APDBDef.EvalQualityResult.Characteristic;
            }
        }
        
        /// <summary>
        /// DynamicScore1
        /// </summary>
        [Display(Name="备用分1")]
        public virtual double DynamicScore1 {
            get {
                return _dynamicScore1;
            }
            set {
                _dynamicScore1 = value;
            }
        }
        
        /// <summary>
        /// DynamicScore1 APColumnDef
        /// </summary>
        public static DoubleAPColumnDef DynamicScore1Def {
            get {
                return APDBDef.EvalQualityResult.DynamicScore1;
            }
        }
        
        /// <summary>
        /// DynamicScore2
        /// </summary>
        [Display(Name="备用分2")]
        public virtual double DynamicScore2 {
            get {
                return _dynamicScore2;
            }
            set {
                _dynamicScore2 = value;
            }
        }
        
        /// <summary>
        /// DynamicScore2 APColumnDef
        /// </summary>
        public static DoubleAPColumnDef DynamicScore2Def {
            get {
                return APDBDef.EvalQualityResult.DynamicScore2;
            }
        }
        
        /// <summary>
        /// DynamicScore3
        /// </summary>
        [Display(Name="备用分3")]
        public virtual double DynamicScore3 {
            get {
                return _dynamicScore3;
            }
            set {
                _dynamicScore3 = value;
            }
        }
        
        /// <summary>
        /// DynamicScore3 APColumnDef
        /// </summary>
        public static DoubleAPColumnDef DynamicScore3Def {
            get {
                return APDBDef.EvalQualityResult.DynamicScore3;
            }
        }
        
        /// <summary>
        /// 每位专家的评语
        /// </summary>
        [Display(Name="总评")]
        [StringLength(10000)]
        public virtual string Comment {
            get {
                return _comment;
            }
            set {
                _comment = value;
            }
        }
        
        /// <summary>
        /// 每位专家的评语 APColumnDef
        /// </summary>
        public static StringAPColumnDef CommentDef {
            get {
                return APDBDef.EvalQualityResult.Comment;
            }
        }
        
        /// <summary>
        /// 关联专家组
        /// </summary>
        [Display(Name="专家组")]
        public virtual long GroupId {
            get {
                return _groupId;
            }
            set {
                _groupId = value;
            }
        }
        
        /// <summary>
        /// 关联专家组 APColumnDef
        /// </summary>
        public static Int64APColumnDef GroupIdDef {
            get {
                return APDBDef.EvalQualityResult.GroupId;
            }
        }
        
        /// <summary>
        /// 关联考评人
        /// </summary>
        [Display(Name="考评人")]
        public virtual long Accesser {
            get {
                return _accesser;
            }
            set {
                _accesser = value;
            }
        }
        
        /// <summary>
        /// 关联考评人 APColumnDef
        /// </summary>
        public static Int64APColumnDef AccesserDef {
            get {
                return APDBDef.EvalQualityResult.Accesser;
            }
        }
        
        /// <summary>
        /// AccessDate
        /// </summary>
        [Display(Name="考评时间")]
        public virtual System.DateTime AccessDate {
            get {
                return _accessDate;
            }
            set {
                _accessDate = value;
            }
        }
        
        /// <summary>
        /// AccessDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef AccessDateDef {
            get {
                return APDBDef.EvalQualityResult.AccessDate;
            }
        }
        
        /// <summary>
        /// EvalQualityResultTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalQualityResultTableDef TableDef {
            get {
                return APDBDef.EvalQualityResult;
            }
        }
        
        /// <summary>
        /// EvalQualityResultTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalQualityResult.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalQualityResult data) {
            ResultId = data.ResultId;
            PeriodId = data.PeriodId;
            DeclareTargetPKID = data.DeclareTargetPKID;
            TeacherId = data.TeacherId;
            FullScore = data.FullScore;
            Score = data.Score;
            Characteristic = data.Characteristic;
            DynamicScore1 = data.DynamicScore1;
            DynamicScore2 = data.DynamicScore2;
            DynamicScore3 = data.DynamicScore3;
            Comment = data.Comment;
            GroupId = data.GroupId;
            Accesser = data.Accesser;
            AccessDate = data.AccessDate;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalQualityResult data) {
            if ((ResultId != data.ResultId)) {
                return false;
            }
            if ((PeriodId != data.PeriodId)) {
                return false;
            }
            if ((DeclareTargetPKID != data.DeclareTargetPKID)) {
                return false;
            }
            if ((TeacherId != data.TeacherId)) {
                return false;
            }
            if ((FullScore != data.FullScore)) {
                return false;
            }
            if ((Score != data.Score)) {
                return false;
            }
            if ((Characteristic != data.Characteristic)) {
                return false;
            }
            if ((DynamicScore1 != data.DynamicScore1)) {
                return false;
            }
            if ((DynamicScore2 != data.DynamicScore2)) {
                return false;
            }
            if ((DynamicScore3 != data.DynamicScore3)) {
                return false;
            }
            if ((Comment != data.Comment)) {
                return false;
            }
            if ((GroupId != data.GroupId)) {
                return false;
            }
            if ((Accesser != data.Accesser)) {
                return false;
            }
            if ((AccessDate != data.AccessDate)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalQualityResultBpl.Insert(((EvalQualityResult)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalQualityResultBpl.Update(((EvalQualityResult)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long resultId, Object metadata) {
            APBplDef.EvalQualityResultBpl.UpdatePartial(resultId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long resultId) {
            APBplDef.EvalQualityResultBpl.PrimaryDelete(resultId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalQualityResultBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalQualityResultBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalQualityResult PrimaryGet(long resultId) {
            return APBplDef.EvalQualityResultBpl.PrimaryGet(resultId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalQualityResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalQualityResultBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalQualityResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalQualityResultBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalQualityResult> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalQualityResultBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalQualityResult> GetAll() {
            return APBplDef.EvalQualityResultBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 评价-质评-结果
    /// </summary>
    [Serializable()]
    public partial class EvalQualityResult : EvalQualityResultBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalQualityResult() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalQualityResult(long resultId, long periodId, long declareTargetPKID, long teacherId, double fullScore, double score, double characteristic, double dynamicScore1, double dynamicScore2, double dynamicScore3, string comment, long groupId, long accesser, System.DateTime accessDate) : 
                base(resultId, periodId, declareTargetPKID, teacherId, fullScore, score, characteristic, dynamicScore1, dynamicScore2, dynamicScore3, comment, groupId, accesser, accessDate) {
        }
    }
    
    /// <summary>
    /// 评价-质评-结果项 Base
    /// </summary>
    [Serializable()]
    public abstract partial class EvalQualityResultItemBase {
        
        /// <summary>
        /// ResultItemId
        /// </summary>
        private long _resultItemId;
        
        /// <summary>
        /// ResultId
        /// </summary>
        private long _resultId;
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        private string _evalItemKey = string.Empty;
        
        /// <summary>
        /// ChooseValue
        /// </summary>
        private string _chooseValue = string.Empty;
        
        /// <summary>
        /// ResultValue
        /// </summary>
        private string _resultValue = string.Empty;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalQualityResultItemBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalQualityResultItemBase(long resultItemId, long resultId, string evalItemKey, string chooseValue, string resultValue) {
            _resultItemId = resultItemId;
            _resultId = resultId;
            _evalItemKey = evalItemKey;
            _chooseValue = chooseValue;
            _resultValue = resultValue;
        }
        
        /// <summary>
        /// ResultItemId
        /// </summary>
        [Display(Name="结果项ID")]
        public virtual long ResultItemId {
            get {
                return _resultItemId;
            }
            set {
                _resultItemId = value;
            }
        }
        
        /// <summary>
        /// ResultItemId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResultItemIdDef {
            get {
                return APDBDef.EvalQualityResultItem.ResultItemId;
            }
        }
        
        /// <summary>
        /// ResultId
        /// </summary>
        [Display(Name="评价结果ID")]
        public virtual long ResultId {
            get {
                return _resultId;
            }
            set {
                _resultId = value;
            }
        }
        
        /// <summary>
        /// ResultId APColumnDef
        /// </summary>
        public static Int64APColumnDef ResultIdDef {
            get {
                return APDBDef.EvalQualityResultItem.ResultId;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割
        /// </summary>
        [Display(Name="指标项")]
        [StringLength(200)]
        public virtual string EvalItemKey {
            get {
                return _evalItemKey;
            }
            set {
                _evalItemKey = value;
            }
        }
        
        /// <summary>
        /// 用点分符做完字符串分割 APColumnDef
        /// </summary>
        public static StringAPColumnDef EvalItemKeyDef {
            get {
                return APDBDef.EvalQualityResultItem.EvalItemKey;
            }
        }
        
        /// <summary>
        /// ChooseValue
        /// </summary>
        [Display(Name="选择值")]
        [StringLength(20)]
        public virtual string ChooseValue {
            get {
                return _chooseValue;
            }
            set {
                _chooseValue = value;
            }
        }
        
        /// <summary>
        /// ChooseValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ChooseValueDef {
            get {
                return APDBDef.EvalQualityResultItem.ChooseValue;
            }
        }
        
        /// <summary>
        /// ResultValue
        /// </summary>
        [Display(Name="输入值")]
        [StringLength(100)]
        public virtual string ResultValue {
            get {
                return _resultValue;
            }
            set {
                _resultValue = value;
            }
        }
        
        /// <summary>
        /// ResultValue APColumnDef
        /// </summary>
        public static StringAPColumnDef ResultValueDef {
            get {
                return APDBDef.EvalQualityResultItem.ResultValue;
            }
        }
        
        /// <summary>
        /// EvalQualityResultItemTableDef APTableDef
        /// </summary>
        public static APDBDef.EvalQualityResultItemTableDef TableDef {
            get {
                return APDBDef.EvalQualityResultItem;
            }
        }
        
        /// <summary>
        /// EvalQualityResultItemTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.EvalQualityResultItem.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(EvalQualityResultItem data) {
            ResultItemId = data.ResultItemId;
            ResultId = data.ResultId;
            EvalItemKey = data.EvalItemKey;
            ChooseValue = data.ChooseValue;
            ResultValue = data.ResultValue;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(EvalQualityResultItem data) {
            if ((ResultItemId != data.ResultItemId)) {
                return false;
            }
            if ((ResultId != data.ResultId)) {
                return false;
            }
            if ((EvalItemKey != data.EvalItemKey)) {
                return false;
            }
            if ((ChooseValue != data.ChooseValue)) {
                return false;
            }
            if ((ResultValue != data.ResultValue)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.EvalQualityResultItemBpl.Insert(((EvalQualityResultItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.EvalQualityResultItemBpl.Update(((EvalQualityResultItem)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long resultItemId, Object metadata) {
            APBplDef.EvalQualityResultItemBpl.UpdatePartial(resultItemId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long resultItemId) {
            APBplDef.EvalQualityResultItemBpl.PrimaryDelete(resultItemId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.EvalQualityResultItemBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.EvalQualityResultItemBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static EvalQualityResultItem PrimaryGet(long resultItemId) {
            return APBplDef.EvalQualityResultItemBpl.PrimaryGet(resultItemId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalQualityResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.EvalQualityResultItemBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalQualityResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.EvalQualityResultItemBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<EvalQualityResultItem> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.EvalQualityResultItemBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<EvalQualityResultItem> GetAll() {
            return APBplDef.EvalQualityResultItemBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 评价-质评-结果项
    /// </summary>
    [Serializable()]
    public partial class EvalQualityResultItem : EvalQualityResultItemBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public EvalQualityResultItem() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public EvalQualityResultItem(long resultItemId, long resultId, string evalItemKey, string chooseValue, string resultValue) : 
                base(resultItemId, resultId, evalItemKey, chooseValue, resultValue) {
        }
    }
    
    /// <summary>
    /// 新闻 Base
    /// </summary>
    [Serializable()]
    public abstract partial class NewsBase {
        
        /// <summary>
        /// NewsId
        /// </summary>
        private long _newsId;
        
        /// <summary>
        /// Title
        /// </summary>
        private string _title = string.Empty;
        
        /// <summary>
        /// Content
        /// </summary>
        private string _content = string.Empty;
        
        /// <summary>
        /// ThumbUrl
        /// </summary>
        private string _thumbUrl = string.Empty;
        
        /// <summary>
        /// 创建人
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// CreatedTime
        /// </summary>
        private System.DateTime _createdTime;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public NewsBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public NewsBase(long newsId, string title, string content, string thumbUrl, long creator, System.DateTime createdTime) {
            _newsId = newsId;
            _title = title;
            _content = content;
            _thumbUrl = thumbUrl;
            _creator = creator;
            _createdTime = createdTime;
        }
        
        /// <summary>
        /// NewsId
        /// </summary>
        [Display(Name="新闻ID")]
        public virtual long NewsId {
            get {
                return _newsId;
            }
            set {
                _newsId = value;
            }
        }
        
        /// <summary>
        /// NewsId APColumnDef
        /// </summary>
        public static Int64APColumnDef NewsIdDef {
            get {
                return APDBDef.News.NewsId;
            }
        }
        
        /// <summary>
        /// Title
        /// </summary>
        [Display(Name="新闻标题")]
        [Required()]
        [StringLength(100)]
        public virtual string Title {
            get {
                return _title;
            }
            set {
                _title = value;
            }
        }
        
        /// <summary>
        /// Title APColumnDef
        /// </summary>
        public static StringAPColumnDef TitleDef {
            get {
                return APDBDef.News.Title;
            }
        }
        
        /// <summary>
        /// Content
        /// </summary>
        [Display(Name="新闻内容")]
        [Required()]
        [StringLength(20000)]
        public virtual string Content {
            get {
                return _content;
            }
            set {
                _content = value;
            }
        }
        
        /// <summary>
        /// Content APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentDef {
            get {
                return APDBDef.News.Content;
            }
        }
        
        /// <summary>
        /// ThumbUrl
        /// </summary>
        [Display(Name="新闻缩略图")]
        [StringLength(255)]
        public virtual string ThumbUrl {
            get {
                return _thumbUrl;
            }
            set {
                _thumbUrl = value;
            }
        }
        
        /// <summary>
        /// ThumbUrl APColumnDef
        /// </summary>
        public static StringAPColumnDef ThumbUrlDef {
            get {
                return APDBDef.News.ThumbUrl;
            }
        }
        
        /// <summary>
        /// 创建人
        /// </summary>
        [Display(Name="创建者ID")]
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// 创建人 APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.News.Creator;
            }
        }
        
        /// <summary>
        /// CreatedTime
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreatedTime {
            get {
                return _createdTime;
            }
            set {
                _createdTime = value;
            }
        }
        
        /// <summary>
        /// CreatedTime APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreatedTimeDef {
            get {
                return APDBDef.News.CreatedTime;
            }
        }
        
        /// <summary>
        /// NewsTableDef APTableDef
        /// </summary>
        public static APDBDef.NewsTableDef TableDef {
            get {
                return APDBDef.News;
            }
        }
        
        /// <summary>
        /// NewsTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.News.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(News data) {
            NewsId = data.NewsId;
            Title = data.Title;
            Content = data.Content;
            ThumbUrl = data.ThumbUrl;
            Creator = data.Creator;
            CreatedTime = data.CreatedTime;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(News data) {
            if ((NewsId != data.NewsId)) {
                return false;
            }
            if ((Title != data.Title)) {
                return false;
            }
            if ((Content != data.Content)) {
                return false;
            }
            if ((ThumbUrl != data.ThumbUrl)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((CreatedTime != data.CreatedTime)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.NewsBpl.Insert(((News)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.NewsBpl.Update(((News)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long newsId, Object metadata) {
            APBplDef.NewsBpl.UpdatePartial(newsId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long newsId) {
            APBplDef.NewsBpl.PrimaryDelete(newsId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.NewsBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.NewsBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static News PrimaryGet(long newsId) {
            return APBplDef.NewsBpl.PrimaryGet(newsId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<News> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.NewsBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<News> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.NewsBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<News> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.NewsBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<News> GetAll() {
            return APBplDef.NewsBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 新闻
    /// </summary>
    [Serializable()]
    public partial class News : NewsBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public News() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public News(long newsId, string title, string content, string thumbUrl, long creator, System.DateTime createdTime) : 
                base(newsId, title, content, thumbUrl, creator, createdTime) {
        }
    }
    
    /// <summary>
    /// 首页图片 Base
    /// </summary>
    [Serializable()]
    public abstract partial class HomePageImageBase {
        
        /// <summary>
        /// ImgId
        /// </summary>
        private long _imgId;
        
        /// <summary>
        /// ImgUrl
        /// </summary>
        private string _imgUrl = string.Empty;
        
        /// <summary>
        /// ImgName
        /// </summary>
        private string _imgName = string.Empty;
        
        /// <summary>
        /// UploadDate
        /// </summary>
        private System.DateTime _uploadDate;
        
        /// <summary>
        /// UseDate
        /// </summary>
        private System.DateTime _useDate;
        
        /// <summary>
        /// ImgType
        /// </summary>
        private bool _imgType;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public HomePageImageBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public HomePageImageBase(long imgId, string imgUrl, string imgName, System.DateTime uploadDate, System.DateTime useDate, bool imgType) {
            _imgId = imgId;
            _imgUrl = imgUrl;
            _imgName = imgName;
            _uploadDate = uploadDate;
            _useDate = useDate;
            _imgType = imgType;
        }
        
        /// <summary>
        /// ImgId
        /// </summary>
        [Display(Name="图片ID")]
        public virtual long ImgId {
            get {
                return _imgId;
            }
            set {
                _imgId = value;
            }
        }
        
        /// <summary>
        /// ImgId APColumnDef
        /// </summary>
        public static Int64APColumnDef ImgIdDef {
            get {
                return APDBDef.HomePageImage.ImgId;
            }
        }
        
        /// <summary>
        /// ImgUrl
        /// </summary>
        [Display(Name="图片路径")]
        [StringLength(2000)]
        public virtual string ImgUrl {
            get {
                return _imgUrl;
            }
            set {
                _imgUrl = value;
            }
        }
        
        /// <summary>
        /// ImgUrl APColumnDef
        /// </summary>
        public static StringAPColumnDef ImgUrlDef {
            get {
                return APDBDef.HomePageImage.ImgUrl;
            }
        }
        
        /// <summary>
        /// ImgName
        /// </summary>
        [Display(Name="图片名称")]
        [StringLength(255)]
        public virtual string ImgName {
            get {
                return _imgName;
            }
            set {
                _imgName = value;
            }
        }
        
        /// <summary>
        /// ImgName APColumnDef
        /// </summary>
        public static StringAPColumnDef ImgNameDef {
            get {
                return APDBDef.HomePageImage.ImgName;
            }
        }
        
        /// <summary>
        /// UploadDate
        /// </summary>
        [Display(Name="上传时间")]
        public virtual System.DateTime UploadDate {
            get {
                return _uploadDate;
            }
            set {
                _uploadDate = value;
            }
        }
        
        /// <summary>
        /// UploadDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef UploadDateDef {
            get {
                return APDBDef.HomePageImage.UploadDate;
            }
        }
        
        /// <summary>
        /// UseDate
        /// </summary>
        [Display(Name="上架/下架时间")]
        public virtual System.DateTime UseDate {
            get {
                return _useDate;
            }
            set {
                _useDate = value;
            }
        }
        
        /// <summary>
        /// UseDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef UseDateDef {
            get {
                return APDBDef.HomePageImage.UseDate;
            }
        }
        
        /// <summary>
        /// ImgType
        /// </summary>
        [Display(Name="图片状态")]
        public virtual bool ImgType {
            get {
                return _imgType;
            }
            set {
                _imgType = value;
            }
        }
        
        /// <summary>
        /// ImgType APColumnDef
        /// </summary>
        public static BooleanAPColumnDef ImgTypeDef {
            get {
                return APDBDef.HomePageImage.ImgType;
            }
        }
        
        /// <summary>
        /// HomePageImageTableDef APTableDef
        /// </summary>
        public static APDBDef.HomePageImageTableDef TableDef {
            get {
                return APDBDef.HomePageImage;
            }
        }
        
        /// <summary>
        /// HomePageImageTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.HomePageImage.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(HomePageImage data) {
            ImgId = data.ImgId;
            ImgUrl = data.ImgUrl;
            ImgName = data.ImgName;
            UploadDate = data.UploadDate;
            UseDate = data.UseDate;
            ImgType = data.ImgType;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(HomePageImage data) {
            if ((ImgId != data.ImgId)) {
                return false;
            }
            if ((ImgUrl != data.ImgUrl)) {
                return false;
            }
            if ((ImgName != data.ImgName)) {
                return false;
            }
            if ((UploadDate != data.UploadDate)) {
                return false;
            }
            if ((UseDate != data.UseDate)) {
                return false;
            }
            if ((ImgType != data.ImgType)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.HomePageImageBpl.Insert(((HomePageImage)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.HomePageImageBpl.Update(((HomePageImage)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long imgId, Object metadata) {
            APBplDef.HomePageImageBpl.UpdatePartial(imgId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long imgId) {
            APBplDef.HomePageImageBpl.PrimaryDelete(imgId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.HomePageImageBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.HomePageImageBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static HomePageImage PrimaryGet(long imgId) {
            return APBplDef.HomePageImageBpl.PrimaryGet(imgId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<HomePageImage> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.HomePageImageBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<HomePageImage> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.HomePageImageBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<HomePageImage> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.HomePageImageBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<HomePageImage> GetAll() {
            return APBplDef.HomePageImageBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 首页图片
    /// </summary>
    [Serializable()]
    public partial class HomePageImage : HomePageImageBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public HomePageImage() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public HomePageImage(long imgId, string imgUrl, string imgName, System.DateTime uploadDate, System.DateTime useDate, bool imgType) : 
                base(imgId, imgUrl, imgName, uploadDate, useDate, imgType) {
        }
    }
    
    /// <summary>
    /// 附件 Base
    /// </summary>
    [Serializable()]
    public abstract partial class AttachmentsBase {
        
        /// <summary>
        /// ID
        /// </summary>
        private long _iD;
        
        /// <summary>
        /// Type
        /// </summary>
        private string _type = string.Empty;
        
        /// <summary>
        /// JoinId
        /// </summary>
        private long _joinId;
        
        /// <summary>
        /// UserId
        /// </summary>
        private long _userId;
        
        /// <summary>
        /// AttachmentUrl
        /// </summary>
        private string _attachmentUrl = string.Empty;
        
        /// <summary>
        /// AttachmentName
        /// </summary>
        private string _attachmentName = string.Empty;
        
        /// <summary>
        /// UploadDate
        /// </summary>
        private System.DateTime _uploadDate;
        
        /// <summary>
        /// PreviewUrl
        /// </summary>
        private string _previewUrl;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public AttachmentsBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public AttachmentsBase(long iD, string type, long joinId, long userId, string attachmentUrl, string attachmentName, System.DateTime uploadDate, string previewUrl) {
            _iD = iD;
            _type = type;
            _joinId = joinId;
            _userId = userId;
            _attachmentUrl = attachmentUrl;
            _attachmentName = attachmentName;
            _uploadDate = uploadDate;
            _previewUrl = previewUrl;
        }
        
        /// <summary>
        /// ID
        /// </summary>
        [Display(Name="附件ID")]
        public virtual long ID {
            get {
                return _iD;
            }
            set {
                _iD = value;
            }
        }
        
        /// <summary>
        /// ID APColumnDef
        /// </summary>
        public static Int64APColumnDef IDDef {
            get {
                return APDBDef.Attachments.ID;
            }
        }
        
        /// <summary>
        /// Type
        /// </summary>
        [Display(Name="类型")]
        [StringLength(100)]
        public virtual string Type {
            get {
                return _type;
            }
            set {
                _type = value;
            }
        }
        
        /// <summary>
        /// Type APColumnDef
        /// </summary>
        public static StringAPColumnDef TypeDef {
            get {
                return APDBDef.Attachments.Type;
            }
        }
        
        /// <summary>
        /// JoinId
        /// </summary>
        [Display(Name="关联ID")]
        public virtual long JoinId {
            get {
                return _joinId;
            }
            set {
                _joinId = value;
            }
        }
        
        /// <summary>
        /// JoinId APColumnDef
        /// </summary>
        public static Int64APColumnDef JoinIdDef {
            get {
                return APDBDef.Attachments.JoinId;
            }
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        [Display(Name="用户ID")]
        public virtual long UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static Int64APColumnDef UserIdDef {
            get {
                return APDBDef.Attachments.UserId;
            }
        }
        
        /// <summary>
        /// AttachmentUrl
        /// </summary>
        [Display(Name="附件路径")]
        [StringLength(255)]
        public virtual string AttachmentUrl {
            get {
                return _attachmentUrl;
            }
            set {
                _attachmentUrl = value;
            }
        }
        
        /// <summary>
        /// AttachmentUrl APColumnDef
        /// </summary>
        public static StringAPColumnDef AttachmentUrlDef {
            get {
                return APDBDef.Attachments.AttachmentUrl;
            }
        }
        
        /// <summary>
        /// AttachmentName
        /// </summary>
        [Display(Name="附件名称")]
        [StringLength(100)]
        public virtual string AttachmentName {
            get {
                return _attachmentName;
            }
            set {
                _attachmentName = value;
            }
        }
        
        /// <summary>
        /// AttachmentName APColumnDef
        /// </summary>
        public static StringAPColumnDef AttachmentNameDef {
            get {
                return APDBDef.Attachments.AttachmentName;
            }
        }
        
        /// <summary>
        /// UploadDate
        /// </summary>
        [Display(Name="上传时间")]
        public virtual System.DateTime UploadDate {
            get {
                return _uploadDate;
            }
            set {
                _uploadDate = value;
            }
        }
        
        /// <summary>
        /// UploadDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef UploadDateDef {
            get {
                return APDBDef.Attachments.UploadDate;
            }
        }
        
        /// <summary>
        /// PreviewUrl
        /// </summary>
        [Display(Name="附件预览路径")]
        [StringLength(255)]
        public virtual string PreviewUrl {
            get {
                return _previewUrl;
            }
            set {
                _previewUrl = value;
            }
        }
        
        /// <summary>
        /// PreviewUrl APColumnDef
        /// </summary>
        public static StringAPColumnDef PreviewUrlDef {
            get {
                return APDBDef.Attachments.PreviewUrl;
            }
        }
        
        /// <summary>
        /// AttachmentsTableDef APTableDef
        /// </summary>
        public static APDBDef.AttachmentsTableDef TableDef {
            get {
                return APDBDef.Attachments;
            }
        }
        
        /// <summary>
        /// AttachmentsTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Attachments.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Attachments data) {
            ID = data.ID;
            Type = data.Type;
            JoinId = data.JoinId;
            UserId = data.UserId;
            AttachmentUrl = data.AttachmentUrl;
            AttachmentName = data.AttachmentName;
            UploadDate = data.UploadDate;
            PreviewUrl = data.PreviewUrl;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Attachments data) {
            if ((ID != data.ID)) {
                return false;
            }
            if ((Type != data.Type)) {
                return false;
            }
            if ((JoinId != data.JoinId)) {
                return false;
            }
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((AttachmentUrl != data.AttachmentUrl)) {
                return false;
            }
            if ((AttachmentName != data.AttachmentName)) {
                return false;
            }
            if ((UploadDate != data.UploadDate)) {
                return false;
            }
            if ((PreviewUrl != data.PreviewUrl)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.AttachmentsBpl.Insert(((Attachments)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.AttachmentsBpl.Update(((Attachments)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long iD, Object metadata) {
            APBplDef.AttachmentsBpl.UpdatePartial(iD, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long iD) {
            APBplDef.AttachmentsBpl.PrimaryDelete(iD);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.AttachmentsBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.AttachmentsBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Attachments PrimaryGet(long iD) {
            return APBplDef.AttachmentsBpl.PrimaryGet(iD);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Attachments> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.AttachmentsBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Attachments> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.AttachmentsBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Attachments> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.AttachmentsBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Attachments> GetAll() {
            return APBplDef.AttachmentsBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 附件
    /// </summary>
    [Serializable()]
    public partial class Attachments : AttachmentsBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Attachments() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Attachments(long iD, string type, long joinId, long userId, string attachmentUrl, string attachmentName, System.DateTime uploadDate, string previewUrl) : 
                base(iD, type, joinId, userId, attachmentUrl, attachmentName, uploadDate, previewUrl) {
        }
    }
    
    /// <summary>
    /// 通知 Base
    /// </summary>
    [Serializable()]
    public abstract partial class NoticeBase {
        
        /// <summary>
        /// NoticeId
        /// </summary>
        private long _noticeId;
        
        /// <summary>
        /// Title
        /// </summary>
        private string _title = string.Empty;
        
        /// <summary>
        /// Content
        /// </summary>
        private string _content = string.Empty;
        
        /// <summary>
        /// IsSend
        /// </summary>
        private bool _isSend;
        
        /// <summary>
        /// 创建人
        /// </summary>
        private long _creator;
        
        /// <summary>
        /// CreatedTime
        /// </summary>
        private System.DateTime _createdTime;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public NoticeBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public NoticeBase(long noticeId, string title, string content, bool isSend, long creator, System.DateTime createdTime) {
            _noticeId = noticeId;
            _title = title;
            _content = content;
            _isSend = isSend;
            _creator = creator;
            _createdTime = createdTime;
        }
        
        /// <summary>
        /// NoticeId
        /// </summary>
        [Display(Name="通知ID")]
        public virtual long NoticeId {
            get {
                return _noticeId;
            }
            set {
                _noticeId = value;
            }
        }
        
        /// <summary>
        /// NoticeId APColumnDef
        /// </summary>
        public static Int64APColumnDef NoticeIdDef {
            get {
                return APDBDef.Notice.NoticeId;
            }
        }
        
        /// <summary>
        /// Title
        /// </summary>
        [Display(Name="通知标题")]
        [Required()]
        [StringLength(100)]
        public virtual string Title {
            get {
                return _title;
            }
            set {
                _title = value;
            }
        }
        
        /// <summary>
        /// Title APColumnDef
        /// </summary>
        public static StringAPColumnDef TitleDef {
            get {
                return APDBDef.Notice.Title;
            }
        }
        
        /// <summary>
        /// Content
        /// </summary>
        [Display(Name="通知内容")]
        [Required()]
        [StringLength(20000)]
        public virtual string Content {
            get {
                return _content;
            }
            set {
                _content = value;
            }
        }
        
        /// <summary>
        /// Content APColumnDef
        /// </summary>
        public static StringAPColumnDef ContentDef {
            get {
                return APDBDef.Notice.Content;
            }
        }
        
        /// <summary>
        /// IsSend
        /// </summary>
        [Display(Name="是否推送")]
        public virtual bool IsSend {
            get {
                return _isSend;
            }
            set {
                _isSend = value;
            }
        }
        
        /// <summary>
        /// IsSend APColumnDef
        /// </summary>
        public static BooleanAPColumnDef IsSendDef {
            get {
                return APDBDef.Notice.IsSend;
            }
        }
        
        /// <summary>
        /// 创建人
        /// </summary>
        [Display(Name="创建者ID")]
        public virtual long Creator {
            get {
                return _creator;
            }
            set {
                _creator = value;
            }
        }
        
        /// <summary>
        /// 创建人 APColumnDef
        /// </summary>
        public static Int64APColumnDef CreatorDef {
            get {
                return APDBDef.Notice.Creator;
            }
        }
        
        /// <summary>
        /// CreatedTime
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreatedTime {
            get {
                return _createdTime;
            }
            set {
                _createdTime = value;
            }
        }
        
        /// <summary>
        /// CreatedTime APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreatedTimeDef {
            get {
                return APDBDef.Notice.CreatedTime;
            }
        }
        
        /// <summary>
        /// NoticeTableDef APTableDef
        /// </summary>
        public static APDBDef.NoticeTableDef TableDef {
            get {
                return APDBDef.Notice;
            }
        }
        
        /// <summary>
        /// NoticeTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Notice.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Notice data) {
            NoticeId = data.NoticeId;
            Title = data.Title;
            Content = data.Content;
            IsSend = data.IsSend;
            Creator = data.Creator;
            CreatedTime = data.CreatedTime;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Notice data) {
            if ((NoticeId != data.NoticeId)) {
                return false;
            }
            if ((Title != data.Title)) {
                return false;
            }
            if ((Content != data.Content)) {
                return false;
            }
            if ((IsSend != data.IsSend)) {
                return false;
            }
            if ((Creator != data.Creator)) {
                return false;
            }
            if ((CreatedTime != data.CreatedTime)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.NoticeBpl.Insert(((Notice)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.NoticeBpl.Update(((Notice)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long noticeId, Object metadata) {
            APBplDef.NoticeBpl.UpdatePartial(noticeId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long noticeId) {
            APBplDef.NoticeBpl.PrimaryDelete(noticeId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.NoticeBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.NoticeBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Notice PrimaryGet(long noticeId) {
            return APBplDef.NoticeBpl.PrimaryGet(noticeId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Notice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.NoticeBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Notice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.NoticeBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Notice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.NoticeBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Notice> GetAll() {
            return APBplDef.NoticeBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 通知
    /// </summary>
    [Serializable()]
    public partial class Notice : NoticeBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Notice() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Notice(long noticeId, string title, string content, bool isSend, long creator, System.DateTime createdTime) : 
                base(noticeId, title, content, isSend, creator, createdTime) {
        }
    }
    
    /// <summary>
    /// 阅读通知 Base
    /// </summary>
    [Serializable()]
    public abstract partial class ReadNoticeBase {
        
        /// <summary>
        /// NoticeId
        /// </summary>
        private long _noticeId;
        
        /// <summary>
        /// UserId
        /// </summary>
        private long _userId;
        
        /// <summary>
        /// ReadTime
        /// </summary>
        private System.DateTime _readTime;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ReadNoticeBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ReadNoticeBase(long noticeId, long userId, System.DateTime readTime) {
            _noticeId = noticeId;
            _userId = userId;
            _readTime = readTime;
        }
        
        /// <summary>
        /// NoticeId
        /// </summary>
        [Display(Name="通知ID")]
        public virtual long NoticeId {
            get {
                return _noticeId;
            }
            set {
                _noticeId = value;
            }
        }
        
        /// <summary>
        /// NoticeId APColumnDef
        /// </summary>
        public static Int64APColumnDef NoticeIdDef {
            get {
                return APDBDef.ReadNotice.NoticeId;
            }
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        [Display(Name="用户ID")]
        public virtual long UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static Int64APColumnDef UserIdDef {
            get {
                return APDBDef.ReadNotice.UserId;
            }
        }
        
        /// <summary>
        /// ReadTime
        /// </summary>
        [Display(Name="阅读时间")]
        public virtual System.DateTime ReadTime {
            get {
                return _readTime;
            }
            set {
                _readTime = value;
            }
        }
        
        /// <summary>
        /// ReadTime APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef ReadTimeDef {
            get {
                return APDBDef.ReadNotice.ReadTime;
            }
        }
        
        /// <summary>
        /// ReadNoticeTableDef APTableDef
        /// </summary>
        public static APDBDef.ReadNoticeTableDef TableDef {
            get {
                return APDBDef.ReadNotice;
            }
        }
        
        /// <summary>
        /// ReadNoticeTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.ReadNotice.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(ReadNotice data) {
            NoticeId = data.NoticeId;
            UserId = data.UserId;
            ReadTime = data.ReadTime;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(ReadNotice data) {
            if ((NoticeId != data.NoticeId)) {
                return false;
            }
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((ReadTime != data.ReadTime)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ReadNoticeBpl.Insert(((ReadNotice)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ReadNoticeBpl.Update(((ReadNotice)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long noticeId, long userId, Object metadata) {
            APBplDef.ReadNoticeBpl.UpdatePartial(noticeId, userId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long noticeId, long userId) {
            APBplDef.ReadNoticeBpl.PrimaryDelete(noticeId, userId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ReadNoticeBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ReadNoticeBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static ReadNotice PrimaryGet(long noticeId, long userId) {
            return APBplDef.ReadNoticeBpl.PrimaryGet(noticeId, userId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ReadNotice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ReadNoticeBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ReadNotice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ReadNoticeBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<ReadNotice> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ReadNoticeBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<ReadNotice> GetAll() {
            return APBplDef.ReadNoticeBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 阅读通知
    /// </summary>
    [Serializable()]
    public partial class ReadNotice : ReadNoticeBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ReadNotice() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ReadNotice(long noticeId, long userId, System.DateTime readTime) : 
                base(noticeId, userId, readTime) {
        }
    }
    
    /// <summary>
    /// 共享 Base
    /// </summary>
    [Serializable()]
    public abstract partial class ShareBase {
        
        /// <summary>
        /// ShareId
        /// </summary>
        private long _shareId;
        
        /// <summary>
        /// UserId
        /// </summary>
        private long _userId;
        
        /// <summary>
        /// ItemId
        /// </summary>
        private long _itemId;
        
        /// <summary>
        /// Title
        /// </summary>
        private string _title = string.Empty;
        
        /// <summary>
        /// ParentType
        /// </summary>
        private string _parentType = string.Empty;
        
        /// <summary>
        /// Type
        /// </summary>
        private string _type = string.Empty;
        
        /// <summary>
        /// CreateDate
        /// </summary>
        private System.DateTime _createDate;
        
        /// <summary>
        /// PubishDate
        /// </summary>
        private System.DateTime _pubishDate;
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public ShareBase() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public ShareBase(long shareId, long userId, long itemId, string title, string parentType, string type, System.DateTime createDate, System.DateTime pubishDate) {
            _shareId = shareId;
            _userId = userId;
            _itemId = itemId;
            _title = title;
            _parentType = parentType;
            _type = type;
            _createDate = createDate;
            _pubishDate = pubishDate;
        }
        
        /// <summary>
        /// ShareId
        /// </summary>
        [Display(Name="梯队共享ID")]
        public virtual long ShareId {
            get {
                return _shareId;
            }
            set {
                _shareId = value;
            }
        }
        
        /// <summary>
        /// ShareId APColumnDef
        /// </summary>
        public static Int64APColumnDef ShareIdDef {
            get {
                return APDBDef.Share.ShareId;
            }
        }
        
        /// <summary>
        /// UserId
        /// </summary>
        [Display(Name="共享者ID")]
        public virtual long UserId {
            get {
                return _userId;
            }
            set {
                _userId = value;
            }
        }
        
        /// <summary>
        /// UserId APColumnDef
        /// </summary>
        public static Int64APColumnDef UserIdDef {
            get {
                return APDBDef.Share.UserId;
            }
        }
        
        /// <summary>
        /// ItemId
        /// </summary>
        [Display(Name="共享项ID")]
        public virtual long ItemId {
            get {
                return _itemId;
            }
            set {
                _itemId = value;
            }
        }
        
        /// <summary>
        /// ItemId APColumnDef
        /// </summary>
        public static Int64APColumnDef ItemIdDef {
            get {
                return APDBDef.Share.ItemId;
            }
        }
        
        /// <summary>
        /// Title
        /// </summary>
        [Display(Name="共享标题/内容")]
        [StringLength(1000)]
        public virtual string Title {
            get {
                return _title;
            }
            set {
                _title = value;
            }
        }
        
        /// <summary>
        /// Title APColumnDef
        /// </summary>
        public static StringAPColumnDef TitleDef {
            get {
                return APDBDef.Share.Title;
            }
        }
        
        /// <summary>
        /// ParentType
        /// </summary>
        [Display(Name="父共享类型")]
        [StringLength(255)]
        public virtual string ParentType {
            get {
                return _parentType;
            }
            set {
                _parentType = value;
            }
        }
        
        /// <summary>
        /// ParentType APColumnDef
        /// </summary>
        public static StringAPColumnDef ParentTypeDef {
            get {
                return APDBDef.Share.ParentType;
            }
        }
        
        /// <summary>
        /// Type
        /// </summary>
        [Display(Name="共享类型")]
        [StringLength(255)]
        public virtual string Type {
            get {
                return _type;
            }
            set {
                _type = value;
            }
        }
        
        /// <summary>
        /// Type APColumnDef
        /// </summary>
        public static StringAPColumnDef TypeDef {
            get {
                return APDBDef.Share.Type;
            }
        }
        
        /// <summary>
        /// CreateDate
        /// </summary>
        [Display(Name="创建时间")]
        public virtual System.DateTime CreateDate {
            get {
                return _createDate;
            }
            set {
                _createDate = value;
            }
        }
        
        /// <summary>
        /// CreateDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef CreateDateDef {
            get {
                return APDBDef.Share.CreateDate;
            }
        }
        
        /// <summary>
        /// PubishDate
        /// </summary>
        [Display(Name="发布时间")]
        public virtual System.DateTime PubishDate {
            get {
                return _pubishDate;
            }
            set {
                _pubishDate = value;
            }
        }
        
        /// <summary>
        /// PubishDate APColumnDef
        /// </summary>
        public static DateTimeAPColumnDef PubishDateDef {
            get {
                return APDBDef.Share.PubishDate;
            }
        }
        
        /// <summary>
        /// ShareTableDef APTableDef
        /// </summary>
        public static APDBDef.ShareTableDef TableDef {
            get {
                return APDBDef.Share;
            }
        }
        
        /// <summary>
        /// ShareTableDef APSqlAsteriskExpr
        /// </summary>
        public static APSqlAsteriskExpr Asterisk {
            get {
                return APDBDef.Share.Asterisk;
            }
        }
        
        /// <summary>
        /// 赋值。
        /// </summary>
        public virtual void Assignment(Share data) {
            ShareId = data.ShareId;
            UserId = data.UserId;
            ItemId = data.ItemId;
            Title = data.Title;
            ParentType = data.ParentType;
            Type = data.Type;
            CreateDate = data.CreateDate;
            PubishDate = data.PubishDate;
        }
        
        /// <summary>
        /// 比较。
        /// </summary>
        public virtual bool CompareEquals(Share data) {
            if ((ShareId != data.ShareId)) {
                return false;
            }
            if ((UserId != data.UserId)) {
                return false;
            }
            if ((ItemId != data.ItemId)) {
                return false;
            }
            if ((Title != data.Title)) {
                return false;
            }
            if ((ParentType != data.ParentType)) {
                return false;
            }
            if ((Type != data.Type)) {
                return false;
            }
            if ((CreateDate != data.CreateDate)) {
                return false;
            }
            if ((PubishDate != data.PubishDate)) {
                return false;
            }
            return true;
        }
        
        /// <summary>
        /// 添加数据。
        /// </summary>
        public virtual void Insert() {
            APBplDef.ShareBpl.Insert(((Share)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public virtual void Update() {
            APBplDef.ShareBpl.Update(((Share)(this)));
        }
        
        /// <summary>
        /// 更新数据。
        /// </summary>
        public static void UpdatePartial(long shareId, Object metadata) {
            APBplDef.ShareBpl.UpdatePartial(shareId, metadata);
        }
        
        /// <summary>
        /// 删除数据。
        /// </summary>
        public static void PrimaryDelete(long shareId) {
            APBplDef.ShareBpl.PrimaryDelete(shareId);
        }
        
        /// <summary>
        /// 条件删除数据。
        /// </summary>
        public static void ConditionDelete(APSqlWherePhrase condition) {
            APBplDef.ShareBpl.ConditionDelete(condition);
        }
        
        /// <summary>
        /// 根据条件查询数量。
        /// </summary>
        public static int ConditionQueryCount(APSqlWherePhrase condition) {
            return APBplDef.ShareBpl.ConditionQueryCount(condition);
        }
        
        /// <summary>
        /// 根据主键获取数据。
        /// </summary>
        public static Share PrimaryGet(long shareId) {
            return APBplDef.ShareBpl.PrimaryGet(shareId);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Share> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take, int skip) {
            return APBplDef.ShareBpl.ConditionQuery(condition, orderBy, take, skip);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Share> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy, int take) {
            return APBplDef.ShareBpl.ConditionQuery(condition, orderBy, take);
        }
        
        /// <summary>
        /// 根据指定条件查询数据。
        /// </summary>
        public static List<Share> ConditionQuery(APSqlWherePhrase condition, APSqlOrderPhrase orderBy) {
            return APBplDef.ShareBpl.ConditionQuery(condition, orderBy);
        }
        
        /// <summary>
        /// 获取所有数据。
        /// </summary>
        public static List<Share> GetAll() {
            return APBplDef.ShareBpl.GetAll();
        }
    }
    
    /// <summary>
    /// 共享
    /// </summary>
    [Serializable()]
    public partial class Share : ShareBase {
        
        /// <summary>
        /// 默认构造函数。
        /// </summary>
        public Share() {
        }
        
        /// <summary>
        /// 初始化所有字段的构造函数。
        /// </summary>
        public Share(long shareId, long userId, long itemId, string title, string parentType, string type, System.DateTime createDate, System.DateTime pubishDate) : 
                base(shareId, userId, itemId, title, parentType, type, createDate, pubishDate) {
        }
    }
}
